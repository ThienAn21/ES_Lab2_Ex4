
Bai4_I2C_Realtimeclock.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006bd4  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002fc0  08006d5c  08006d5c  00007d5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009d1c  08009d1c  0000b014  2**0
                  CONTENTS
  4 .ARM          00000008  08009d1c  08009d1c  0000ad1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009d24  08009d24  0000b014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009d24  08009d24  0000ad24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009d28  08009d28  0000ad28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  08009d2c  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000b014  2**0
                  CONTENTS
 10 .bss          000001fc  20000014  20000014  0000b014  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000210  20000210  0000b014  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000b014  2**0
                  CONTENTS, READONLY
 13 .debug_info   00012e8a  00000000  00000000  0000b044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003483  00000000  00000000  0001dece  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000012a0  00000000  00000000  00021358  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000e65  00000000  00000000  000225f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023912  00000000  00000000  0002345d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000196ab  00000000  00000000  00046d6f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cfbb9  00000000  00000000  0006041a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0012ffd3  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004c6c  00000000  00000000  00130018  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006c  00000000  00000000  00134c84  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000014 	.word	0x20000014
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08006d44 	.word	0x08006d44

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000018 	.word	0x20000018
 80001c4:	08006d44 	.word	0x08006d44

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b96a 	b.w	80004b4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	460c      	mov	r4, r1
 8000200:	2b00      	cmp	r3, #0
 8000202:	d14e      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000204:	4694      	mov	ip, r2
 8000206:	458c      	cmp	ip, r1
 8000208:	4686      	mov	lr, r0
 800020a:	fab2 f282 	clz	r2, r2
 800020e:	d962      	bls.n	80002d6 <__udivmoddi4+0xde>
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0320 	rsb	r3, r2, #32
 8000216:	4091      	lsls	r1, r2
 8000218:	fa20 f303 	lsr.w	r3, r0, r3
 800021c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000220:	4319      	orrs	r1, r3
 8000222:	fa00 fe02 	lsl.w	lr, r0, r2
 8000226:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800022a:	fa1f f68c 	uxth.w	r6, ip
 800022e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000232:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000236:	fb07 1114 	mls	r1, r7, r4, r1
 800023a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023e:	fb04 f106 	mul.w	r1, r4, r6
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f104 30ff 	add.w	r0, r4, #4294967295
 800024e:	f080 8112 	bcs.w	8000476 <__udivmoddi4+0x27e>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 810f 	bls.w	8000476 <__udivmoddi4+0x27e>
 8000258:	3c02      	subs	r4, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a59      	subs	r1, r3, r1
 800025e:	fa1f f38e 	uxth.w	r3, lr
 8000262:	fbb1 f0f7 	udiv	r0, r1, r7
 8000266:	fb07 1110 	mls	r1, r7, r0, r1
 800026a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800026e:	fb00 f606 	mul.w	r6, r0, r6
 8000272:	429e      	cmp	r6, r3
 8000274:	d90a      	bls.n	800028c <__udivmoddi4+0x94>
 8000276:	eb1c 0303 	adds.w	r3, ip, r3
 800027a:	f100 31ff 	add.w	r1, r0, #4294967295
 800027e:	f080 80fc 	bcs.w	800047a <__udivmoddi4+0x282>
 8000282:	429e      	cmp	r6, r3
 8000284:	f240 80f9 	bls.w	800047a <__udivmoddi4+0x282>
 8000288:	4463      	add	r3, ip
 800028a:	3802      	subs	r0, #2
 800028c:	1b9b      	subs	r3, r3, r6
 800028e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000292:	2100      	movs	r1, #0
 8000294:	b11d      	cbz	r5, 800029e <__udivmoddi4+0xa6>
 8000296:	40d3      	lsrs	r3, r2
 8000298:	2200      	movs	r2, #0
 800029a:	e9c5 3200 	strd	r3, r2, [r5]
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d905      	bls.n	80002b2 <__udivmoddi4+0xba>
 80002a6:	b10d      	cbz	r5, 80002ac <__udivmoddi4+0xb4>
 80002a8:	e9c5 0100 	strd	r0, r1, [r5]
 80002ac:	2100      	movs	r1, #0
 80002ae:	4608      	mov	r0, r1
 80002b0:	e7f5      	b.n	800029e <__udivmoddi4+0xa6>
 80002b2:	fab3 f183 	clz	r1, r3
 80002b6:	2900      	cmp	r1, #0
 80002b8:	d146      	bne.n	8000348 <__udivmoddi4+0x150>
 80002ba:	42a3      	cmp	r3, r4
 80002bc:	d302      	bcc.n	80002c4 <__udivmoddi4+0xcc>
 80002be:	4290      	cmp	r0, r2
 80002c0:	f0c0 80f0 	bcc.w	80004a4 <__udivmoddi4+0x2ac>
 80002c4:	1a86      	subs	r6, r0, r2
 80002c6:	eb64 0303 	sbc.w	r3, r4, r3
 80002ca:	2001      	movs	r0, #1
 80002cc:	2d00      	cmp	r5, #0
 80002ce:	d0e6      	beq.n	800029e <__udivmoddi4+0xa6>
 80002d0:	e9c5 6300 	strd	r6, r3, [r5]
 80002d4:	e7e3      	b.n	800029e <__udivmoddi4+0xa6>
 80002d6:	2a00      	cmp	r2, #0
 80002d8:	f040 8090 	bne.w	80003fc <__udivmoddi4+0x204>
 80002dc:	eba1 040c 	sub.w	r4, r1, ip
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	fa1f f78c 	uxth.w	r7, ip
 80002e8:	2101      	movs	r1, #1
 80002ea:	fbb4 f6f8 	udiv	r6, r4, r8
 80002ee:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002f2:	fb08 4416 	mls	r4, r8, r6, r4
 80002f6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80002fa:	fb07 f006 	mul.w	r0, r7, r6
 80002fe:	4298      	cmp	r0, r3
 8000300:	d908      	bls.n	8000314 <__udivmoddi4+0x11c>
 8000302:	eb1c 0303 	adds.w	r3, ip, r3
 8000306:	f106 34ff 	add.w	r4, r6, #4294967295
 800030a:	d202      	bcs.n	8000312 <__udivmoddi4+0x11a>
 800030c:	4298      	cmp	r0, r3
 800030e:	f200 80cd 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 8000312:	4626      	mov	r6, r4
 8000314:	1a1c      	subs	r4, r3, r0
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb4 f0f8 	udiv	r0, r4, r8
 800031e:	fb08 4410 	mls	r4, r8, r0, r4
 8000322:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000326:	fb00 f707 	mul.w	r7, r0, r7
 800032a:	429f      	cmp	r7, r3
 800032c:	d908      	bls.n	8000340 <__udivmoddi4+0x148>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 34ff 	add.w	r4, r0, #4294967295
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x146>
 8000338:	429f      	cmp	r7, r3
 800033a:	f200 80b0 	bhi.w	800049e <__udivmoddi4+0x2a6>
 800033e:	4620      	mov	r0, r4
 8000340:	1bdb      	subs	r3, r3, r7
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	e7a5      	b.n	8000294 <__udivmoddi4+0x9c>
 8000348:	f1c1 0620 	rsb	r6, r1, #32
 800034c:	408b      	lsls	r3, r1
 800034e:	fa22 f706 	lsr.w	r7, r2, r6
 8000352:	431f      	orrs	r7, r3
 8000354:	fa20 fc06 	lsr.w	ip, r0, r6
 8000358:	fa04 f301 	lsl.w	r3, r4, r1
 800035c:	ea43 030c 	orr.w	r3, r3, ip
 8000360:	40f4      	lsrs	r4, r6
 8000362:	fa00 f801 	lsl.w	r8, r0, r1
 8000366:	0c38      	lsrs	r0, r7, #16
 8000368:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800036c:	fbb4 fef0 	udiv	lr, r4, r0
 8000370:	fa1f fc87 	uxth.w	ip, r7
 8000374:	fb00 441e 	mls	r4, r0, lr, r4
 8000378:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800037c:	fb0e f90c 	mul.w	r9, lr, ip
 8000380:	45a1      	cmp	r9, r4
 8000382:	fa02 f201 	lsl.w	r2, r2, r1
 8000386:	d90a      	bls.n	800039e <__udivmoddi4+0x1a6>
 8000388:	193c      	adds	r4, r7, r4
 800038a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800038e:	f080 8084 	bcs.w	800049a <__udivmoddi4+0x2a2>
 8000392:	45a1      	cmp	r9, r4
 8000394:	f240 8081 	bls.w	800049a <__udivmoddi4+0x2a2>
 8000398:	f1ae 0e02 	sub.w	lr, lr, #2
 800039c:	443c      	add	r4, r7
 800039e:	eba4 0409 	sub.w	r4, r4, r9
 80003a2:	fa1f f983 	uxth.w	r9, r3
 80003a6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003aa:	fb00 4413 	mls	r4, r0, r3, r4
 80003ae:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b6:	45a4      	cmp	ip, r4
 80003b8:	d907      	bls.n	80003ca <__udivmoddi4+0x1d2>
 80003ba:	193c      	adds	r4, r7, r4
 80003bc:	f103 30ff 	add.w	r0, r3, #4294967295
 80003c0:	d267      	bcs.n	8000492 <__udivmoddi4+0x29a>
 80003c2:	45a4      	cmp	ip, r4
 80003c4:	d965      	bls.n	8000492 <__udivmoddi4+0x29a>
 80003c6:	3b02      	subs	r3, #2
 80003c8:	443c      	add	r4, r7
 80003ca:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003ce:	fba0 9302 	umull	r9, r3, r0, r2
 80003d2:	eba4 040c 	sub.w	r4, r4, ip
 80003d6:	429c      	cmp	r4, r3
 80003d8:	46ce      	mov	lr, r9
 80003da:	469c      	mov	ip, r3
 80003dc:	d351      	bcc.n	8000482 <__udivmoddi4+0x28a>
 80003de:	d04e      	beq.n	800047e <__udivmoddi4+0x286>
 80003e0:	b155      	cbz	r5, 80003f8 <__udivmoddi4+0x200>
 80003e2:	ebb8 030e 	subs.w	r3, r8, lr
 80003e6:	eb64 040c 	sbc.w	r4, r4, ip
 80003ea:	fa04 f606 	lsl.w	r6, r4, r6
 80003ee:	40cb      	lsrs	r3, r1
 80003f0:	431e      	orrs	r6, r3
 80003f2:	40cc      	lsrs	r4, r1
 80003f4:	e9c5 6400 	strd	r6, r4, [r5]
 80003f8:	2100      	movs	r1, #0
 80003fa:	e750      	b.n	800029e <__udivmoddi4+0xa6>
 80003fc:	f1c2 0320 	rsb	r3, r2, #32
 8000400:	fa20 f103 	lsr.w	r1, r0, r3
 8000404:	fa0c fc02 	lsl.w	ip, ip, r2
 8000408:	fa24 f303 	lsr.w	r3, r4, r3
 800040c:	4094      	lsls	r4, r2
 800040e:	430c      	orrs	r4, r1
 8000410:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000414:	fa00 fe02 	lsl.w	lr, r0, r2
 8000418:	fa1f f78c 	uxth.w	r7, ip
 800041c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000420:	fb08 3110 	mls	r1, r8, r0, r3
 8000424:	0c23      	lsrs	r3, r4, #16
 8000426:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042a:	fb00 f107 	mul.w	r1, r0, r7
 800042e:	4299      	cmp	r1, r3
 8000430:	d908      	bls.n	8000444 <__udivmoddi4+0x24c>
 8000432:	eb1c 0303 	adds.w	r3, ip, r3
 8000436:	f100 36ff 	add.w	r6, r0, #4294967295
 800043a:	d22c      	bcs.n	8000496 <__udivmoddi4+0x29e>
 800043c:	4299      	cmp	r1, r3
 800043e:	d92a      	bls.n	8000496 <__udivmoddi4+0x29e>
 8000440:	3802      	subs	r0, #2
 8000442:	4463      	add	r3, ip
 8000444:	1a5b      	subs	r3, r3, r1
 8000446:	b2a4      	uxth	r4, r4
 8000448:	fbb3 f1f8 	udiv	r1, r3, r8
 800044c:	fb08 3311 	mls	r3, r8, r1, r3
 8000450:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000454:	fb01 f307 	mul.w	r3, r1, r7
 8000458:	42a3      	cmp	r3, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x276>
 800045c:	eb1c 0404 	adds.w	r4, ip, r4
 8000460:	f101 36ff 	add.w	r6, r1, #4294967295
 8000464:	d213      	bcs.n	800048e <__udivmoddi4+0x296>
 8000466:	42a3      	cmp	r3, r4
 8000468:	d911      	bls.n	800048e <__udivmoddi4+0x296>
 800046a:	3902      	subs	r1, #2
 800046c:	4464      	add	r4, ip
 800046e:	1ae4      	subs	r4, r4, r3
 8000470:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000474:	e739      	b.n	80002ea <__udivmoddi4+0xf2>
 8000476:	4604      	mov	r4, r0
 8000478:	e6f0      	b.n	800025c <__udivmoddi4+0x64>
 800047a:	4608      	mov	r0, r1
 800047c:	e706      	b.n	800028c <__udivmoddi4+0x94>
 800047e:	45c8      	cmp	r8, r9
 8000480:	d2ae      	bcs.n	80003e0 <__udivmoddi4+0x1e8>
 8000482:	ebb9 0e02 	subs.w	lr, r9, r2
 8000486:	eb63 0c07 	sbc.w	ip, r3, r7
 800048a:	3801      	subs	r0, #1
 800048c:	e7a8      	b.n	80003e0 <__udivmoddi4+0x1e8>
 800048e:	4631      	mov	r1, r6
 8000490:	e7ed      	b.n	800046e <__udivmoddi4+0x276>
 8000492:	4603      	mov	r3, r0
 8000494:	e799      	b.n	80003ca <__udivmoddi4+0x1d2>
 8000496:	4630      	mov	r0, r6
 8000498:	e7d4      	b.n	8000444 <__udivmoddi4+0x24c>
 800049a:	46d6      	mov	lr, sl
 800049c:	e77f      	b.n	800039e <__udivmoddi4+0x1a6>
 800049e:	4463      	add	r3, ip
 80004a0:	3802      	subs	r0, #2
 80004a2:	e74d      	b.n	8000340 <__udivmoddi4+0x148>
 80004a4:	4606      	mov	r6, r0
 80004a6:	4623      	mov	r3, r4
 80004a8:	4608      	mov	r0, r1
 80004aa:	e70f      	b.n	80002cc <__udivmoddi4+0xd4>
 80004ac:	3e02      	subs	r6, #2
 80004ae:	4463      	add	r3, ip
 80004b0:	e730      	b.n	8000314 <__udivmoddi4+0x11c>
 80004b2:	bf00      	nop

080004b4 <__aeabi_idiv0>:
 80004b4:	4770      	bx	lr
 80004b6:	bf00      	nop

080004b8 <button_init>:
#include "button.h"

uint16_t button_count[16];
uint16_t spi_button = 0x0000;

void button_init(){
 80004b8:	b580      	push	{r7, lr}
 80004ba:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 1);
 80004bc:	2201      	movs	r2, #1
 80004be:	2108      	movs	r1, #8
 80004c0:	4802      	ldr	r0, [pc, #8]	@ (80004cc <button_init+0x14>)
 80004c2:	f003 fb49 	bl	8003b58 <HAL_GPIO_WritePin>
}
 80004c6:	bf00      	nop
 80004c8:	bd80      	pop	{r7, pc}
 80004ca:	bf00      	nop
 80004cc:	40020c00 	.word	0x40020c00

080004d0 <button_Scan>:

void button_Scan(){
 80004d0:	b580      	push	{r7, lr}
 80004d2:	b084      	sub	sp, #16
 80004d4:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 0);
 80004d6:	2200      	movs	r2, #0
 80004d8:	2108      	movs	r1, #8
 80004da:	482f      	ldr	r0, [pc, #188]	@ (8000598 <button_Scan+0xc8>)
 80004dc:	f003 fb3c 	bl	8003b58 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 1);
 80004e0:	2201      	movs	r2, #1
 80004e2:	2108      	movs	r1, #8
 80004e4:	482c      	ldr	r0, [pc, #176]	@ (8000598 <button_Scan+0xc8>)
 80004e6:	f003 fb37 	bl	8003b58 <HAL_GPIO_WritePin>
	  HAL_SPI_Receive(&hspi1, (void*)&spi_button, 2, 10);
 80004ea:	230a      	movs	r3, #10
 80004ec:	2202      	movs	r2, #2
 80004ee:	492b      	ldr	r1, [pc, #172]	@ (800059c <button_Scan+0xcc>)
 80004f0:	482b      	ldr	r0, [pc, #172]	@ (80005a0 <button_Scan+0xd0>)
 80004f2:	f005 fa82 	bl	80059fa <HAL_SPI_Receive>
	  int button_index = 0;
 80004f6:	2300      	movs	r3, #0
 80004f8:	60fb      	str	r3, [r7, #12]
	  uint16_t mask = 0x8000;
 80004fa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80004fe:	817b      	strh	r3, [r7, #10]
	  for(int i = 0; i < 16; i++){
 8000500:	2300      	movs	r3, #0
 8000502:	607b      	str	r3, [r7, #4]
 8000504:	e03f      	b.n	8000586 <button_Scan+0xb6>
		  if(i >= 0 && i <= 3){
 8000506:	687b      	ldr	r3, [r7, #4]
 8000508:	2b00      	cmp	r3, #0
 800050a:	db06      	blt.n	800051a <button_Scan+0x4a>
 800050c:	687b      	ldr	r3, [r7, #4]
 800050e:	2b03      	cmp	r3, #3
 8000510:	dc03      	bgt.n	800051a <button_Scan+0x4a>
			  button_index = i + 4; // do theo schematic thì spi gửi ko giống như button trên mạch
 8000512:	687b      	ldr	r3, [r7, #4]
 8000514:	3304      	adds	r3, #4
 8000516:	60fb      	str	r3, [r7, #12]
 8000518:	e018      	b.n	800054c <button_Scan+0x7c>
		  } else if (i >= 4 && i <= 7){  //-> cần convert lại cho nó đúng với thứ tự mình mún
 800051a:	687b      	ldr	r3, [r7, #4]
 800051c:	2b03      	cmp	r3, #3
 800051e:	dd07      	ble.n	8000530 <button_Scan+0x60>
 8000520:	687b      	ldr	r3, [r7, #4]
 8000522:	2b07      	cmp	r3, #7
 8000524:	dc04      	bgt.n	8000530 <button_Scan+0x60>
			  button_index = 7 - i;
 8000526:	687b      	ldr	r3, [r7, #4]
 8000528:	f1c3 0307 	rsb	r3, r3, #7
 800052c:	60fb      	str	r3, [r7, #12]
 800052e:	e00d      	b.n	800054c <button_Scan+0x7c>
		  } else if (i >= 8 && i <= 11){
 8000530:	687b      	ldr	r3, [r7, #4]
 8000532:	2b07      	cmp	r3, #7
 8000534:	dd06      	ble.n	8000544 <button_Scan+0x74>
 8000536:	687b      	ldr	r3, [r7, #4]
 8000538:	2b0b      	cmp	r3, #11
 800053a:	dc03      	bgt.n	8000544 <button_Scan+0x74>
			  button_index = i + 4;
 800053c:	687b      	ldr	r3, [r7, #4]
 800053e:	3304      	adds	r3, #4
 8000540:	60fb      	str	r3, [r7, #12]
 8000542:	e003      	b.n	800054c <button_Scan+0x7c>
		  } else {
			  button_index = 23 - i;
 8000544:	687b      	ldr	r3, [r7, #4]
 8000546:	f1c3 0317 	rsb	r3, r3, #23
 800054a:	60fb      	str	r3, [r7, #12]
		  }
		  if(spi_button & mask) button_count[button_index] = 0;
 800054c:	4b13      	ldr	r3, [pc, #76]	@ (800059c <button_Scan+0xcc>)
 800054e:	881a      	ldrh	r2, [r3, #0]
 8000550:	897b      	ldrh	r3, [r7, #10]
 8000552:	4013      	ands	r3, r2
 8000554:	b29b      	uxth	r3, r3
 8000556:	2b00      	cmp	r3, #0
 8000558:	d005      	beq.n	8000566 <button_Scan+0x96>
 800055a:	4a12      	ldr	r2, [pc, #72]	@ (80005a4 <button_Scan+0xd4>)
 800055c:	68fb      	ldr	r3, [r7, #12]
 800055e:	2100      	movs	r1, #0
 8000560:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8000564:	e009      	b.n	800057a <button_Scan+0xaa>
		  else button_count[button_index]++;
 8000566:	4a0f      	ldr	r2, [pc, #60]	@ (80005a4 <button_Scan+0xd4>)
 8000568:	68fb      	ldr	r3, [r7, #12]
 800056a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800056e:	3301      	adds	r3, #1
 8000570:	b299      	uxth	r1, r3
 8000572:	4a0c      	ldr	r2, [pc, #48]	@ (80005a4 <button_Scan+0xd4>)
 8000574:	68fb      	ldr	r3, [r7, #12]
 8000576:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
//		  if(spi_button & mask) button_count[i] = 0;
//		  else button_count[i]++;
		  mask = mask >> 1;
 800057a:	897b      	ldrh	r3, [r7, #10]
 800057c:	085b      	lsrs	r3, r3, #1
 800057e:	817b      	strh	r3, [r7, #10]
	  for(int i = 0; i < 16; i++){
 8000580:	687b      	ldr	r3, [r7, #4]
 8000582:	3301      	adds	r3, #1
 8000584:	607b      	str	r3, [r7, #4]
 8000586:	687b      	ldr	r3, [r7, #4]
 8000588:	2b0f      	cmp	r3, #15
 800058a:	ddbc      	ble.n	8000506 <button_Scan+0x36>
	  }
}
 800058c:	bf00      	nop
 800058e:	bf00      	nop
 8000590:	3710      	adds	r7, #16
 8000592:	46bd      	mov	sp, r7
 8000594:	bd80      	pop	{r7, pc}
 8000596:	bf00      	nop
 8000598:	40020c00 	.word	0x40020c00
 800059c:	20000050 	.word	0x20000050
 80005a0:	2000016c 	.word	0x2000016c
 80005a4:	20000030 	.word	0x20000030

080005a8 <updateTime>:
int remindDay = 0;
int remindHour = 0;
int remindMinute = 0;
int remindSecond = 0;

void updateTime(uint8_t date, uint8_t month, uint8_t year, uint8_t day, uint8_t hour, uint8_t minute, uint8_t second){
 80005a8:	b590      	push	{r4, r7, lr}
 80005aa:	b083      	sub	sp, #12
 80005ac:	af00      	add	r7, sp, #0
 80005ae:	4604      	mov	r4, r0
 80005b0:	4608      	mov	r0, r1
 80005b2:	4611      	mov	r1, r2
 80005b4:	461a      	mov	r2, r3
 80005b6:	4623      	mov	r3, r4
 80005b8:	71fb      	strb	r3, [r7, #7]
 80005ba:	4603      	mov	r3, r0
 80005bc:	71bb      	strb	r3, [r7, #6]
 80005be:	460b      	mov	r3, r1
 80005c0:	717b      	strb	r3, [r7, #5]
 80005c2:	4613      	mov	r3, r2
 80005c4:	713b      	strb	r3, [r7, #4]
	ds3231_Write(ADDRESS_YEAR, year);
 80005c6:	797b      	ldrb	r3, [r7, #5]
 80005c8:	4619      	mov	r1, r3
 80005ca:	2006      	movs	r0, #6
 80005cc:	f001 fcce 	bl	8001f6c <ds3231_Write>
	ds3231_Write(ADDRESS_MONTH, month);
 80005d0:	79bb      	ldrb	r3, [r7, #6]
 80005d2:	4619      	mov	r1, r3
 80005d4:	2005      	movs	r0, #5
 80005d6:	f001 fcc9 	bl	8001f6c <ds3231_Write>
	ds3231_Write(ADDRESS_DATE, date);
 80005da:	79fb      	ldrb	r3, [r7, #7]
 80005dc:	4619      	mov	r1, r3
 80005de:	2004      	movs	r0, #4
 80005e0:	f001 fcc4 	bl	8001f6c <ds3231_Write>
	ds3231_Write(ADDRESS_DAY, day);
 80005e4:	793b      	ldrb	r3, [r7, #4]
 80005e6:	4619      	mov	r1, r3
 80005e8:	2003      	movs	r0, #3
 80005ea:	f001 fcbf 	bl	8001f6c <ds3231_Write>
	ds3231_Write(ADDRESS_HOUR, hour);
 80005ee:	7e3b      	ldrb	r3, [r7, #24]
 80005f0:	4619      	mov	r1, r3
 80005f2:	2002      	movs	r0, #2
 80005f4:	f001 fcba 	bl	8001f6c <ds3231_Write>
	ds3231_Write(ADDRESS_MIN, minute);
 80005f8:	7f3b      	ldrb	r3, [r7, #28]
 80005fa:	4619      	mov	r1, r3
 80005fc:	2001      	movs	r0, #1
 80005fe:	f001 fcb5 	bl	8001f6c <ds3231_Write>
	ds3231_Write(ADDRESS_SEC, second);
 8000602:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000606:	4619      	mov	r1, r3
 8000608:	2000      	movs	r0, #0
 800060a:	f001 fcaf 	bl	8001f6c <ds3231_Write>
}
 800060e:	bf00      	nop
 8000610:	370c      	adds	r7, #12
 8000612:	46bd      	mov	sp, r7
 8000614:	bd90      	pop	{r4, r7, pc}
	...

08000618 <updateDisplayTime>:

void updateDisplayTime(int date, int month, int year, int day, int hour, int minute, int second){
 8000618:	b480      	push	{r7}
 800061a:	b085      	sub	sp, #20
 800061c:	af00      	add	r7, sp, #0
 800061e:	60f8      	str	r0, [r7, #12]
 8000620:	60b9      	str	r1, [r7, #8]
 8000622:	607a      	str	r2, [r7, #4]
 8000624:	603b      	str	r3, [r7, #0]
	displayDate = date;
 8000626:	4a0d      	ldr	r2, [pc, #52]	@ (800065c <updateDisplayTime+0x44>)
 8000628:	68fb      	ldr	r3, [r7, #12]
 800062a:	6013      	str	r3, [r2, #0]
	displayMonth = month;
 800062c:	4a0c      	ldr	r2, [pc, #48]	@ (8000660 <updateDisplayTime+0x48>)
 800062e:	68bb      	ldr	r3, [r7, #8]
 8000630:	6013      	str	r3, [r2, #0]
	displayYear = year;
 8000632:	4a0c      	ldr	r2, [pc, #48]	@ (8000664 <updateDisplayTime+0x4c>)
 8000634:	687b      	ldr	r3, [r7, #4]
 8000636:	6013      	str	r3, [r2, #0]
	displayDay = day;
 8000638:	4a0b      	ldr	r2, [pc, #44]	@ (8000668 <updateDisplayTime+0x50>)
 800063a:	683b      	ldr	r3, [r7, #0]
 800063c:	6013      	str	r3, [r2, #0]
	displayHour = hour;
 800063e:	4a0b      	ldr	r2, [pc, #44]	@ (800066c <updateDisplayTime+0x54>)
 8000640:	69bb      	ldr	r3, [r7, #24]
 8000642:	6013      	str	r3, [r2, #0]
	displayMinute = minute;
 8000644:	4a0a      	ldr	r2, [pc, #40]	@ (8000670 <updateDisplayTime+0x58>)
 8000646:	69fb      	ldr	r3, [r7, #28]
 8000648:	6013      	str	r3, [r2, #0]
	displaySecond = second;
 800064a:	4a0a      	ldr	r2, [pc, #40]	@ (8000674 <updateDisplayTime+0x5c>)
 800064c:	6a3b      	ldr	r3, [r7, #32]
 800064e:	6013      	str	r3, [r2, #0]
}
 8000650:	bf00      	nop
 8000652:	3714      	adds	r7, #20
 8000654:	46bd      	mov	sp, r7
 8000656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800065a:	4770      	bx	lr
 800065c:	20000058 	.word	0x20000058
 8000660:	2000005c 	.word	0x2000005c
 8000664:	20000060 	.word	0x20000060
 8000668:	20000064 	.word	0x20000064
 800066c:	20000068 	.word	0x20000068
 8000670:	2000006c 	.word	0x2000006c
 8000674:	20000070 	.word	0x20000070

08000678 <updateRemindTime>:

void updateRemindTime(int date, int month, int year, int day, int hour, int minute, int second){
 8000678:	b480      	push	{r7}
 800067a:	b085      	sub	sp, #20
 800067c:	af00      	add	r7, sp, #0
 800067e:	60f8      	str	r0, [r7, #12]
 8000680:	60b9      	str	r1, [r7, #8]
 8000682:	607a      	str	r2, [r7, #4]
 8000684:	603b      	str	r3, [r7, #0]
	remindDate = date;
 8000686:	4a0d      	ldr	r2, [pc, #52]	@ (80006bc <updateRemindTime+0x44>)
 8000688:	68fb      	ldr	r3, [r7, #12]
 800068a:	6013      	str	r3, [r2, #0]
	remindMonth = month;
 800068c:	4a0c      	ldr	r2, [pc, #48]	@ (80006c0 <updateRemindTime+0x48>)
 800068e:	68bb      	ldr	r3, [r7, #8]
 8000690:	6013      	str	r3, [r2, #0]
	remindYear = year;
 8000692:	4a0c      	ldr	r2, [pc, #48]	@ (80006c4 <updateRemindTime+0x4c>)
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	6013      	str	r3, [r2, #0]
	remindDay = day;
 8000698:	4a0b      	ldr	r2, [pc, #44]	@ (80006c8 <updateRemindTime+0x50>)
 800069a:	683b      	ldr	r3, [r7, #0]
 800069c:	6013      	str	r3, [r2, #0]
	remindHour = hour;
 800069e:	4a0b      	ldr	r2, [pc, #44]	@ (80006cc <updateRemindTime+0x54>)
 80006a0:	69bb      	ldr	r3, [r7, #24]
 80006a2:	6013      	str	r3, [r2, #0]
	remindMinute = minute;
 80006a4:	4a0a      	ldr	r2, [pc, #40]	@ (80006d0 <updateRemindTime+0x58>)
 80006a6:	69fb      	ldr	r3, [r7, #28]
 80006a8:	6013      	str	r3, [r2, #0]
	remindSecond = second;
 80006aa:	4a0a      	ldr	r2, [pc, #40]	@ (80006d4 <updateRemindTime+0x5c>)
 80006ac:	6a3b      	ldr	r3, [r7, #32]
 80006ae:	6013      	str	r3, [r2, #0]
}
 80006b0:	bf00      	nop
 80006b2:	3714      	adds	r7, #20
 80006b4:	46bd      	mov	sp, r7
 80006b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ba:	4770      	bx	lr
 80006bc:	20000074 	.word	0x20000074
 80006c0:	20000078 	.word	0x20000078
 80006c4:	2000007c 	.word	0x2000007c
 80006c8:	20000080 	.word	0x20000080
 80006cc:	20000084 	.word	0x20000084
 80006d0:	20000088 	.word	0x20000088
 80006d4:	2000008c 	.word	0x2000008c

080006d8 <checkTimeRemind>:

void checkTimeRemind(){
 80006d8:	b480      	push	{r7}
 80006da:	af00      	add	r7, sp, #0
	if(isRemind == NOREMIND){
 80006dc:	4b28      	ldr	r3, [pc, #160]	@ (8000780 <checkTimeRemind+0xa8>)
 80006de:	681b      	ldr	r3, [r3, #0]
 80006e0:	2b00      	cmp	r3, #0
 80006e2:	d134      	bne.n	800074e <checkTimeRemind+0x76>
		if (remindDate == ds3231_date && remindMonth == ds3231_month && remindYear == ds3231_year && remindDay == ds3231_day &&
 80006e4:	4b27      	ldr	r3, [pc, #156]	@ (8000784 <checkTimeRemind+0xac>)
 80006e6:	781b      	ldrb	r3, [r3, #0]
 80006e8:	461a      	mov	r2, r3
 80006ea:	4b27      	ldr	r3, [pc, #156]	@ (8000788 <checkTimeRemind+0xb0>)
 80006ec:	681b      	ldr	r3, [r3, #0]
 80006ee:	429a      	cmp	r2, r3
 80006f0:	d140      	bne.n	8000774 <checkTimeRemind+0x9c>
 80006f2:	4b26      	ldr	r3, [pc, #152]	@ (800078c <checkTimeRemind+0xb4>)
 80006f4:	781b      	ldrb	r3, [r3, #0]
 80006f6:	461a      	mov	r2, r3
 80006f8:	4b25      	ldr	r3, [pc, #148]	@ (8000790 <checkTimeRemind+0xb8>)
 80006fa:	681b      	ldr	r3, [r3, #0]
 80006fc:	429a      	cmp	r2, r3
 80006fe:	d139      	bne.n	8000774 <checkTimeRemind+0x9c>
 8000700:	4b24      	ldr	r3, [pc, #144]	@ (8000794 <checkTimeRemind+0xbc>)
 8000702:	781b      	ldrb	r3, [r3, #0]
 8000704:	461a      	mov	r2, r3
 8000706:	4b24      	ldr	r3, [pc, #144]	@ (8000798 <checkTimeRemind+0xc0>)
 8000708:	681b      	ldr	r3, [r3, #0]
 800070a:	429a      	cmp	r2, r3
 800070c:	d132      	bne.n	8000774 <checkTimeRemind+0x9c>
 800070e:	4b23      	ldr	r3, [pc, #140]	@ (800079c <checkTimeRemind+0xc4>)
 8000710:	781b      	ldrb	r3, [r3, #0]
 8000712:	461a      	mov	r2, r3
 8000714:	4b22      	ldr	r3, [pc, #136]	@ (80007a0 <checkTimeRemind+0xc8>)
 8000716:	681b      	ldr	r3, [r3, #0]
 8000718:	429a      	cmp	r2, r3
 800071a:	d12b      	bne.n	8000774 <checkTimeRemind+0x9c>
				remindHour == ds3231_hours && remindMinute == ds3231_min && remindSecond == ds3231_sec){
 800071c:	4b21      	ldr	r3, [pc, #132]	@ (80007a4 <checkTimeRemind+0xcc>)
 800071e:	781b      	ldrb	r3, [r3, #0]
 8000720:	461a      	mov	r2, r3
 8000722:	4b21      	ldr	r3, [pc, #132]	@ (80007a8 <checkTimeRemind+0xd0>)
 8000724:	681b      	ldr	r3, [r3, #0]
		if (remindDate == ds3231_date && remindMonth == ds3231_month && remindYear == ds3231_year && remindDay == ds3231_day &&
 8000726:	429a      	cmp	r2, r3
 8000728:	d124      	bne.n	8000774 <checkTimeRemind+0x9c>
				remindHour == ds3231_hours && remindMinute == ds3231_min && remindSecond == ds3231_sec){
 800072a:	4b20      	ldr	r3, [pc, #128]	@ (80007ac <checkTimeRemind+0xd4>)
 800072c:	781b      	ldrb	r3, [r3, #0]
 800072e:	461a      	mov	r2, r3
 8000730:	4b1f      	ldr	r3, [pc, #124]	@ (80007b0 <checkTimeRemind+0xd8>)
 8000732:	681b      	ldr	r3, [r3, #0]
 8000734:	429a      	cmp	r2, r3
 8000736:	d11d      	bne.n	8000774 <checkTimeRemind+0x9c>
 8000738:	4b1e      	ldr	r3, [pc, #120]	@ (80007b4 <checkTimeRemind+0xdc>)
 800073a:	781b      	ldrb	r3, [r3, #0]
 800073c:	461a      	mov	r2, r3
 800073e:	4b1e      	ldr	r3, [pc, #120]	@ (80007b8 <checkTimeRemind+0xe0>)
 8000740:	681b      	ldr	r3, [r3, #0]
 8000742:	429a      	cmp	r2, r3
 8000744:	d116      	bne.n	8000774 <checkTimeRemind+0x9c>
			isRemind = REMIND;
 8000746:	4b0e      	ldr	r3, [pc, #56]	@ (8000780 <checkTimeRemind+0xa8>)
 8000748:	2201      	movs	r2, #1
 800074a:	601a      	str	r2, [r3, #0]
		if ( ds3231_sec == (remindSecond-1) || (remindSecond == 0 && ds3231_sec == 59) ){
			isRemind = NOREMIND;
		}
	}

}
 800074c:	e012      	b.n	8000774 <checkTimeRemind+0x9c>
		if ( ds3231_sec == (remindSecond-1) || (remindSecond == 0 && ds3231_sec == 59) ){
 800074e:	4b19      	ldr	r3, [pc, #100]	@ (80007b4 <checkTimeRemind+0xdc>)
 8000750:	781b      	ldrb	r3, [r3, #0]
 8000752:	461a      	mov	r2, r3
 8000754:	4b18      	ldr	r3, [pc, #96]	@ (80007b8 <checkTimeRemind+0xe0>)
 8000756:	681b      	ldr	r3, [r3, #0]
 8000758:	3b01      	subs	r3, #1
 800075a:	429a      	cmp	r2, r3
 800075c:	d007      	beq.n	800076e <checkTimeRemind+0x96>
 800075e:	4b16      	ldr	r3, [pc, #88]	@ (80007b8 <checkTimeRemind+0xe0>)
 8000760:	681b      	ldr	r3, [r3, #0]
 8000762:	2b00      	cmp	r3, #0
 8000764:	d106      	bne.n	8000774 <checkTimeRemind+0x9c>
 8000766:	4b13      	ldr	r3, [pc, #76]	@ (80007b4 <checkTimeRemind+0xdc>)
 8000768:	781b      	ldrb	r3, [r3, #0]
 800076a:	2b3b      	cmp	r3, #59	@ 0x3b
 800076c:	d102      	bne.n	8000774 <checkTimeRemind+0x9c>
			isRemind = NOREMIND;
 800076e:	4b04      	ldr	r3, [pc, #16]	@ (8000780 <checkTimeRemind+0xa8>)
 8000770:	2200      	movs	r2, #0
 8000772:	601a      	str	r2, [r3, #0]
}
 8000774:	bf00      	nop
 8000776:	46bd      	mov	sp, r7
 8000778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800077c:	4770      	bx	lr
 800077e:	bf00      	nop
 8000780:	20000054 	.word	0x20000054
 8000784:	2000009e 	.word	0x2000009e
 8000788:	20000074 	.word	0x20000074
 800078c:	200000a0 	.word	0x200000a0
 8000790:	20000078 	.word	0x20000078
 8000794:	200000a1 	.word	0x200000a1
 8000798:	2000007c 	.word	0x2000007c
 800079c:	2000009f 	.word	0x2000009f
 80007a0:	20000080 	.word	0x20000080
 80007a4:	2000009b 	.word	0x2000009b
 80007a8:	20000084 	.word	0x20000084
 80007ac:	2000009c 	.word	0x2000009c
 80007b0:	20000088 	.word	0x20000088
 80007b4:	2000009d 	.word	0x2000009d
 80007b8:	2000008c 	.word	0x2000008c

080007bc <clock_fsm>:

void clock_fsm(){
 80007bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80007be:	b087      	sub	sp, #28
 80007c0:	af04      	add	r7, sp, #16
	switch(clockState){
 80007c2:	4b9f      	ldr	r3, [pc, #636]	@ (8000a40 <clock_fsm+0x284>)
 80007c4:	781b      	ldrb	r3, [r3, #0]
 80007c6:	2b04      	cmp	r3, #4
 80007c8:	f200 85e2 	bhi.w	8001390 <clock_fsm+0xbd4>
 80007cc:	a201      	add	r2, pc, #4	@ (adr r2, 80007d4 <clock_fsm+0x18>)
 80007ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80007d2:	bf00      	nop
 80007d4:	080007e9 	.word	0x080007e9
 80007d8:	08000857 	.word	0x08000857
 80007dc:	080009bd 	.word	0x080009bd
 80007e0:	08000edd 	.word	0x08000edd
 80007e4:	08001387 	.word	0x08001387
	case INIT:
		clockState = NORMAL;
 80007e8:	4b95      	ldr	r3, [pc, #596]	@ (8000a40 <clock_fsm+0x284>)
 80007ea:	2201      	movs	r2, #1
 80007ec:	701a      	strb	r2, [r3, #0]
		updateDisplayTime(ds3231_date, ds3231_month, ds3231_year, ds3231_day, ds3231_hours, ds3231_min, ds3231_sec);
 80007ee:	4b95      	ldr	r3, [pc, #596]	@ (8000a44 <clock_fsm+0x288>)
 80007f0:	781b      	ldrb	r3, [r3, #0]
 80007f2:	4618      	mov	r0, r3
 80007f4:	4b94      	ldr	r3, [pc, #592]	@ (8000a48 <clock_fsm+0x28c>)
 80007f6:	781b      	ldrb	r3, [r3, #0]
 80007f8:	461c      	mov	r4, r3
 80007fa:	4b94      	ldr	r3, [pc, #592]	@ (8000a4c <clock_fsm+0x290>)
 80007fc:	781b      	ldrb	r3, [r3, #0]
 80007fe:	461d      	mov	r5, r3
 8000800:	4b93      	ldr	r3, [pc, #588]	@ (8000a50 <clock_fsm+0x294>)
 8000802:	781b      	ldrb	r3, [r3, #0]
 8000804:	461e      	mov	r6, r3
 8000806:	4b93      	ldr	r3, [pc, #588]	@ (8000a54 <clock_fsm+0x298>)
 8000808:	781b      	ldrb	r3, [r3, #0]
 800080a:	461a      	mov	r2, r3
 800080c:	4b92      	ldr	r3, [pc, #584]	@ (8000a58 <clock_fsm+0x29c>)
 800080e:	781b      	ldrb	r3, [r3, #0]
 8000810:	4619      	mov	r1, r3
 8000812:	4b92      	ldr	r3, [pc, #584]	@ (8000a5c <clock_fsm+0x2a0>)
 8000814:	781b      	ldrb	r3, [r3, #0]
 8000816:	9302      	str	r3, [sp, #8]
 8000818:	9101      	str	r1, [sp, #4]
 800081a:	9200      	str	r2, [sp, #0]
 800081c:	4633      	mov	r3, r6
 800081e:	462a      	mov	r2, r5
 8000820:	4621      	mov	r1, r4
 8000822:	f7ff fef9 	bl	8000618 <updateDisplayTime>
		displayNormalTime(displayDate, displayMonth, displayYear, displayDay, displayHour, displayMinute, displaySecond);
 8000826:	4b8e      	ldr	r3, [pc, #568]	@ (8000a60 <clock_fsm+0x2a4>)
 8000828:	6818      	ldr	r0, [r3, #0]
 800082a:	4b8e      	ldr	r3, [pc, #568]	@ (8000a64 <clock_fsm+0x2a8>)
 800082c:	681c      	ldr	r4, [r3, #0]
 800082e:	4b8e      	ldr	r3, [pc, #568]	@ (8000a68 <clock_fsm+0x2ac>)
 8000830:	681d      	ldr	r5, [r3, #0]
 8000832:	4b8e      	ldr	r3, [pc, #568]	@ (8000a6c <clock_fsm+0x2b0>)
 8000834:	681e      	ldr	r6, [r3, #0]
 8000836:	4b8e      	ldr	r3, [pc, #568]	@ (8000a70 <clock_fsm+0x2b4>)
 8000838:	681b      	ldr	r3, [r3, #0]
 800083a:	4a8e      	ldr	r2, [pc, #568]	@ (8000a74 <clock_fsm+0x2b8>)
 800083c:	6812      	ldr	r2, [r2, #0]
 800083e:	498e      	ldr	r1, [pc, #568]	@ (8000a78 <clock_fsm+0x2bc>)
 8000840:	6809      	ldr	r1, [r1, #0]
 8000842:	9102      	str	r1, [sp, #8]
 8000844:	9201      	str	r2, [sp, #4]
 8000846:	9300      	str	r3, [sp, #0]
 8000848:	4633      	mov	r3, r6
 800084a:	462a      	mov	r2, r5
 800084c:	4621      	mov	r1, r4
 800084e:	f000 fdb9 	bl	80013c4 <displayNormalTime>
		break;
 8000852:	f000 bd9d 	b.w	8001390 <clock_fsm+0xbd4>
	case NORMAL:
		if(button_count[0] == 1){
 8000856:	4b89      	ldr	r3, [pc, #548]	@ (8000a7c <clock_fsm+0x2c0>)
 8000858:	881b      	ldrh	r3, [r3, #0]
 800085a:	2b01      	cmp	r3, #1
 800085c:	d149      	bne.n	80008f2 <clock_fsm+0x136>
			clockState = MODIFY;
 800085e:	4b78      	ldr	r3, [pc, #480]	@ (8000a40 <clock_fsm+0x284>)
 8000860:	2202      	movs	r2, #2
 8000862:	701a      	strb	r2, [r3, #0]
			clockModifyState = DATE;
 8000864:	4b86      	ldr	r3, [pc, #536]	@ (8000a80 <clock_fsm+0x2c4>)
 8000866:	2200      	movs	r2, #0
 8000868:	701a      	strb	r2, [r3, #0]
			toggleVar = 0;
 800086a:	4b86      	ldr	r3, [pc, #536]	@ (8000a84 <clock_fsm+0x2c8>)
 800086c:	2200      	movs	r2, #0
 800086e:	601a      	str	r2, [r3, #0]
			setTimer3(0.25*1000/MAINTASKTIME); //0.25s
 8000870:	20fa      	movs	r0, #250	@ 0xfa
 8000872:	f002 fbe5 	bl	8003040 <setTimer3>
			lcd_Clear(BLACK);
 8000876:	2000      	movs	r0, #0
 8000878:	f001 feba 	bl	80025f0 <lcd_Clear>
			updateDisplayTime(ds3231_date, ds3231_month, ds3231_year, ds3231_day, ds3231_hours, ds3231_min, ds3231_sec);
 800087c:	4b71      	ldr	r3, [pc, #452]	@ (8000a44 <clock_fsm+0x288>)
 800087e:	781b      	ldrb	r3, [r3, #0]
 8000880:	4618      	mov	r0, r3
 8000882:	4b71      	ldr	r3, [pc, #452]	@ (8000a48 <clock_fsm+0x28c>)
 8000884:	781b      	ldrb	r3, [r3, #0]
 8000886:	461c      	mov	r4, r3
 8000888:	4b70      	ldr	r3, [pc, #448]	@ (8000a4c <clock_fsm+0x290>)
 800088a:	781b      	ldrb	r3, [r3, #0]
 800088c:	461d      	mov	r5, r3
 800088e:	4b70      	ldr	r3, [pc, #448]	@ (8000a50 <clock_fsm+0x294>)
 8000890:	781b      	ldrb	r3, [r3, #0]
 8000892:	461e      	mov	r6, r3
 8000894:	4b6f      	ldr	r3, [pc, #444]	@ (8000a54 <clock_fsm+0x298>)
 8000896:	781b      	ldrb	r3, [r3, #0]
 8000898:	461a      	mov	r2, r3
 800089a:	4b6f      	ldr	r3, [pc, #444]	@ (8000a58 <clock_fsm+0x29c>)
 800089c:	781b      	ldrb	r3, [r3, #0]
 800089e:	4619      	mov	r1, r3
 80008a0:	4b6e      	ldr	r3, [pc, #440]	@ (8000a5c <clock_fsm+0x2a0>)
 80008a2:	781b      	ldrb	r3, [r3, #0]
 80008a4:	9302      	str	r3, [sp, #8]
 80008a6:	9101      	str	r1, [sp, #4]
 80008a8:	9200      	str	r2, [sp, #0]
 80008aa:	4633      	mov	r3, r6
 80008ac:	462a      	mov	r2, r5
 80008ae:	4621      	mov	r1, r4
 80008b0:	f7ff feb2 	bl	8000618 <updateDisplayTime>
			displayToggleTime(displayDate, displayMonth, displayYear, displayDay, displayHour, displayMinute, displaySecond, clockModifyState);
 80008b4:	4b6a      	ldr	r3, [pc, #424]	@ (8000a60 <clock_fsm+0x2a4>)
 80008b6:	6818      	ldr	r0, [r3, #0]
 80008b8:	4b6a      	ldr	r3, [pc, #424]	@ (8000a64 <clock_fsm+0x2a8>)
 80008ba:	681c      	ldr	r4, [r3, #0]
 80008bc:	4b6a      	ldr	r3, [pc, #424]	@ (8000a68 <clock_fsm+0x2ac>)
 80008be:	681d      	ldr	r5, [r3, #0]
 80008c0:	4b6a      	ldr	r3, [pc, #424]	@ (8000a6c <clock_fsm+0x2b0>)
 80008c2:	681e      	ldr	r6, [r3, #0]
 80008c4:	4b6a      	ldr	r3, [pc, #424]	@ (8000a70 <clock_fsm+0x2b4>)
 80008c6:	681b      	ldr	r3, [r3, #0]
 80008c8:	607b      	str	r3, [r7, #4]
 80008ca:	4a6a      	ldr	r2, [pc, #424]	@ (8000a74 <clock_fsm+0x2b8>)
 80008cc:	6812      	ldr	r2, [r2, #0]
 80008ce:	496a      	ldr	r1, [pc, #424]	@ (8000a78 <clock_fsm+0x2bc>)
 80008d0:	6809      	ldr	r1, [r1, #0]
 80008d2:	4b6b      	ldr	r3, [pc, #428]	@ (8000a80 <clock_fsm+0x2c4>)
 80008d4:	f893 c000 	ldrb.w	ip, [r3]
 80008d8:	4663      	mov	r3, ip
 80008da:	9303      	str	r3, [sp, #12]
 80008dc:	9102      	str	r1, [sp, #8]
 80008de:	9201      	str	r2, [sp, #4]
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	9300      	str	r3, [sp, #0]
 80008e4:	4633      	mov	r3, r6
 80008e6:	462a      	mov	r2, r5
 80008e8:	4621      	mov	r1, r4
 80008ea:	f001 fa6d 	bl	8001dc8 <displayToggleTime>
			}
			else{
				lcd_ShowStr(70, 180, "WAKE UP", BLACK, BLACK, 32, 1);
			}
		}
		break;
 80008ee:	f000 bd4f 	b.w	8001390 <clock_fsm+0xbd4>
			clockState = NORMAL;
 80008f2:	4b53      	ldr	r3, [pc, #332]	@ (8000a40 <clock_fsm+0x284>)
 80008f4:	2201      	movs	r2, #1
 80008f6:	701a      	strb	r2, [r3, #0]
			lcd_ShowStr(70, 40, "NORMAL", GRED, BLACK, 32, 1);
 80008f8:	2301      	movs	r3, #1
 80008fa:	9302      	str	r3, [sp, #8]
 80008fc:	2320      	movs	r3, #32
 80008fe:	9301      	str	r3, [sp, #4]
 8000900:	2300      	movs	r3, #0
 8000902:	9300      	str	r3, [sp, #0]
 8000904:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8000908:	4a5f      	ldr	r2, [pc, #380]	@ (8000a88 <clock_fsm+0x2cc>)
 800090a:	2128      	movs	r1, #40	@ 0x28
 800090c:	2046      	movs	r0, #70	@ 0x46
 800090e:	f002 f9af 	bl	8002c70 <lcd_ShowStr>
			updateDisplayTime(ds3231_date, ds3231_month, ds3231_year, ds3231_day, ds3231_hours, ds3231_min, ds3231_sec);
 8000912:	4b4c      	ldr	r3, [pc, #304]	@ (8000a44 <clock_fsm+0x288>)
 8000914:	781b      	ldrb	r3, [r3, #0]
 8000916:	4618      	mov	r0, r3
 8000918:	4b4b      	ldr	r3, [pc, #300]	@ (8000a48 <clock_fsm+0x28c>)
 800091a:	781b      	ldrb	r3, [r3, #0]
 800091c:	461c      	mov	r4, r3
 800091e:	4b4b      	ldr	r3, [pc, #300]	@ (8000a4c <clock_fsm+0x290>)
 8000920:	781b      	ldrb	r3, [r3, #0]
 8000922:	461d      	mov	r5, r3
 8000924:	4b4a      	ldr	r3, [pc, #296]	@ (8000a50 <clock_fsm+0x294>)
 8000926:	781b      	ldrb	r3, [r3, #0]
 8000928:	461e      	mov	r6, r3
 800092a:	4b4a      	ldr	r3, [pc, #296]	@ (8000a54 <clock_fsm+0x298>)
 800092c:	781b      	ldrb	r3, [r3, #0]
 800092e:	461a      	mov	r2, r3
 8000930:	4b49      	ldr	r3, [pc, #292]	@ (8000a58 <clock_fsm+0x29c>)
 8000932:	781b      	ldrb	r3, [r3, #0]
 8000934:	4619      	mov	r1, r3
 8000936:	4b49      	ldr	r3, [pc, #292]	@ (8000a5c <clock_fsm+0x2a0>)
 8000938:	781b      	ldrb	r3, [r3, #0]
 800093a:	9302      	str	r3, [sp, #8]
 800093c:	9101      	str	r1, [sp, #4]
 800093e:	9200      	str	r2, [sp, #0]
 8000940:	4633      	mov	r3, r6
 8000942:	462a      	mov	r2, r5
 8000944:	4621      	mov	r1, r4
 8000946:	f7ff fe67 	bl	8000618 <updateDisplayTime>
			displayNormalTime(displayDate, displayMonth, displayYear, displayDay, displayHour, displayMinute, displaySecond);
 800094a:	4b45      	ldr	r3, [pc, #276]	@ (8000a60 <clock_fsm+0x2a4>)
 800094c:	6818      	ldr	r0, [r3, #0]
 800094e:	4b45      	ldr	r3, [pc, #276]	@ (8000a64 <clock_fsm+0x2a8>)
 8000950:	681c      	ldr	r4, [r3, #0]
 8000952:	4b45      	ldr	r3, [pc, #276]	@ (8000a68 <clock_fsm+0x2ac>)
 8000954:	681d      	ldr	r5, [r3, #0]
 8000956:	4b45      	ldr	r3, [pc, #276]	@ (8000a6c <clock_fsm+0x2b0>)
 8000958:	681e      	ldr	r6, [r3, #0]
 800095a:	4b45      	ldr	r3, [pc, #276]	@ (8000a70 <clock_fsm+0x2b4>)
 800095c:	681b      	ldr	r3, [r3, #0]
 800095e:	4a45      	ldr	r2, [pc, #276]	@ (8000a74 <clock_fsm+0x2b8>)
 8000960:	6812      	ldr	r2, [r2, #0]
 8000962:	4945      	ldr	r1, [pc, #276]	@ (8000a78 <clock_fsm+0x2bc>)
 8000964:	6809      	ldr	r1, [r1, #0]
 8000966:	9102      	str	r1, [sp, #8]
 8000968:	9201      	str	r2, [sp, #4]
 800096a:	9300      	str	r3, [sp, #0]
 800096c:	4633      	mov	r3, r6
 800096e:	462a      	mov	r2, r5
 8000970:	4621      	mov	r1, r4
 8000972:	f000 fd27 	bl	80013c4 <displayNormalTime>
			checkTimeRemind();
 8000976:	f7ff feaf 	bl	80006d8 <checkTimeRemind>
			if(isRemind == REMIND){
 800097a:	4b44      	ldr	r3, [pc, #272]	@ (8000a8c <clock_fsm+0x2d0>)
 800097c:	681b      	ldr	r3, [r3, #0]
 800097e:	2b01      	cmp	r3, #1
 8000980:	d10e      	bne.n	80009a0 <clock_fsm+0x1e4>
				lcd_ShowStr(70, 180, "WAKE UP", GRED, BLACK, 32, 1);
 8000982:	2301      	movs	r3, #1
 8000984:	9302      	str	r3, [sp, #8]
 8000986:	2320      	movs	r3, #32
 8000988:	9301      	str	r3, [sp, #4]
 800098a:	2300      	movs	r3, #0
 800098c:	9300      	str	r3, [sp, #0]
 800098e:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8000992:	4a3f      	ldr	r2, [pc, #252]	@ (8000a90 <clock_fsm+0x2d4>)
 8000994:	21b4      	movs	r1, #180	@ 0xb4
 8000996:	2046      	movs	r0, #70	@ 0x46
 8000998:	f002 f96a 	bl	8002c70 <lcd_ShowStr>
		break;
 800099c:	f000 bcf8 	b.w	8001390 <clock_fsm+0xbd4>
				lcd_ShowStr(70, 180, "WAKE UP", BLACK, BLACK, 32, 1);
 80009a0:	2301      	movs	r3, #1
 80009a2:	9302      	str	r3, [sp, #8]
 80009a4:	2320      	movs	r3, #32
 80009a6:	9301      	str	r3, [sp, #4]
 80009a8:	2300      	movs	r3, #0
 80009aa:	9300      	str	r3, [sp, #0]
 80009ac:	2300      	movs	r3, #0
 80009ae:	4a38      	ldr	r2, [pc, #224]	@ (8000a90 <clock_fsm+0x2d4>)
 80009b0:	21b4      	movs	r1, #180	@ 0xb4
 80009b2:	2046      	movs	r0, #70	@ 0x46
 80009b4:	f002 f95c 	bl	8002c70 <lcd_ShowStr>
		break;
 80009b8:	f000 bcea 	b.w	8001390 <clock_fsm+0xbd4>
	case MODIFY:
		if(button_count[0] == 1){
 80009bc:	4b2f      	ldr	r3, [pc, #188]	@ (8000a7c <clock_fsm+0x2c0>)
 80009be:	881b      	ldrh	r3, [r3, #0]
 80009c0:	2b01      	cmp	r3, #1
 80009c2:	d175      	bne.n	8000ab0 <clock_fsm+0x2f4>
			clockState = MODIFYREMIND;
 80009c4:	4b1e      	ldr	r3, [pc, #120]	@ (8000a40 <clock_fsm+0x284>)
 80009c6:	2203      	movs	r2, #3
 80009c8:	701a      	strb	r2, [r3, #0]
			clockModifyState = DATE;
 80009ca:	4b2d      	ldr	r3, [pc, #180]	@ (8000a80 <clock_fsm+0x2c4>)
 80009cc:	2200      	movs	r2, #0
 80009ce:	701a      	strb	r2, [r3, #0]
			toggleVar = 0;
 80009d0:	4b2c      	ldr	r3, [pc, #176]	@ (8000a84 <clock_fsm+0x2c8>)
 80009d2:	2200      	movs	r2, #0
 80009d4:	601a      	str	r2, [r3, #0]
			setTimer3(0.25*1000/MAINTASKTIME); //0.25s
 80009d6:	20fa      	movs	r0, #250	@ 0xfa
 80009d8:	f002 fb32 	bl	8003040 <setTimer3>
			lcd_Clear(BLACK);
 80009dc:	2000      	movs	r0, #0
 80009de:	f001 fe07 	bl	80025f0 <lcd_Clear>
			updateDisplayTime(remindDate, remindMonth, remindYear, remindDay, remindHour, remindMinute, remindSecond);
 80009e2:	4b2c      	ldr	r3, [pc, #176]	@ (8000a94 <clock_fsm+0x2d8>)
 80009e4:	6818      	ldr	r0, [r3, #0]
 80009e6:	4b2c      	ldr	r3, [pc, #176]	@ (8000a98 <clock_fsm+0x2dc>)
 80009e8:	681c      	ldr	r4, [r3, #0]
 80009ea:	4b2c      	ldr	r3, [pc, #176]	@ (8000a9c <clock_fsm+0x2e0>)
 80009ec:	681d      	ldr	r5, [r3, #0]
 80009ee:	4b2c      	ldr	r3, [pc, #176]	@ (8000aa0 <clock_fsm+0x2e4>)
 80009f0:	681e      	ldr	r6, [r3, #0]
 80009f2:	4b2c      	ldr	r3, [pc, #176]	@ (8000aa4 <clock_fsm+0x2e8>)
 80009f4:	681b      	ldr	r3, [r3, #0]
 80009f6:	4a2c      	ldr	r2, [pc, #176]	@ (8000aa8 <clock_fsm+0x2ec>)
 80009f8:	6812      	ldr	r2, [r2, #0]
 80009fa:	492c      	ldr	r1, [pc, #176]	@ (8000aac <clock_fsm+0x2f0>)
 80009fc:	6809      	ldr	r1, [r1, #0]
 80009fe:	9102      	str	r1, [sp, #8]
 8000a00:	9201      	str	r2, [sp, #4]
 8000a02:	9300      	str	r3, [sp, #0]
 8000a04:	4633      	mov	r3, r6
 8000a06:	462a      	mov	r2, r5
 8000a08:	4621      	mov	r1, r4
 8000a0a:	f7ff fe05 	bl	8000618 <updateDisplayTime>
			displayNormalTime(displayDate, displayMonth, displayYear, displayDay, displayHour, displayMinute, displaySecond);
 8000a0e:	4b14      	ldr	r3, [pc, #80]	@ (8000a60 <clock_fsm+0x2a4>)
 8000a10:	6818      	ldr	r0, [r3, #0]
 8000a12:	4b14      	ldr	r3, [pc, #80]	@ (8000a64 <clock_fsm+0x2a8>)
 8000a14:	681c      	ldr	r4, [r3, #0]
 8000a16:	4b14      	ldr	r3, [pc, #80]	@ (8000a68 <clock_fsm+0x2ac>)
 8000a18:	681d      	ldr	r5, [r3, #0]
 8000a1a:	4b14      	ldr	r3, [pc, #80]	@ (8000a6c <clock_fsm+0x2b0>)
 8000a1c:	681e      	ldr	r6, [r3, #0]
 8000a1e:	4b14      	ldr	r3, [pc, #80]	@ (8000a70 <clock_fsm+0x2b4>)
 8000a20:	681b      	ldr	r3, [r3, #0]
 8000a22:	4a14      	ldr	r2, [pc, #80]	@ (8000a74 <clock_fsm+0x2b8>)
 8000a24:	6812      	ldr	r2, [r2, #0]
 8000a26:	4914      	ldr	r1, [pc, #80]	@ (8000a78 <clock_fsm+0x2bc>)
 8000a28:	6809      	ldr	r1, [r1, #0]
 8000a2a:	9102      	str	r1, [sp, #8]
 8000a2c:	9201      	str	r2, [sp, #4]
 8000a2e:	9300      	str	r3, [sp, #0]
 8000a30:	4633      	mov	r3, r6
 8000a32:	462a      	mov	r2, r5
 8000a34:	4621      	mov	r1, r4
 8000a36:	f000 fcc5 	bl	80013c4 <displayNormalTime>
				else {
					++clockModifyState;
				}
			}
		}
		break;
 8000a3a:	f000 bca6 	b.w	800138a <clock_fsm+0xbce>
 8000a3e:	bf00      	nop
 8000a40:	20000052 	.word	0x20000052
 8000a44:	2000009e 	.word	0x2000009e
 8000a48:	200000a0 	.word	0x200000a0
 8000a4c:	200000a1 	.word	0x200000a1
 8000a50:	2000009f 	.word	0x2000009f
 8000a54:	2000009b 	.word	0x2000009b
 8000a58:	2000009c 	.word	0x2000009c
 8000a5c:	2000009d 	.word	0x2000009d
 8000a60:	20000058 	.word	0x20000058
 8000a64:	2000005c 	.word	0x2000005c
 8000a68:	20000060 	.word	0x20000060
 8000a6c:	20000064 	.word	0x20000064
 8000a70:	20000068 	.word	0x20000068
 8000a74:	2000006c 	.word	0x2000006c
 8000a78:	20000070 	.word	0x20000070
 8000a7c:	20000030 	.word	0x20000030
 8000a80:	20000053 	.word	0x20000053
 8000a84:	20000090 	.word	0x20000090
 8000a88:	08006d5c 	.word	0x08006d5c
 8000a8c:	20000054 	.word	0x20000054
 8000a90:	08006d64 	.word	0x08006d64
 8000a94:	20000074 	.word	0x20000074
 8000a98:	20000078 	.word	0x20000078
 8000a9c:	2000007c 	.word	0x2000007c
 8000aa0:	20000080 	.word	0x20000080
 8000aa4:	20000084 	.word	0x20000084
 8000aa8:	20000088 	.word	0x20000088
 8000aac:	2000008c 	.word	0x2000008c
			clockState = MODIFY;
 8000ab0:	4b77      	ldr	r3, [pc, #476]	@ (8000c90 <clock_fsm+0x4d4>)
 8000ab2:	2202      	movs	r2, #2
 8000ab4:	701a      	strb	r2, [r3, #0]
			lcd_ShowStr(70, 40, "MODIFY", GRED, BLACK, 32, 1);
 8000ab6:	2301      	movs	r3, #1
 8000ab8:	9302      	str	r3, [sp, #8]
 8000aba:	2320      	movs	r3, #32
 8000abc:	9301      	str	r3, [sp, #4]
 8000abe:	2300      	movs	r3, #0
 8000ac0:	9300      	str	r3, [sp, #0]
 8000ac2:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8000ac6:	4a73      	ldr	r2, [pc, #460]	@ (8000c94 <clock_fsm+0x4d8>)
 8000ac8:	2128      	movs	r1, #40	@ 0x28
 8000aca:	2046      	movs	r0, #70	@ 0x46
 8000acc:	f002 f8d0 	bl	8002c70 <lcd_ShowStr>
			if(clockModifyState == DATE){
 8000ad0:	4b71      	ldr	r3, [pc, #452]	@ (8000c98 <clock_fsm+0x4dc>)
 8000ad2:	781b      	ldrb	r3, [r3, #0]
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	d133      	bne.n	8000b40 <clock_fsm+0x384>
				if( (BUTTONUP == 1) || ( (BUTTONUP >= LONGPRESSTIME) && ( (BUTTONUP - LONGPRESSTIME)%(LONGUPDATETIME) == 0 ) ) ){
 8000ad8:	4b70      	ldr	r3, [pc, #448]	@ (8000c9c <clock_fsm+0x4e0>)
 8000ada:	88db      	ldrh	r3, [r3, #6]
 8000adc:	2b01      	cmp	r3, #1
 8000ade:	d00a      	beq.n	8000af6 <clock_fsm+0x33a>
 8000ae0:	4b6e      	ldr	r3, [pc, #440]	@ (8000c9c <clock_fsm+0x4e0>)
 8000ae2:	88db      	ldrh	r3, [r3, #6]
 8000ae4:	2b27      	cmp	r3, #39	@ 0x27
 8000ae6:	d90f      	bls.n	8000b08 <clock_fsm+0x34c>
 8000ae8:	4b6c      	ldr	r3, [pc, #432]	@ (8000c9c <clock_fsm+0x4e0>)
 8000aea:	88db      	ldrh	r3, [r3, #6]
 8000aec:	3b28      	subs	r3, #40	@ 0x28
 8000aee:	f003 0303 	and.w	r3, r3, #3
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	d108      	bne.n	8000b08 <clock_fsm+0x34c>
					if(displayDate < 31){
 8000af6:	4b6a      	ldr	r3, [pc, #424]	@ (8000ca0 <clock_fsm+0x4e4>)
 8000af8:	681b      	ldr	r3, [r3, #0]
 8000afa:	2b1e      	cmp	r3, #30
 8000afc:	dc04      	bgt.n	8000b08 <clock_fsm+0x34c>
						++displayDate;
 8000afe:	4b68      	ldr	r3, [pc, #416]	@ (8000ca0 <clock_fsm+0x4e4>)
 8000b00:	681b      	ldr	r3, [r3, #0]
 8000b02:	3301      	adds	r3, #1
 8000b04:	4a66      	ldr	r2, [pc, #408]	@ (8000ca0 <clock_fsm+0x4e4>)
 8000b06:	6013      	str	r3, [r2, #0]
				if( (BUTTONDOWN == 1) || ( (BUTTONDOWN >= LONGPRESSTIME) && ( (BUTTONDOWN - LONGPRESSTIME)%(LONGUPDATETIME) == 0 ) ) ){
 8000b08:	4b64      	ldr	r3, [pc, #400]	@ (8000c9c <clock_fsm+0x4e0>)
 8000b0a:	89db      	ldrh	r3, [r3, #14]
 8000b0c:	2b01      	cmp	r3, #1
 8000b0e:	d00c      	beq.n	8000b2a <clock_fsm+0x36e>
 8000b10:	4b62      	ldr	r3, [pc, #392]	@ (8000c9c <clock_fsm+0x4e0>)
 8000b12:	89db      	ldrh	r3, [r3, #14]
 8000b14:	2b27      	cmp	r3, #39	@ 0x27
 8000b16:	f240 8169 	bls.w	8000dec <clock_fsm+0x630>
 8000b1a:	4b60      	ldr	r3, [pc, #384]	@ (8000c9c <clock_fsm+0x4e0>)
 8000b1c:	89db      	ldrh	r3, [r3, #14]
 8000b1e:	3b28      	subs	r3, #40	@ 0x28
 8000b20:	f003 0303 	and.w	r3, r3, #3
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	f040 8161 	bne.w	8000dec <clock_fsm+0x630>
					if(displayDate > 1){
 8000b2a:	4b5d      	ldr	r3, [pc, #372]	@ (8000ca0 <clock_fsm+0x4e4>)
 8000b2c:	681b      	ldr	r3, [r3, #0]
 8000b2e:	2b01      	cmp	r3, #1
 8000b30:	f340 815c 	ble.w	8000dec <clock_fsm+0x630>
						--displayDate;
 8000b34:	4b5a      	ldr	r3, [pc, #360]	@ (8000ca0 <clock_fsm+0x4e4>)
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	3b01      	subs	r3, #1
 8000b3a:	4a59      	ldr	r2, [pc, #356]	@ (8000ca0 <clock_fsm+0x4e4>)
 8000b3c:	6013      	str	r3, [r2, #0]
 8000b3e:	e155      	b.n	8000dec <clock_fsm+0x630>
			else if(clockModifyState == MONTH){
 8000b40:	4b55      	ldr	r3, [pc, #340]	@ (8000c98 <clock_fsm+0x4dc>)
 8000b42:	781b      	ldrb	r3, [r3, #0]
 8000b44:	2b01      	cmp	r3, #1
 8000b46:	d133      	bne.n	8000bb0 <clock_fsm+0x3f4>
				if( (BUTTONUP == 1) || ( (BUTTONUP >= LONGPRESSTIME) && ( (BUTTONUP - LONGPRESSTIME)%(LONGUPDATETIME) == 0 ) ) ){
 8000b48:	4b54      	ldr	r3, [pc, #336]	@ (8000c9c <clock_fsm+0x4e0>)
 8000b4a:	88db      	ldrh	r3, [r3, #6]
 8000b4c:	2b01      	cmp	r3, #1
 8000b4e:	d00a      	beq.n	8000b66 <clock_fsm+0x3aa>
 8000b50:	4b52      	ldr	r3, [pc, #328]	@ (8000c9c <clock_fsm+0x4e0>)
 8000b52:	88db      	ldrh	r3, [r3, #6]
 8000b54:	2b27      	cmp	r3, #39	@ 0x27
 8000b56:	d90f      	bls.n	8000b78 <clock_fsm+0x3bc>
 8000b58:	4b50      	ldr	r3, [pc, #320]	@ (8000c9c <clock_fsm+0x4e0>)
 8000b5a:	88db      	ldrh	r3, [r3, #6]
 8000b5c:	3b28      	subs	r3, #40	@ 0x28
 8000b5e:	f003 0303 	and.w	r3, r3, #3
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	d108      	bne.n	8000b78 <clock_fsm+0x3bc>
					if(displayMonth < 12){
 8000b66:	4b4f      	ldr	r3, [pc, #316]	@ (8000ca4 <clock_fsm+0x4e8>)
 8000b68:	681b      	ldr	r3, [r3, #0]
 8000b6a:	2b0b      	cmp	r3, #11
 8000b6c:	dc04      	bgt.n	8000b78 <clock_fsm+0x3bc>
						++displayMonth;
 8000b6e:	4b4d      	ldr	r3, [pc, #308]	@ (8000ca4 <clock_fsm+0x4e8>)
 8000b70:	681b      	ldr	r3, [r3, #0]
 8000b72:	3301      	adds	r3, #1
 8000b74:	4a4b      	ldr	r2, [pc, #300]	@ (8000ca4 <clock_fsm+0x4e8>)
 8000b76:	6013      	str	r3, [r2, #0]
				if( (BUTTONDOWN == 1) || ( (BUTTONDOWN >= LONGPRESSTIME) && ( (BUTTONDOWN - LONGPRESSTIME)%(LONGUPDATETIME) == 0 ) ) ){
 8000b78:	4b48      	ldr	r3, [pc, #288]	@ (8000c9c <clock_fsm+0x4e0>)
 8000b7a:	89db      	ldrh	r3, [r3, #14]
 8000b7c:	2b01      	cmp	r3, #1
 8000b7e:	d00c      	beq.n	8000b9a <clock_fsm+0x3de>
 8000b80:	4b46      	ldr	r3, [pc, #280]	@ (8000c9c <clock_fsm+0x4e0>)
 8000b82:	89db      	ldrh	r3, [r3, #14]
 8000b84:	2b27      	cmp	r3, #39	@ 0x27
 8000b86:	f240 8131 	bls.w	8000dec <clock_fsm+0x630>
 8000b8a:	4b44      	ldr	r3, [pc, #272]	@ (8000c9c <clock_fsm+0x4e0>)
 8000b8c:	89db      	ldrh	r3, [r3, #14]
 8000b8e:	3b28      	subs	r3, #40	@ 0x28
 8000b90:	f003 0303 	and.w	r3, r3, #3
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	f040 8129 	bne.w	8000dec <clock_fsm+0x630>
					if(displayMonth > 1){
 8000b9a:	4b42      	ldr	r3, [pc, #264]	@ (8000ca4 <clock_fsm+0x4e8>)
 8000b9c:	681b      	ldr	r3, [r3, #0]
 8000b9e:	2b01      	cmp	r3, #1
 8000ba0:	f340 8124 	ble.w	8000dec <clock_fsm+0x630>
						--displayMonth;
 8000ba4:	4b3f      	ldr	r3, [pc, #252]	@ (8000ca4 <clock_fsm+0x4e8>)
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	3b01      	subs	r3, #1
 8000baa:	4a3e      	ldr	r2, [pc, #248]	@ (8000ca4 <clock_fsm+0x4e8>)
 8000bac:	6013      	str	r3, [r2, #0]
 8000bae:	e11d      	b.n	8000dec <clock_fsm+0x630>
			else if(clockModifyState == YEAR){
 8000bb0:	4b39      	ldr	r3, [pc, #228]	@ (8000c98 <clock_fsm+0x4dc>)
 8000bb2:	781b      	ldrb	r3, [r3, #0]
 8000bb4:	2b02      	cmp	r3, #2
 8000bb6:	d133      	bne.n	8000c20 <clock_fsm+0x464>
				if( (BUTTONUP == 1) || ( (BUTTONUP >= LONGPRESSTIME) && ( (BUTTONUP - LONGPRESSTIME)%(LONGUPDATETIME) == 0 ) ) ){
 8000bb8:	4b38      	ldr	r3, [pc, #224]	@ (8000c9c <clock_fsm+0x4e0>)
 8000bba:	88db      	ldrh	r3, [r3, #6]
 8000bbc:	2b01      	cmp	r3, #1
 8000bbe:	d00a      	beq.n	8000bd6 <clock_fsm+0x41a>
 8000bc0:	4b36      	ldr	r3, [pc, #216]	@ (8000c9c <clock_fsm+0x4e0>)
 8000bc2:	88db      	ldrh	r3, [r3, #6]
 8000bc4:	2b27      	cmp	r3, #39	@ 0x27
 8000bc6:	d90f      	bls.n	8000be8 <clock_fsm+0x42c>
 8000bc8:	4b34      	ldr	r3, [pc, #208]	@ (8000c9c <clock_fsm+0x4e0>)
 8000bca:	88db      	ldrh	r3, [r3, #6]
 8000bcc:	3b28      	subs	r3, #40	@ 0x28
 8000bce:	f003 0303 	and.w	r3, r3, #3
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d108      	bne.n	8000be8 <clock_fsm+0x42c>
					if(displayYear < 99){
 8000bd6:	4b34      	ldr	r3, [pc, #208]	@ (8000ca8 <clock_fsm+0x4ec>)
 8000bd8:	681b      	ldr	r3, [r3, #0]
 8000bda:	2b62      	cmp	r3, #98	@ 0x62
 8000bdc:	dc04      	bgt.n	8000be8 <clock_fsm+0x42c>
						++displayYear;
 8000bde:	4b32      	ldr	r3, [pc, #200]	@ (8000ca8 <clock_fsm+0x4ec>)
 8000be0:	681b      	ldr	r3, [r3, #0]
 8000be2:	3301      	adds	r3, #1
 8000be4:	4a30      	ldr	r2, [pc, #192]	@ (8000ca8 <clock_fsm+0x4ec>)
 8000be6:	6013      	str	r3, [r2, #0]
				if( (BUTTONDOWN == 1) || ( (BUTTONDOWN >= LONGPRESSTIME) && ( (BUTTONDOWN - LONGPRESSTIME)%(LONGUPDATETIME) == 0 ) ) ){
 8000be8:	4b2c      	ldr	r3, [pc, #176]	@ (8000c9c <clock_fsm+0x4e0>)
 8000bea:	89db      	ldrh	r3, [r3, #14]
 8000bec:	2b01      	cmp	r3, #1
 8000bee:	d00c      	beq.n	8000c0a <clock_fsm+0x44e>
 8000bf0:	4b2a      	ldr	r3, [pc, #168]	@ (8000c9c <clock_fsm+0x4e0>)
 8000bf2:	89db      	ldrh	r3, [r3, #14]
 8000bf4:	2b27      	cmp	r3, #39	@ 0x27
 8000bf6:	f240 80f9 	bls.w	8000dec <clock_fsm+0x630>
 8000bfa:	4b28      	ldr	r3, [pc, #160]	@ (8000c9c <clock_fsm+0x4e0>)
 8000bfc:	89db      	ldrh	r3, [r3, #14]
 8000bfe:	3b28      	subs	r3, #40	@ 0x28
 8000c00:	f003 0303 	and.w	r3, r3, #3
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	f040 80f1 	bne.w	8000dec <clock_fsm+0x630>
					if(displayYear > 1){
 8000c0a:	4b27      	ldr	r3, [pc, #156]	@ (8000ca8 <clock_fsm+0x4ec>)
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	2b01      	cmp	r3, #1
 8000c10:	f340 80ec 	ble.w	8000dec <clock_fsm+0x630>
						--displayYear;
 8000c14:	4b24      	ldr	r3, [pc, #144]	@ (8000ca8 <clock_fsm+0x4ec>)
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	3b01      	subs	r3, #1
 8000c1a:	4a23      	ldr	r2, [pc, #140]	@ (8000ca8 <clock_fsm+0x4ec>)
 8000c1c:	6013      	str	r3, [r2, #0]
 8000c1e:	e0e5      	b.n	8000dec <clock_fsm+0x630>
			else if(clockModifyState == DAY){
 8000c20:	4b1d      	ldr	r3, [pc, #116]	@ (8000c98 <clock_fsm+0x4dc>)
 8000c22:	781b      	ldrb	r3, [r3, #0]
 8000c24:	2b03      	cmp	r3, #3
 8000c26:	d143      	bne.n	8000cb0 <clock_fsm+0x4f4>
				if( (BUTTONUP == 1) || ( (BUTTONUP >= LONGPRESSTIME) && ( (BUTTONUP - LONGPRESSTIME)%(LONGUPDATETIME) == 0 ) ) ){
 8000c28:	4b1c      	ldr	r3, [pc, #112]	@ (8000c9c <clock_fsm+0x4e0>)
 8000c2a:	88db      	ldrh	r3, [r3, #6]
 8000c2c:	2b01      	cmp	r3, #1
 8000c2e:	d00a      	beq.n	8000c46 <clock_fsm+0x48a>
 8000c30:	4b1a      	ldr	r3, [pc, #104]	@ (8000c9c <clock_fsm+0x4e0>)
 8000c32:	88db      	ldrh	r3, [r3, #6]
 8000c34:	2b27      	cmp	r3, #39	@ 0x27
 8000c36:	d90f      	bls.n	8000c58 <clock_fsm+0x49c>
 8000c38:	4b18      	ldr	r3, [pc, #96]	@ (8000c9c <clock_fsm+0x4e0>)
 8000c3a:	88db      	ldrh	r3, [r3, #6]
 8000c3c:	3b28      	subs	r3, #40	@ 0x28
 8000c3e:	f003 0303 	and.w	r3, r3, #3
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d108      	bne.n	8000c58 <clock_fsm+0x49c>
					if(displayDay < 8){
 8000c46:	4b19      	ldr	r3, [pc, #100]	@ (8000cac <clock_fsm+0x4f0>)
 8000c48:	681b      	ldr	r3, [r3, #0]
 8000c4a:	2b07      	cmp	r3, #7
 8000c4c:	dc04      	bgt.n	8000c58 <clock_fsm+0x49c>
						++displayDay;
 8000c4e:	4b17      	ldr	r3, [pc, #92]	@ (8000cac <clock_fsm+0x4f0>)
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	3301      	adds	r3, #1
 8000c54:	4a15      	ldr	r2, [pc, #84]	@ (8000cac <clock_fsm+0x4f0>)
 8000c56:	6013      	str	r3, [r2, #0]
				if( (BUTTONDOWN == 1) || ( (BUTTONDOWN >= LONGPRESSTIME) && ( (BUTTONDOWN - LONGPRESSTIME)%(LONGUPDATETIME) == 0 ) ) ){
 8000c58:	4b10      	ldr	r3, [pc, #64]	@ (8000c9c <clock_fsm+0x4e0>)
 8000c5a:	89db      	ldrh	r3, [r3, #14]
 8000c5c:	2b01      	cmp	r3, #1
 8000c5e:	d00c      	beq.n	8000c7a <clock_fsm+0x4be>
 8000c60:	4b0e      	ldr	r3, [pc, #56]	@ (8000c9c <clock_fsm+0x4e0>)
 8000c62:	89db      	ldrh	r3, [r3, #14]
 8000c64:	2b27      	cmp	r3, #39	@ 0x27
 8000c66:	f240 80c1 	bls.w	8000dec <clock_fsm+0x630>
 8000c6a:	4b0c      	ldr	r3, [pc, #48]	@ (8000c9c <clock_fsm+0x4e0>)
 8000c6c:	89db      	ldrh	r3, [r3, #14]
 8000c6e:	3b28      	subs	r3, #40	@ 0x28
 8000c70:	f003 0303 	and.w	r3, r3, #3
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	f040 80b9 	bne.w	8000dec <clock_fsm+0x630>
					if(displayDay > 2){
 8000c7a:	4b0c      	ldr	r3, [pc, #48]	@ (8000cac <clock_fsm+0x4f0>)
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	2b02      	cmp	r3, #2
 8000c80:	f340 80b4 	ble.w	8000dec <clock_fsm+0x630>
						--displayDay;
 8000c84:	4b09      	ldr	r3, [pc, #36]	@ (8000cac <clock_fsm+0x4f0>)
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	3b01      	subs	r3, #1
 8000c8a:	4a08      	ldr	r2, [pc, #32]	@ (8000cac <clock_fsm+0x4f0>)
 8000c8c:	6013      	str	r3, [r2, #0]
 8000c8e:	e0ad      	b.n	8000dec <clock_fsm+0x630>
 8000c90:	20000052 	.word	0x20000052
 8000c94:	08006d6c 	.word	0x08006d6c
 8000c98:	20000053 	.word	0x20000053
 8000c9c:	20000030 	.word	0x20000030
 8000ca0:	20000058 	.word	0x20000058
 8000ca4:	2000005c 	.word	0x2000005c
 8000ca8:	20000060 	.word	0x20000060
 8000cac:	20000064 	.word	0x20000064
			else if(clockModifyState == HOUR){
 8000cb0:	4b7f      	ldr	r3, [pc, #508]	@ (8000eb0 <clock_fsm+0x6f4>)
 8000cb2:	781b      	ldrb	r3, [r3, #0]
 8000cb4:	2b04      	cmp	r3, #4
 8000cb6:	d130      	bne.n	8000d1a <clock_fsm+0x55e>
				if( (BUTTONUP == 1) || ( (BUTTONUP >= LONGPRESSTIME) && ( (BUTTONUP - LONGPRESSTIME)%(LONGUPDATETIME) == 0 ) ) ){
 8000cb8:	4b7e      	ldr	r3, [pc, #504]	@ (8000eb4 <clock_fsm+0x6f8>)
 8000cba:	88db      	ldrh	r3, [r3, #6]
 8000cbc:	2b01      	cmp	r3, #1
 8000cbe:	d00a      	beq.n	8000cd6 <clock_fsm+0x51a>
 8000cc0:	4b7c      	ldr	r3, [pc, #496]	@ (8000eb4 <clock_fsm+0x6f8>)
 8000cc2:	88db      	ldrh	r3, [r3, #6]
 8000cc4:	2b27      	cmp	r3, #39	@ 0x27
 8000cc6:	d90f      	bls.n	8000ce8 <clock_fsm+0x52c>
 8000cc8:	4b7a      	ldr	r3, [pc, #488]	@ (8000eb4 <clock_fsm+0x6f8>)
 8000cca:	88db      	ldrh	r3, [r3, #6]
 8000ccc:	3b28      	subs	r3, #40	@ 0x28
 8000cce:	f003 0303 	and.w	r3, r3, #3
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d108      	bne.n	8000ce8 <clock_fsm+0x52c>
					if(displayHour < 23){
 8000cd6:	4b78      	ldr	r3, [pc, #480]	@ (8000eb8 <clock_fsm+0x6fc>)
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	2b16      	cmp	r3, #22
 8000cdc:	dc04      	bgt.n	8000ce8 <clock_fsm+0x52c>
						++displayHour;
 8000cde:	4b76      	ldr	r3, [pc, #472]	@ (8000eb8 <clock_fsm+0x6fc>)
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	3301      	adds	r3, #1
 8000ce4:	4a74      	ldr	r2, [pc, #464]	@ (8000eb8 <clock_fsm+0x6fc>)
 8000ce6:	6013      	str	r3, [r2, #0]
				if( (BUTTONDOWN == 1) || ( (BUTTONDOWN >= LONGPRESSTIME) && ( (BUTTONDOWN - LONGPRESSTIME)%(LONGUPDATETIME) == 0 ) ) ){
 8000ce8:	4b72      	ldr	r3, [pc, #456]	@ (8000eb4 <clock_fsm+0x6f8>)
 8000cea:	89db      	ldrh	r3, [r3, #14]
 8000cec:	2b01      	cmp	r3, #1
 8000cee:	d00a      	beq.n	8000d06 <clock_fsm+0x54a>
 8000cf0:	4b70      	ldr	r3, [pc, #448]	@ (8000eb4 <clock_fsm+0x6f8>)
 8000cf2:	89db      	ldrh	r3, [r3, #14]
 8000cf4:	2b27      	cmp	r3, #39	@ 0x27
 8000cf6:	d979      	bls.n	8000dec <clock_fsm+0x630>
 8000cf8:	4b6e      	ldr	r3, [pc, #440]	@ (8000eb4 <clock_fsm+0x6f8>)
 8000cfa:	89db      	ldrh	r3, [r3, #14]
 8000cfc:	3b28      	subs	r3, #40	@ 0x28
 8000cfe:	f003 0303 	and.w	r3, r3, #3
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d172      	bne.n	8000dec <clock_fsm+0x630>
					if(displayHour > 0){
 8000d06:	4b6c      	ldr	r3, [pc, #432]	@ (8000eb8 <clock_fsm+0x6fc>)
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	dd6e      	ble.n	8000dec <clock_fsm+0x630>
						--displayHour;
 8000d0e:	4b6a      	ldr	r3, [pc, #424]	@ (8000eb8 <clock_fsm+0x6fc>)
 8000d10:	681b      	ldr	r3, [r3, #0]
 8000d12:	3b01      	subs	r3, #1
 8000d14:	4a68      	ldr	r2, [pc, #416]	@ (8000eb8 <clock_fsm+0x6fc>)
 8000d16:	6013      	str	r3, [r2, #0]
 8000d18:	e068      	b.n	8000dec <clock_fsm+0x630>
			else if(clockModifyState == MINUTE){
 8000d1a:	4b65      	ldr	r3, [pc, #404]	@ (8000eb0 <clock_fsm+0x6f4>)
 8000d1c:	781b      	ldrb	r3, [r3, #0]
 8000d1e:	2b05      	cmp	r3, #5
 8000d20:	d130      	bne.n	8000d84 <clock_fsm+0x5c8>
				if( (BUTTONUP == 1) || ( (BUTTONUP >= LONGPRESSTIME) && ( (BUTTONUP - LONGPRESSTIME)%(LONGUPDATETIME) == 0 ) ) ){
 8000d22:	4b64      	ldr	r3, [pc, #400]	@ (8000eb4 <clock_fsm+0x6f8>)
 8000d24:	88db      	ldrh	r3, [r3, #6]
 8000d26:	2b01      	cmp	r3, #1
 8000d28:	d00a      	beq.n	8000d40 <clock_fsm+0x584>
 8000d2a:	4b62      	ldr	r3, [pc, #392]	@ (8000eb4 <clock_fsm+0x6f8>)
 8000d2c:	88db      	ldrh	r3, [r3, #6]
 8000d2e:	2b27      	cmp	r3, #39	@ 0x27
 8000d30:	d90f      	bls.n	8000d52 <clock_fsm+0x596>
 8000d32:	4b60      	ldr	r3, [pc, #384]	@ (8000eb4 <clock_fsm+0x6f8>)
 8000d34:	88db      	ldrh	r3, [r3, #6]
 8000d36:	3b28      	subs	r3, #40	@ 0x28
 8000d38:	f003 0303 	and.w	r3, r3, #3
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d108      	bne.n	8000d52 <clock_fsm+0x596>
					if(displayMinute < 59){
 8000d40:	4b5e      	ldr	r3, [pc, #376]	@ (8000ebc <clock_fsm+0x700>)
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	2b3a      	cmp	r3, #58	@ 0x3a
 8000d46:	dc04      	bgt.n	8000d52 <clock_fsm+0x596>
						++displayMinute;
 8000d48:	4b5c      	ldr	r3, [pc, #368]	@ (8000ebc <clock_fsm+0x700>)
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	3301      	adds	r3, #1
 8000d4e:	4a5b      	ldr	r2, [pc, #364]	@ (8000ebc <clock_fsm+0x700>)
 8000d50:	6013      	str	r3, [r2, #0]
				if( (BUTTONDOWN == 1) || ( (BUTTONDOWN >= LONGPRESSTIME) && ( (BUTTONDOWN - LONGPRESSTIME)%(LONGUPDATETIME) == 0 ) ) ){
 8000d52:	4b58      	ldr	r3, [pc, #352]	@ (8000eb4 <clock_fsm+0x6f8>)
 8000d54:	89db      	ldrh	r3, [r3, #14]
 8000d56:	2b01      	cmp	r3, #1
 8000d58:	d00a      	beq.n	8000d70 <clock_fsm+0x5b4>
 8000d5a:	4b56      	ldr	r3, [pc, #344]	@ (8000eb4 <clock_fsm+0x6f8>)
 8000d5c:	89db      	ldrh	r3, [r3, #14]
 8000d5e:	2b27      	cmp	r3, #39	@ 0x27
 8000d60:	d944      	bls.n	8000dec <clock_fsm+0x630>
 8000d62:	4b54      	ldr	r3, [pc, #336]	@ (8000eb4 <clock_fsm+0x6f8>)
 8000d64:	89db      	ldrh	r3, [r3, #14]
 8000d66:	3b28      	subs	r3, #40	@ 0x28
 8000d68:	f003 0303 	and.w	r3, r3, #3
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d13d      	bne.n	8000dec <clock_fsm+0x630>
					if(displayMinute > 0){
 8000d70:	4b52      	ldr	r3, [pc, #328]	@ (8000ebc <clock_fsm+0x700>)
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	dd39      	ble.n	8000dec <clock_fsm+0x630>
						--displayMinute;
 8000d78:	4b50      	ldr	r3, [pc, #320]	@ (8000ebc <clock_fsm+0x700>)
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	3b01      	subs	r3, #1
 8000d7e:	4a4f      	ldr	r2, [pc, #316]	@ (8000ebc <clock_fsm+0x700>)
 8000d80:	6013      	str	r3, [r2, #0]
 8000d82:	e033      	b.n	8000dec <clock_fsm+0x630>
			else if(clockModifyState == SECOND){
 8000d84:	4b4a      	ldr	r3, [pc, #296]	@ (8000eb0 <clock_fsm+0x6f4>)
 8000d86:	781b      	ldrb	r3, [r3, #0]
 8000d88:	2b06      	cmp	r3, #6
 8000d8a:	d12f      	bne.n	8000dec <clock_fsm+0x630>
				if( (BUTTONUP == 1) || ( (BUTTONUP >= LONGPRESSTIME) && ( (BUTTONUP - LONGPRESSTIME)%(LONGUPDATETIME) == 0 ) ) ){
 8000d8c:	4b49      	ldr	r3, [pc, #292]	@ (8000eb4 <clock_fsm+0x6f8>)
 8000d8e:	88db      	ldrh	r3, [r3, #6]
 8000d90:	2b01      	cmp	r3, #1
 8000d92:	d00a      	beq.n	8000daa <clock_fsm+0x5ee>
 8000d94:	4b47      	ldr	r3, [pc, #284]	@ (8000eb4 <clock_fsm+0x6f8>)
 8000d96:	88db      	ldrh	r3, [r3, #6]
 8000d98:	2b27      	cmp	r3, #39	@ 0x27
 8000d9a:	d90f      	bls.n	8000dbc <clock_fsm+0x600>
 8000d9c:	4b45      	ldr	r3, [pc, #276]	@ (8000eb4 <clock_fsm+0x6f8>)
 8000d9e:	88db      	ldrh	r3, [r3, #6]
 8000da0:	3b28      	subs	r3, #40	@ 0x28
 8000da2:	f003 0303 	and.w	r3, r3, #3
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d108      	bne.n	8000dbc <clock_fsm+0x600>
					if(displaySecond < 59){
 8000daa:	4b45      	ldr	r3, [pc, #276]	@ (8000ec0 <clock_fsm+0x704>)
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	2b3a      	cmp	r3, #58	@ 0x3a
 8000db0:	dc04      	bgt.n	8000dbc <clock_fsm+0x600>
						++displaySecond;
 8000db2:	4b43      	ldr	r3, [pc, #268]	@ (8000ec0 <clock_fsm+0x704>)
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	3301      	adds	r3, #1
 8000db8:	4a41      	ldr	r2, [pc, #260]	@ (8000ec0 <clock_fsm+0x704>)
 8000dba:	6013      	str	r3, [r2, #0]
				if( (BUTTONDOWN == 1) || ( (BUTTONDOWN >= LONGPRESSTIME) && ( (BUTTONDOWN - LONGPRESSTIME)%(LONGUPDATETIME) == 0 ) ) ){
 8000dbc:	4b3d      	ldr	r3, [pc, #244]	@ (8000eb4 <clock_fsm+0x6f8>)
 8000dbe:	89db      	ldrh	r3, [r3, #14]
 8000dc0:	2b01      	cmp	r3, #1
 8000dc2:	d00a      	beq.n	8000dda <clock_fsm+0x61e>
 8000dc4:	4b3b      	ldr	r3, [pc, #236]	@ (8000eb4 <clock_fsm+0x6f8>)
 8000dc6:	89db      	ldrh	r3, [r3, #14]
 8000dc8:	2b27      	cmp	r3, #39	@ 0x27
 8000dca:	d90f      	bls.n	8000dec <clock_fsm+0x630>
 8000dcc:	4b39      	ldr	r3, [pc, #228]	@ (8000eb4 <clock_fsm+0x6f8>)
 8000dce:	89db      	ldrh	r3, [r3, #14]
 8000dd0:	3b28      	subs	r3, #40	@ 0x28
 8000dd2:	f003 0303 	and.w	r3, r3, #3
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d108      	bne.n	8000dec <clock_fsm+0x630>
					if(displaySecond > 0){
 8000dda:	4b39      	ldr	r3, [pc, #228]	@ (8000ec0 <clock_fsm+0x704>)
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	dd04      	ble.n	8000dec <clock_fsm+0x630>
						--displaySecond;
 8000de2:	4b37      	ldr	r3, [pc, #220]	@ (8000ec0 <clock_fsm+0x704>)
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	3b01      	subs	r3, #1
 8000de8:	4a35      	ldr	r2, [pc, #212]	@ (8000ec0 <clock_fsm+0x704>)
 8000dea:	6013      	str	r3, [r2, #0]
			if(flag_timer3){
 8000dec:	4b35      	ldr	r3, [pc, #212]	@ (8000ec4 <clock_fsm+0x708>)
 8000dee:	881b      	ldrh	r3, [r3, #0]
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	d008      	beq.n	8000e06 <clock_fsm+0x64a>
				toggleVar = 1 - toggleVar;
 8000df4:	4b34      	ldr	r3, [pc, #208]	@ (8000ec8 <clock_fsm+0x70c>)
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	f1c3 0301 	rsb	r3, r3, #1
 8000dfc:	4a32      	ldr	r2, [pc, #200]	@ (8000ec8 <clock_fsm+0x70c>)
 8000dfe:	6013      	str	r3, [r2, #0]
				setTimer3(0.25*1000/MAINTASKTIME); //0.25s
 8000e00:	20fa      	movs	r0, #250	@ 0xfa
 8000e02:	f002 f91d 	bl	8003040 <setTimer3>
			displayToggleTime(displayDate, displayMonth, displayYear, displayDay, displayHour, displayMinute, displaySecond, clockModifyState);
 8000e06:	4b31      	ldr	r3, [pc, #196]	@ (8000ecc <clock_fsm+0x710>)
 8000e08:	6818      	ldr	r0, [r3, #0]
 8000e0a:	4b31      	ldr	r3, [pc, #196]	@ (8000ed0 <clock_fsm+0x714>)
 8000e0c:	681c      	ldr	r4, [r3, #0]
 8000e0e:	4b31      	ldr	r3, [pc, #196]	@ (8000ed4 <clock_fsm+0x718>)
 8000e10:	681d      	ldr	r5, [r3, #0]
 8000e12:	4b31      	ldr	r3, [pc, #196]	@ (8000ed8 <clock_fsm+0x71c>)
 8000e14:	681e      	ldr	r6, [r3, #0]
 8000e16:	4b28      	ldr	r3, [pc, #160]	@ (8000eb8 <clock_fsm+0x6fc>)
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	607b      	str	r3, [r7, #4]
 8000e1c:	4a27      	ldr	r2, [pc, #156]	@ (8000ebc <clock_fsm+0x700>)
 8000e1e:	6812      	ldr	r2, [r2, #0]
 8000e20:	4927      	ldr	r1, [pc, #156]	@ (8000ec0 <clock_fsm+0x704>)
 8000e22:	6809      	ldr	r1, [r1, #0]
 8000e24:	4b22      	ldr	r3, [pc, #136]	@ (8000eb0 <clock_fsm+0x6f4>)
 8000e26:	f893 c000 	ldrb.w	ip, [r3]
 8000e2a:	4663      	mov	r3, ip
 8000e2c:	9303      	str	r3, [sp, #12]
 8000e2e:	9102      	str	r1, [sp, #8]
 8000e30:	9201      	str	r2, [sp, #4]
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	9300      	str	r3, [sp, #0]
 8000e36:	4633      	mov	r3, r6
 8000e38:	462a      	mov	r2, r5
 8000e3a:	4621      	mov	r1, r4
 8000e3c:	f000 ffc4 	bl	8001dc8 <displayToggleTime>
			if(button_count[1] == 1){
 8000e40:	4b1c      	ldr	r3, [pc, #112]	@ (8000eb4 <clock_fsm+0x6f8>)
 8000e42:	885b      	ldrh	r3, [r3, #2]
 8000e44:	2b01      	cmp	r3, #1
 8000e46:	f040 82a0 	bne.w	800138a <clock_fsm+0xbce>
				lcd_Clear(BLACK);
 8000e4a:	2000      	movs	r0, #0
 8000e4c:	f001 fbd0 	bl	80025f0 <lcd_Clear>
				updateTime(displayDate, displayMonth, displayYear, displayDay, displayHour, displayMinute, displaySecond);
 8000e50:	4b1e      	ldr	r3, [pc, #120]	@ (8000ecc <clock_fsm+0x710>)
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	b2d8      	uxtb	r0, r3
 8000e56:	4b1e      	ldr	r3, [pc, #120]	@ (8000ed0 <clock_fsm+0x714>)
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	b2dc      	uxtb	r4, r3
 8000e5c:	4b1d      	ldr	r3, [pc, #116]	@ (8000ed4 <clock_fsm+0x718>)
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	b2dd      	uxtb	r5, r3
 8000e62:	4b1d      	ldr	r3, [pc, #116]	@ (8000ed8 <clock_fsm+0x71c>)
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	b2de      	uxtb	r6, r3
 8000e68:	4b13      	ldr	r3, [pc, #76]	@ (8000eb8 <clock_fsm+0x6fc>)
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	b2db      	uxtb	r3, r3
 8000e6e:	4a13      	ldr	r2, [pc, #76]	@ (8000ebc <clock_fsm+0x700>)
 8000e70:	6812      	ldr	r2, [r2, #0]
 8000e72:	b2d2      	uxtb	r2, r2
 8000e74:	4912      	ldr	r1, [pc, #72]	@ (8000ec0 <clock_fsm+0x704>)
 8000e76:	6809      	ldr	r1, [r1, #0]
 8000e78:	b2c9      	uxtb	r1, r1
 8000e7a:	9102      	str	r1, [sp, #8]
 8000e7c:	9201      	str	r2, [sp, #4]
 8000e7e:	9300      	str	r3, [sp, #0]
 8000e80:	4633      	mov	r3, r6
 8000e82:	462a      	mov	r2, r5
 8000e84:	4621      	mov	r1, r4
 8000e86:	f7ff fb8f 	bl	80005a8 <updateTime>
				toggleVar = 0;
 8000e8a:	4b0f      	ldr	r3, [pc, #60]	@ (8000ec8 <clock_fsm+0x70c>)
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	601a      	str	r2, [r3, #0]
				if(clockModifyState == SECOND){
 8000e90:	4b07      	ldr	r3, [pc, #28]	@ (8000eb0 <clock_fsm+0x6f4>)
 8000e92:	781b      	ldrb	r3, [r3, #0]
 8000e94:	2b06      	cmp	r3, #6
 8000e96:	d103      	bne.n	8000ea0 <clock_fsm+0x6e4>
					clockModifyState = DATE;
 8000e98:	4b05      	ldr	r3, [pc, #20]	@ (8000eb0 <clock_fsm+0x6f4>)
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	701a      	strb	r2, [r3, #0]
		break;
 8000e9e:	e274      	b.n	800138a <clock_fsm+0xbce>
					++clockModifyState;
 8000ea0:	4b03      	ldr	r3, [pc, #12]	@ (8000eb0 <clock_fsm+0x6f4>)
 8000ea2:	781b      	ldrb	r3, [r3, #0]
 8000ea4:	3301      	adds	r3, #1
 8000ea6:	b2da      	uxtb	r2, r3
 8000ea8:	4b01      	ldr	r3, [pc, #4]	@ (8000eb0 <clock_fsm+0x6f4>)
 8000eaa:	701a      	strb	r2, [r3, #0]
		break;
 8000eac:	e26d      	b.n	800138a <clock_fsm+0xbce>
 8000eae:	bf00      	nop
 8000eb0:	20000053 	.word	0x20000053
 8000eb4:	20000030 	.word	0x20000030
 8000eb8:	20000068 	.word	0x20000068
 8000ebc:	2000006c 	.word	0x2000006c
 8000ec0:	20000070 	.word	0x20000070
 8000ec4:	2000015e 	.word	0x2000015e
 8000ec8:	20000090 	.word	0x20000090
 8000ecc:	20000058 	.word	0x20000058
 8000ed0:	2000005c 	.word	0x2000005c
 8000ed4:	20000060 	.word	0x20000060
 8000ed8:	20000064 	.word	0x20000064
	case MODIFYREMIND:
		if(button_count[0] == 1){
 8000edc:	4b7a      	ldr	r3, [pc, #488]	@ (80010c8 <clock_fsm+0x90c>)
 8000ede:	881b      	ldrh	r3, [r3, #0]
 8000ee0:	2b01      	cmp	r3, #1
 8000ee2:	d138      	bne.n	8000f56 <clock_fsm+0x79a>
			clockState = NORMAL;
 8000ee4:	4b79      	ldr	r3, [pc, #484]	@ (80010cc <clock_fsm+0x910>)
 8000ee6:	2201      	movs	r2, #1
 8000ee8:	701a      	strb	r2, [r3, #0]
			lcd_Clear(BLACK);
 8000eea:	2000      	movs	r0, #0
 8000eec:	f001 fb80 	bl	80025f0 <lcd_Clear>
			updateDisplayTime(ds3231_date, ds3231_month, ds3231_year, ds3231_day, ds3231_hours, ds3231_min, ds3231_sec);
 8000ef0:	4b77      	ldr	r3, [pc, #476]	@ (80010d0 <clock_fsm+0x914>)
 8000ef2:	781b      	ldrb	r3, [r3, #0]
 8000ef4:	4618      	mov	r0, r3
 8000ef6:	4b77      	ldr	r3, [pc, #476]	@ (80010d4 <clock_fsm+0x918>)
 8000ef8:	781b      	ldrb	r3, [r3, #0]
 8000efa:	461c      	mov	r4, r3
 8000efc:	4b76      	ldr	r3, [pc, #472]	@ (80010d8 <clock_fsm+0x91c>)
 8000efe:	781b      	ldrb	r3, [r3, #0]
 8000f00:	461d      	mov	r5, r3
 8000f02:	4b76      	ldr	r3, [pc, #472]	@ (80010dc <clock_fsm+0x920>)
 8000f04:	781b      	ldrb	r3, [r3, #0]
 8000f06:	461e      	mov	r6, r3
 8000f08:	4b75      	ldr	r3, [pc, #468]	@ (80010e0 <clock_fsm+0x924>)
 8000f0a:	781b      	ldrb	r3, [r3, #0]
 8000f0c:	461a      	mov	r2, r3
 8000f0e:	4b75      	ldr	r3, [pc, #468]	@ (80010e4 <clock_fsm+0x928>)
 8000f10:	781b      	ldrb	r3, [r3, #0]
 8000f12:	4619      	mov	r1, r3
 8000f14:	4b74      	ldr	r3, [pc, #464]	@ (80010e8 <clock_fsm+0x92c>)
 8000f16:	781b      	ldrb	r3, [r3, #0]
 8000f18:	9302      	str	r3, [sp, #8]
 8000f1a:	9101      	str	r1, [sp, #4]
 8000f1c:	9200      	str	r2, [sp, #0]
 8000f1e:	4633      	mov	r3, r6
 8000f20:	462a      	mov	r2, r5
 8000f22:	4621      	mov	r1, r4
 8000f24:	f7ff fb78 	bl	8000618 <updateDisplayTime>
			displayNormalTime(displayDate, displayMonth, displayYear, displayDay, displayHour, displayMinute, displaySecond);
 8000f28:	4b70      	ldr	r3, [pc, #448]	@ (80010ec <clock_fsm+0x930>)
 8000f2a:	6818      	ldr	r0, [r3, #0]
 8000f2c:	4b70      	ldr	r3, [pc, #448]	@ (80010f0 <clock_fsm+0x934>)
 8000f2e:	681c      	ldr	r4, [r3, #0]
 8000f30:	4b70      	ldr	r3, [pc, #448]	@ (80010f4 <clock_fsm+0x938>)
 8000f32:	681d      	ldr	r5, [r3, #0]
 8000f34:	4b70      	ldr	r3, [pc, #448]	@ (80010f8 <clock_fsm+0x93c>)
 8000f36:	681e      	ldr	r6, [r3, #0]
 8000f38:	4b70      	ldr	r3, [pc, #448]	@ (80010fc <clock_fsm+0x940>)
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	4a70      	ldr	r2, [pc, #448]	@ (8001100 <clock_fsm+0x944>)
 8000f3e:	6812      	ldr	r2, [r2, #0]
 8000f40:	4970      	ldr	r1, [pc, #448]	@ (8001104 <clock_fsm+0x948>)
 8000f42:	6809      	ldr	r1, [r1, #0]
 8000f44:	9102      	str	r1, [sp, #8]
 8000f46:	9201      	str	r2, [sp, #4]
 8000f48:	9300      	str	r3, [sp, #0]
 8000f4a:	4633      	mov	r3, r6
 8000f4c:	462a      	mov	r2, r5
 8000f4e:	4621      	mov	r1, r4
 8000f50:	f000 fa38 	bl	80013c4 <displayNormalTime>
				else {
					++clockModifyState;
				}
			}
		}
		break;
 8000f54:	e21b      	b.n	800138e <clock_fsm+0xbd2>
			clockState = MODIFYREMIND;
 8000f56:	4b5d      	ldr	r3, [pc, #372]	@ (80010cc <clock_fsm+0x910>)
 8000f58:	2203      	movs	r2, #3
 8000f5a:	701a      	strb	r2, [r3, #0]
			lcd_ShowStr(30, 40, "MODIFYREMIND", GRED, BLACK, 32, 1);
 8000f5c:	2301      	movs	r3, #1
 8000f5e:	9302      	str	r3, [sp, #8]
 8000f60:	2320      	movs	r3, #32
 8000f62:	9301      	str	r3, [sp, #4]
 8000f64:	2300      	movs	r3, #0
 8000f66:	9300      	str	r3, [sp, #0]
 8000f68:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8000f6c:	4a66      	ldr	r2, [pc, #408]	@ (8001108 <clock_fsm+0x94c>)
 8000f6e:	2128      	movs	r1, #40	@ 0x28
 8000f70:	201e      	movs	r0, #30
 8000f72:	f001 fe7d 	bl	8002c70 <lcd_ShowStr>
			if(clockModifyState == DATE){
 8000f76:	4b65      	ldr	r3, [pc, #404]	@ (800110c <clock_fsm+0x950>)
 8000f78:	781b      	ldrb	r3, [r3, #0]
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d133      	bne.n	8000fe6 <clock_fsm+0x82a>
				if( (BUTTONUP == 1) || ( (BUTTONUP >= LONGPRESSTIME) && ( (BUTTONUP - LONGPRESSTIME)%(LONGUPDATETIME) == 0 ) ) ){
 8000f7e:	4b52      	ldr	r3, [pc, #328]	@ (80010c8 <clock_fsm+0x90c>)
 8000f80:	88db      	ldrh	r3, [r3, #6]
 8000f82:	2b01      	cmp	r3, #1
 8000f84:	d00a      	beq.n	8000f9c <clock_fsm+0x7e0>
 8000f86:	4b50      	ldr	r3, [pc, #320]	@ (80010c8 <clock_fsm+0x90c>)
 8000f88:	88db      	ldrh	r3, [r3, #6]
 8000f8a:	2b27      	cmp	r3, #39	@ 0x27
 8000f8c:	d90f      	bls.n	8000fae <clock_fsm+0x7f2>
 8000f8e:	4b4e      	ldr	r3, [pc, #312]	@ (80010c8 <clock_fsm+0x90c>)
 8000f90:	88db      	ldrh	r3, [r3, #6]
 8000f92:	3b28      	subs	r3, #40	@ 0x28
 8000f94:	f003 0303 	and.w	r3, r3, #3
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d108      	bne.n	8000fae <clock_fsm+0x7f2>
					if(displayDate < 31){
 8000f9c:	4b53      	ldr	r3, [pc, #332]	@ (80010ec <clock_fsm+0x930>)
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	2b1e      	cmp	r3, #30
 8000fa2:	dc04      	bgt.n	8000fae <clock_fsm+0x7f2>
						++displayDate;
 8000fa4:	4b51      	ldr	r3, [pc, #324]	@ (80010ec <clock_fsm+0x930>)
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	3301      	adds	r3, #1
 8000faa:	4a50      	ldr	r2, [pc, #320]	@ (80010ec <clock_fsm+0x930>)
 8000fac:	6013      	str	r3, [r2, #0]
				if( (BUTTONDOWN == 1) || ( (BUTTONDOWN >= LONGPRESSTIME) && ( (BUTTONDOWN - LONGPRESSTIME)%(LONGUPDATETIME) == 0 ) ) ){
 8000fae:	4b46      	ldr	r3, [pc, #280]	@ (80010c8 <clock_fsm+0x90c>)
 8000fb0:	89db      	ldrh	r3, [r3, #14]
 8000fb2:	2b01      	cmp	r3, #1
 8000fb4:	d00c      	beq.n	8000fd0 <clock_fsm+0x814>
 8000fb6:	4b44      	ldr	r3, [pc, #272]	@ (80010c8 <clock_fsm+0x90c>)
 8000fb8:	89db      	ldrh	r3, [r3, #14]
 8000fba:	2b27      	cmp	r3, #39	@ 0x27
 8000fbc:	f240 818a 	bls.w	80012d4 <clock_fsm+0xb18>
 8000fc0:	4b41      	ldr	r3, [pc, #260]	@ (80010c8 <clock_fsm+0x90c>)
 8000fc2:	89db      	ldrh	r3, [r3, #14]
 8000fc4:	3b28      	subs	r3, #40	@ 0x28
 8000fc6:	f003 0303 	and.w	r3, r3, #3
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	f040 8182 	bne.w	80012d4 <clock_fsm+0xb18>
					if(displayDate > 1){
 8000fd0:	4b46      	ldr	r3, [pc, #280]	@ (80010ec <clock_fsm+0x930>)
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	2b01      	cmp	r3, #1
 8000fd6:	f340 817d 	ble.w	80012d4 <clock_fsm+0xb18>
						--displayDate;
 8000fda:	4b44      	ldr	r3, [pc, #272]	@ (80010ec <clock_fsm+0x930>)
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	3b01      	subs	r3, #1
 8000fe0:	4a42      	ldr	r2, [pc, #264]	@ (80010ec <clock_fsm+0x930>)
 8000fe2:	6013      	str	r3, [r2, #0]
 8000fe4:	e176      	b.n	80012d4 <clock_fsm+0xb18>
			else if(clockModifyState == MONTH){
 8000fe6:	4b49      	ldr	r3, [pc, #292]	@ (800110c <clock_fsm+0x950>)
 8000fe8:	781b      	ldrb	r3, [r3, #0]
 8000fea:	2b01      	cmp	r3, #1
 8000fec:	d133      	bne.n	8001056 <clock_fsm+0x89a>
				if( (BUTTONUP == 1) || ( (BUTTONUP >= LONGPRESSTIME) && ( (BUTTONUP - LONGPRESSTIME)%(LONGUPDATETIME) == 0 ) ) ){
 8000fee:	4b36      	ldr	r3, [pc, #216]	@ (80010c8 <clock_fsm+0x90c>)
 8000ff0:	88db      	ldrh	r3, [r3, #6]
 8000ff2:	2b01      	cmp	r3, #1
 8000ff4:	d00a      	beq.n	800100c <clock_fsm+0x850>
 8000ff6:	4b34      	ldr	r3, [pc, #208]	@ (80010c8 <clock_fsm+0x90c>)
 8000ff8:	88db      	ldrh	r3, [r3, #6]
 8000ffa:	2b27      	cmp	r3, #39	@ 0x27
 8000ffc:	d90f      	bls.n	800101e <clock_fsm+0x862>
 8000ffe:	4b32      	ldr	r3, [pc, #200]	@ (80010c8 <clock_fsm+0x90c>)
 8001000:	88db      	ldrh	r3, [r3, #6]
 8001002:	3b28      	subs	r3, #40	@ 0x28
 8001004:	f003 0303 	and.w	r3, r3, #3
 8001008:	2b00      	cmp	r3, #0
 800100a:	d108      	bne.n	800101e <clock_fsm+0x862>
					if(displayMonth < 12){
 800100c:	4b38      	ldr	r3, [pc, #224]	@ (80010f0 <clock_fsm+0x934>)
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	2b0b      	cmp	r3, #11
 8001012:	dc04      	bgt.n	800101e <clock_fsm+0x862>
						++displayMonth;
 8001014:	4b36      	ldr	r3, [pc, #216]	@ (80010f0 <clock_fsm+0x934>)
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	3301      	adds	r3, #1
 800101a:	4a35      	ldr	r2, [pc, #212]	@ (80010f0 <clock_fsm+0x934>)
 800101c:	6013      	str	r3, [r2, #0]
				if( (BUTTONDOWN == 1) || ( (BUTTONDOWN >= LONGPRESSTIME) && ( (BUTTONDOWN - LONGPRESSTIME)%(LONGUPDATETIME) == 0 ) ) ){
 800101e:	4b2a      	ldr	r3, [pc, #168]	@ (80010c8 <clock_fsm+0x90c>)
 8001020:	89db      	ldrh	r3, [r3, #14]
 8001022:	2b01      	cmp	r3, #1
 8001024:	d00c      	beq.n	8001040 <clock_fsm+0x884>
 8001026:	4b28      	ldr	r3, [pc, #160]	@ (80010c8 <clock_fsm+0x90c>)
 8001028:	89db      	ldrh	r3, [r3, #14]
 800102a:	2b27      	cmp	r3, #39	@ 0x27
 800102c:	f240 8152 	bls.w	80012d4 <clock_fsm+0xb18>
 8001030:	4b25      	ldr	r3, [pc, #148]	@ (80010c8 <clock_fsm+0x90c>)
 8001032:	89db      	ldrh	r3, [r3, #14]
 8001034:	3b28      	subs	r3, #40	@ 0x28
 8001036:	f003 0303 	and.w	r3, r3, #3
 800103a:	2b00      	cmp	r3, #0
 800103c:	f040 814a 	bne.w	80012d4 <clock_fsm+0xb18>
					if(displayMonth > 1){
 8001040:	4b2b      	ldr	r3, [pc, #172]	@ (80010f0 <clock_fsm+0x934>)
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	2b01      	cmp	r3, #1
 8001046:	f340 8145 	ble.w	80012d4 <clock_fsm+0xb18>
						--displayMonth;
 800104a:	4b29      	ldr	r3, [pc, #164]	@ (80010f0 <clock_fsm+0x934>)
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	3b01      	subs	r3, #1
 8001050:	4a27      	ldr	r2, [pc, #156]	@ (80010f0 <clock_fsm+0x934>)
 8001052:	6013      	str	r3, [r2, #0]
 8001054:	e13e      	b.n	80012d4 <clock_fsm+0xb18>
			else if(clockModifyState == YEAR){
 8001056:	4b2d      	ldr	r3, [pc, #180]	@ (800110c <clock_fsm+0x950>)
 8001058:	781b      	ldrb	r3, [r3, #0]
 800105a:	2b02      	cmp	r3, #2
 800105c:	d158      	bne.n	8001110 <clock_fsm+0x954>
				if( (BUTTONUP == 1) || ( (BUTTONUP >= LONGPRESSTIME) && ( (BUTTONUP - LONGPRESSTIME)%(LONGUPDATETIME) == 0 ) ) ){
 800105e:	4b1a      	ldr	r3, [pc, #104]	@ (80010c8 <clock_fsm+0x90c>)
 8001060:	88db      	ldrh	r3, [r3, #6]
 8001062:	2b01      	cmp	r3, #1
 8001064:	d00a      	beq.n	800107c <clock_fsm+0x8c0>
 8001066:	4b18      	ldr	r3, [pc, #96]	@ (80010c8 <clock_fsm+0x90c>)
 8001068:	88db      	ldrh	r3, [r3, #6]
 800106a:	2b27      	cmp	r3, #39	@ 0x27
 800106c:	d90f      	bls.n	800108e <clock_fsm+0x8d2>
 800106e:	4b16      	ldr	r3, [pc, #88]	@ (80010c8 <clock_fsm+0x90c>)
 8001070:	88db      	ldrh	r3, [r3, #6]
 8001072:	3b28      	subs	r3, #40	@ 0x28
 8001074:	f003 0303 	and.w	r3, r3, #3
 8001078:	2b00      	cmp	r3, #0
 800107a:	d108      	bne.n	800108e <clock_fsm+0x8d2>
					if(displayYear < 99){
 800107c:	4b1d      	ldr	r3, [pc, #116]	@ (80010f4 <clock_fsm+0x938>)
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	2b62      	cmp	r3, #98	@ 0x62
 8001082:	dc04      	bgt.n	800108e <clock_fsm+0x8d2>
						++displayYear;
 8001084:	4b1b      	ldr	r3, [pc, #108]	@ (80010f4 <clock_fsm+0x938>)
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	3301      	adds	r3, #1
 800108a:	4a1a      	ldr	r2, [pc, #104]	@ (80010f4 <clock_fsm+0x938>)
 800108c:	6013      	str	r3, [r2, #0]
				if( (BUTTONDOWN == 1) || ( (BUTTONDOWN >= LONGPRESSTIME) && ( (BUTTONDOWN - LONGPRESSTIME)%(LONGUPDATETIME) == 0 ) ) ){
 800108e:	4b0e      	ldr	r3, [pc, #56]	@ (80010c8 <clock_fsm+0x90c>)
 8001090:	89db      	ldrh	r3, [r3, #14]
 8001092:	2b01      	cmp	r3, #1
 8001094:	d00c      	beq.n	80010b0 <clock_fsm+0x8f4>
 8001096:	4b0c      	ldr	r3, [pc, #48]	@ (80010c8 <clock_fsm+0x90c>)
 8001098:	89db      	ldrh	r3, [r3, #14]
 800109a:	2b27      	cmp	r3, #39	@ 0x27
 800109c:	f240 811a 	bls.w	80012d4 <clock_fsm+0xb18>
 80010a0:	4b09      	ldr	r3, [pc, #36]	@ (80010c8 <clock_fsm+0x90c>)
 80010a2:	89db      	ldrh	r3, [r3, #14]
 80010a4:	3b28      	subs	r3, #40	@ 0x28
 80010a6:	f003 0303 	and.w	r3, r3, #3
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	f040 8112 	bne.w	80012d4 <clock_fsm+0xb18>
					if(displayYear > 1){
 80010b0:	4b10      	ldr	r3, [pc, #64]	@ (80010f4 <clock_fsm+0x938>)
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	2b01      	cmp	r3, #1
 80010b6:	f340 810d 	ble.w	80012d4 <clock_fsm+0xb18>
						--displayYear;
 80010ba:	4b0e      	ldr	r3, [pc, #56]	@ (80010f4 <clock_fsm+0x938>)
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	3b01      	subs	r3, #1
 80010c0:	4a0c      	ldr	r2, [pc, #48]	@ (80010f4 <clock_fsm+0x938>)
 80010c2:	6013      	str	r3, [r2, #0]
 80010c4:	e106      	b.n	80012d4 <clock_fsm+0xb18>
 80010c6:	bf00      	nop
 80010c8:	20000030 	.word	0x20000030
 80010cc:	20000052 	.word	0x20000052
 80010d0:	2000009e 	.word	0x2000009e
 80010d4:	200000a0 	.word	0x200000a0
 80010d8:	200000a1 	.word	0x200000a1
 80010dc:	2000009f 	.word	0x2000009f
 80010e0:	2000009b 	.word	0x2000009b
 80010e4:	2000009c 	.word	0x2000009c
 80010e8:	2000009d 	.word	0x2000009d
 80010ec:	20000058 	.word	0x20000058
 80010f0:	2000005c 	.word	0x2000005c
 80010f4:	20000060 	.word	0x20000060
 80010f8:	20000064 	.word	0x20000064
 80010fc:	20000068 	.word	0x20000068
 8001100:	2000006c 	.word	0x2000006c
 8001104:	20000070 	.word	0x20000070
 8001108:	08006d74 	.word	0x08006d74
 800110c:	20000053 	.word	0x20000053
			else if(clockModifyState == DAY){
 8001110:	4b51      	ldr	r3, [pc, #324]	@ (8001258 <clock_fsm+0xa9c>)
 8001112:	781b      	ldrb	r3, [r3, #0]
 8001114:	2b03      	cmp	r3, #3
 8001116:	d133      	bne.n	8001180 <clock_fsm+0x9c4>
				if( (BUTTONUP == 1) || ( (BUTTONUP >= LONGPRESSTIME) && ( (BUTTONUP - LONGPRESSTIME)%(LONGUPDATETIME) == 0 ) ) ){
 8001118:	4b50      	ldr	r3, [pc, #320]	@ (800125c <clock_fsm+0xaa0>)
 800111a:	88db      	ldrh	r3, [r3, #6]
 800111c:	2b01      	cmp	r3, #1
 800111e:	d00a      	beq.n	8001136 <clock_fsm+0x97a>
 8001120:	4b4e      	ldr	r3, [pc, #312]	@ (800125c <clock_fsm+0xaa0>)
 8001122:	88db      	ldrh	r3, [r3, #6]
 8001124:	2b27      	cmp	r3, #39	@ 0x27
 8001126:	d90f      	bls.n	8001148 <clock_fsm+0x98c>
 8001128:	4b4c      	ldr	r3, [pc, #304]	@ (800125c <clock_fsm+0xaa0>)
 800112a:	88db      	ldrh	r3, [r3, #6]
 800112c:	3b28      	subs	r3, #40	@ 0x28
 800112e:	f003 0303 	and.w	r3, r3, #3
 8001132:	2b00      	cmp	r3, #0
 8001134:	d108      	bne.n	8001148 <clock_fsm+0x98c>
					if(displayDay < 8){
 8001136:	4b4a      	ldr	r3, [pc, #296]	@ (8001260 <clock_fsm+0xaa4>)
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	2b07      	cmp	r3, #7
 800113c:	dc04      	bgt.n	8001148 <clock_fsm+0x98c>
						++displayDay;
 800113e:	4b48      	ldr	r3, [pc, #288]	@ (8001260 <clock_fsm+0xaa4>)
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	3301      	adds	r3, #1
 8001144:	4a46      	ldr	r2, [pc, #280]	@ (8001260 <clock_fsm+0xaa4>)
 8001146:	6013      	str	r3, [r2, #0]
				if( (BUTTONDOWN == 1) || ( (BUTTONDOWN >= LONGPRESSTIME) && ( (BUTTONDOWN - LONGPRESSTIME)%(LONGUPDATETIME) == 0 ) ) ){
 8001148:	4b44      	ldr	r3, [pc, #272]	@ (800125c <clock_fsm+0xaa0>)
 800114a:	89db      	ldrh	r3, [r3, #14]
 800114c:	2b01      	cmp	r3, #1
 800114e:	d00c      	beq.n	800116a <clock_fsm+0x9ae>
 8001150:	4b42      	ldr	r3, [pc, #264]	@ (800125c <clock_fsm+0xaa0>)
 8001152:	89db      	ldrh	r3, [r3, #14]
 8001154:	2b27      	cmp	r3, #39	@ 0x27
 8001156:	f240 80bd 	bls.w	80012d4 <clock_fsm+0xb18>
 800115a:	4b40      	ldr	r3, [pc, #256]	@ (800125c <clock_fsm+0xaa0>)
 800115c:	89db      	ldrh	r3, [r3, #14]
 800115e:	3b28      	subs	r3, #40	@ 0x28
 8001160:	f003 0303 	and.w	r3, r3, #3
 8001164:	2b00      	cmp	r3, #0
 8001166:	f040 80b5 	bne.w	80012d4 <clock_fsm+0xb18>
					if(displayDay > 2){
 800116a:	4b3d      	ldr	r3, [pc, #244]	@ (8001260 <clock_fsm+0xaa4>)
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	2b02      	cmp	r3, #2
 8001170:	f340 80b0 	ble.w	80012d4 <clock_fsm+0xb18>
						--displayDay;
 8001174:	4b3a      	ldr	r3, [pc, #232]	@ (8001260 <clock_fsm+0xaa4>)
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	3b01      	subs	r3, #1
 800117a:	4a39      	ldr	r2, [pc, #228]	@ (8001260 <clock_fsm+0xaa4>)
 800117c:	6013      	str	r3, [r2, #0]
 800117e:	e0a9      	b.n	80012d4 <clock_fsm+0xb18>
			else if(clockModifyState == HOUR){
 8001180:	4b35      	ldr	r3, [pc, #212]	@ (8001258 <clock_fsm+0xa9c>)
 8001182:	781b      	ldrb	r3, [r3, #0]
 8001184:	2b04      	cmp	r3, #4
 8001186:	d131      	bne.n	80011ec <clock_fsm+0xa30>
				if( (BUTTONUP == 1) || ( (BUTTONUP >= LONGPRESSTIME) && ( (BUTTONUP - LONGPRESSTIME)%(LONGUPDATETIME) == 0 ) ) ){
 8001188:	4b34      	ldr	r3, [pc, #208]	@ (800125c <clock_fsm+0xaa0>)
 800118a:	88db      	ldrh	r3, [r3, #6]
 800118c:	2b01      	cmp	r3, #1
 800118e:	d00a      	beq.n	80011a6 <clock_fsm+0x9ea>
 8001190:	4b32      	ldr	r3, [pc, #200]	@ (800125c <clock_fsm+0xaa0>)
 8001192:	88db      	ldrh	r3, [r3, #6]
 8001194:	2b27      	cmp	r3, #39	@ 0x27
 8001196:	d90f      	bls.n	80011b8 <clock_fsm+0x9fc>
 8001198:	4b30      	ldr	r3, [pc, #192]	@ (800125c <clock_fsm+0xaa0>)
 800119a:	88db      	ldrh	r3, [r3, #6]
 800119c:	3b28      	subs	r3, #40	@ 0x28
 800119e:	f003 0303 	and.w	r3, r3, #3
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d108      	bne.n	80011b8 <clock_fsm+0x9fc>
					if(displayHour < 23){
 80011a6:	4b2f      	ldr	r3, [pc, #188]	@ (8001264 <clock_fsm+0xaa8>)
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	2b16      	cmp	r3, #22
 80011ac:	dc04      	bgt.n	80011b8 <clock_fsm+0x9fc>
						++displayHour;
 80011ae:	4b2d      	ldr	r3, [pc, #180]	@ (8001264 <clock_fsm+0xaa8>)
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	3301      	adds	r3, #1
 80011b4:	4a2b      	ldr	r2, [pc, #172]	@ (8001264 <clock_fsm+0xaa8>)
 80011b6:	6013      	str	r3, [r2, #0]
				if( (BUTTONDOWN == 1) || ( (BUTTONDOWN >= LONGPRESSTIME) && ( (BUTTONDOWN - LONGPRESSTIME)%(LONGUPDATETIME) == 0 ) ) ){
 80011b8:	4b28      	ldr	r3, [pc, #160]	@ (800125c <clock_fsm+0xaa0>)
 80011ba:	89db      	ldrh	r3, [r3, #14]
 80011bc:	2b01      	cmp	r3, #1
 80011be:	d00b      	beq.n	80011d8 <clock_fsm+0xa1c>
 80011c0:	4b26      	ldr	r3, [pc, #152]	@ (800125c <clock_fsm+0xaa0>)
 80011c2:	89db      	ldrh	r3, [r3, #14]
 80011c4:	2b27      	cmp	r3, #39	@ 0x27
 80011c6:	f240 8085 	bls.w	80012d4 <clock_fsm+0xb18>
 80011ca:	4b24      	ldr	r3, [pc, #144]	@ (800125c <clock_fsm+0xaa0>)
 80011cc:	89db      	ldrh	r3, [r3, #14]
 80011ce:	3b28      	subs	r3, #40	@ 0x28
 80011d0:	f003 0303 	and.w	r3, r3, #3
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d17d      	bne.n	80012d4 <clock_fsm+0xb18>
					if(displayHour > 0){
 80011d8:	4b22      	ldr	r3, [pc, #136]	@ (8001264 <clock_fsm+0xaa8>)
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	2b00      	cmp	r3, #0
 80011de:	dd79      	ble.n	80012d4 <clock_fsm+0xb18>
						--displayHour;
 80011e0:	4b20      	ldr	r3, [pc, #128]	@ (8001264 <clock_fsm+0xaa8>)
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	3b01      	subs	r3, #1
 80011e6:	4a1f      	ldr	r2, [pc, #124]	@ (8001264 <clock_fsm+0xaa8>)
 80011e8:	6013      	str	r3, [r2, #0]
 80011ea:	e073      	b.n	80012d4 <clock_fsm+0xb18>
			else if(clockModifyState == MINUTE){
 80011ec:	4b1a      	ldr	r3, [pc, #104]	@ (8001258 <clock_fsm+0xa9c>)
 80011ee:	781b      	ldrb	r3, [r3, #0]
 80011f0:	2b05      	cmp	r3, #5
 80011f2:	d13b      	bne.n	800126c <clock_fsm+0xab0>
				if( (BUTTONUP == 1) || ( (BUTTONUP >= LONGPRESSTIME) && ( (BUTTONUP - LONGPRESSTIME)%(LONGUPDATETIME) == 0 ) ) ){
 80011f4:	4b19      	ldr	r3, [pc, #100]	@ (800125c <clock_fsm+0xaa0>)
 80011f6:	88db      	ldrh	r3, [r3, #6]
 80011f8:	2b01      	cmp	r3, #1
 80011fa:	d00a      	beq.n	8001212 <clock_fsm+0xa56>
 80011fc:	4b17      	ldr	r3, [pc, #92]	@ (800125c <clock_fsm+0xaa0>)
 80011fe:	88db      	ldrh	r3, [r3, #6]
 8001200:	2b27      	cmp	r3, #39	@ 0x27
 8001202:	d90f      	bls.n	8001224 <clock_fsm+0xa68>
 8001204:	4b15      	ldr	r3, [pc, #84]	@ (800125c <clock_fsm+0xaa0>)
 8001206:	88db      	ldrh	r3, [r3, #6]
 8001208:	3b28      	subs	r3, #40	@ 0x28
 800120a:	f003 0303 	and.w	r3, r3, #3
 800120e:	2b00      	cmp	r3, #0
 8001210:	d108      	bne.n	8001224 <clock_fsm+0xa68>
					if(displayMinute < 59){
 8001212:	4b15      	ldr	r3, [pc, #84]	@ (8001268 <clock_fsm+0xaac>)
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	2b3a      	cmp	r3, #58	@ 0x3a
 8001218:	dc04      	bgt.n	8001224 <clock_fsm+0xa68>
						++displayMinute;
 800121a:	4b13      	ldr	r3, [pc, #76]	@ (8001268 <clock_fsm+0xaac>)
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	3301      	adds	r3, #1
 8001220:	4a11      	ldr	r2, [pc, #68]	@ (8001268 <clock_fsm+0xaac>)
 8001222:	6013      	str	r3, [r2, #0]
				if( (BUTTONDOWN == 1) || ( (BUTTONDOWN >= LONGPRESSTIME) && ( (BUTTONDOWN - LONGPRESSTIME)%(LONGUPDATETIME) == 0 ) ) ){
 8001224:	4b0d      	ldr	r3, [pc, #52]	@ (800125c <clock_fsm+0xaa0>)
 8001226:	89db      	ldrh	r3, [r3, #14]
 8001228:	2b01      	cmp	r3, #1
 800122a:	d00a      	beq.n	8001242 <clock_fsm+0xa86>
 800122c:	4b0b      	ldr	r3, [pc, #44]	@ (800125c <clock_fsm+0xaa0>)
 800122e:	89db      	ldrh	r3, [r3, #14]
 8001230:	2b27      	cmp	r3, #39	@ 0x27
 8001232:	d94f      	bls.n	80012d4 <clock_fsm+0xb18>
 8001234:	4b09      	ldr	r3, [pc, #36]	@ (800125c <clock_fsm+0xaa0>)
 8001236:	89db      	ldrh	r3, [r3, #14]
 8001238:	3b28      	subs	r3, #40	@ 0x28
 800123a:	f003 0303 	and.w	r3, r3, #3
 800123e:	2b00      	cmp	r3, #0
 8001240:	d148      	bne.n	80012d4 <clock_fsm+0xb18>
					if(displayMinute > 0){
 8001242:	4b09      	ldr	r3, [pc, #36]	@ (8001268 <clock_fsm+0xaac>)
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	2b00      	cmp	r3, #0
 8001248:	dd44      	ble.n	80012d4 <clock_fsm+0xb18>
						--displayMinute;
 800124a:	4b07      	ldr	r3, [pc, #28]	@ (8001268 <clock_fsm+0xaac>)
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	3b01      	subs	r3, #1
 8001250:	4a05      	ldr	r2, [pc, #20]	@ (8001268 <clock_fsm+0xaac>)
 8001252:	6013      	str	r3, [r2, #0]
 8001254:	e03e      	b.n	80012d4 <clock_fsm+0xb18>
 8001256:	bf00      	nop
 8001258:	20000053 	.word	0x20000053
 800125c:	20000030 	.word	0x20000030
 8001260:	20000064 	.word	0x20000064
 8001264:	20000068 	.word	0x20000068
 8001268:	2000006c 	.word	0x2000006c
			else if(clockModifyState == SECOND){
 800126c:	4b4a      	ldr	r3, [pc, #296]	@ (8001398 <clock_fsm+0xbdc>)
 800126e:	781b      	ldrb	r3, [r3, #0]
 8001270:	2b06      	cmp	r3, #6
 8001272:	d12f      	bne.n	80012d4 <clock_fsm+0xb18>
				if( (BUTTONUP == 1) || ( (BUTTONUP >= LONGPRESSTIME) && ( (BUTTONUP - LONGPRESSTIME)%(LONGUPDATETIME) == 0 ) ) ){
 8001274:	4b49      	ldr	r3, [pc, #292]	@ (800139c <clock_fsm+0xbe0>)
 8001276:	88db      	ldrh	r3, [r3, #6]
 8001278:	2b01      	cmp	r3, #1
 800127a:	d00a      	beq.n	8001292 <clock_fsm+0xad6>
 800127c:	4b47      	ldr	r3, [pc, #284]	@ (800139c <clock_fsm+0xbe0>)
 800127e:	88db      	ldrh	r3, [r3, #6]
 8001280:	2b27      	cmp	r3, #39	@ 0x27
 8001282:	d90f      	bls.n	80012a4 <clock_fsm+0xae8>
 8001284:	4b45      	ldr	r3, [pc, #276]	@ (800139c <clock_fsm+0xbe0>)
 8001286:	88db      	ldrh	r3, [r3, #6]
 8001288:	3b28      	subs	r3, #40	@ 0x28
 800128a:	f003 0303 	and.w	r3, r3, #3
 800128e:	2b00      	cmp	r3, #0
 8001290:	d108      	bne.n	80012a4 <clock_fsm+0xae8>
					if(displaySecond < 59){
 8001292:	4b43      	ldr	r3, [pc, #268]	@ (80013a0 <clock_fsm+0xbe4>)
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	2b3a      	cmp	r3, #58	@ 0x3a
 8001298:	dc04      	bgt.n	80012a4 <clock_fsm+0xae8>
						++displaySecond;
 800129a:	4b41      	ldr	r3, [pc, #260]	@ (80013a0 <clock_fsm+0xbe4>)
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	3301      	adds	r3, #1
 80012a0:	4a3f      	ldr	r2, [pc, #252]	@ (80013a0 <clock_fsm+0xbe4>)
 80012a2:	6013      	str	r3, [r2, #0]
				if( (BUTTONDOWN == 1) || ( (BUTTONDOWN >= LONGPRESSTIME) && ( (BUTTONDOWN - LONGPRESSTIME)%(LONGUPDATETIME) == 0 ) ) ){
 80012a4:	4b3d      	ldr	r3, [pc, #244]	@ (800139c <clock_fsm+0xbe0>)
 80012a6:	89db      	ldrh	r3, [r3, #14]
 80012a8:	2b01      	cmp	r3, #1
 80012aa:	d00a      	beq.n	80012c2 <clock_fsm+0xb06>
 80012ac:	4b3b      	ldr	r3, [pc, #236]	@ (800139c <clock_fsm+0xbe0>)
 80012ae:	89db      	ldrh	r3, [r3, #14]
 80012b0:	2b27      	cmp	r3, #39	@ 0x27
 80012b2:	d90f      	bls.n	80012d4 <clock_fsm+0xb18>
 80012b4:	4b39      	ldr	r3, [pc, #228]	@ (800139c <clock_fsm+0xbe0>)
 80012b6:	89db      	ldrh	r3, [r3, #14]
 80012b8:	3b28      	subs	r3, #40	@ 0x28
 80012ba:	f003 0303 	and.w	r3, r3, #3
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d108      	bne.n	80012d4 <clock_fsm+0xb18>
					if(displaySecond > 0){
 80012c2:	4b37      	ldr	r3, [pc, #220]	@ (80013a0 <clock_fsm+0xbe4>)
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	dd04      	ble.n	80012d4 <clock_fsm+0xb18>
						--displaySecond;
 80012ca:	4b35      	ldr	r3, [pc, #212]	@ (80013a0 <clock_fsm+0xbe4>)
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	3b01      	subs	r3, #1
 80012d0:	4a33      	ldr	r2, [pc, #204]	@ (80013a0 <clock_fsm+0xbe4>)
 80012d2:	6013      	str	r3, [r2, #0]
			if(flag_timer3){
 80012d4:	4b33      	ldr	r3, [pc, #204]	@ (80013a4 <clock_fsm+0xbe8>)
 80012d6:	881b      	ldrh	r3, [r3, #0]
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d008      	beq.n	80012ee <clock_fsm+0xb32>
				toggleVar = 1 - toggleVar;
 80012dc:	4b32      	ldr	r3, [pc, #200]	@ (80013a8 <clock_fsm+0xbec>)
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	f1c3 0301 	rsb	r3, r3, #1
 80012e4:	4a30      	ldr	r2, [pc, #192]	@ (80013a8 <clock_fsm+0xbec>)
 80012e6:	6013      	str	r3, [r2, #0]
				setTimer3(0.25*1000/MAINTASKTIME); //0.25s
 80012e8:	20fa      	movs	r0, #250	@ 0xfa
 80012ea:	f001 fea9 	bl	8003040 <setTimer3>
			displayToggleTime(displayDate, displayMonth, displayYear, displayDay, displayHour, displayMinute, displaySecond, clockModifyState);
 80012ee:	4b2f      	ldr	r3, [pc, #188]	@ (80013ac <clock_fsm+0xbf0>)
 80012f0:	6818      	ldr	r0, [r3, #0]
 80012f2:	4b2f      	ldr	r3, [pc, #188]	@ (80013b0 <clock_fsm+0xbf4>)
 80012f4:	681c      	ldr	r4, [r3, #0]
 80012f6:	4b2f      	ldr	r3, [pc, #188]	@ (80013b4 <clock_fsm+0xbf8>)
 80012f8:	681d      	ldr	r5, [r3, #0]
 80012fa:	4b2f      	ldr	r3, [pc, #188]	@ (80013b8 <clock_fsm+0xbfc>)
 80012fc:	681e      	ldr	r6, [r3, #0]
 80012fe:	4b2f      	ldr	r3, [pc, #188]	@ (80013bc <clock_fsm+0xc00>)
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	607b      	str	r3, [r7, #4]
 8001304:	4a2e      	ldr	r2, [pc, #184]	@ (80013c0 <clock_fsm+0xc04>)
 8001306:	6812      	ldr	r2, [r2, #0]
 8001308:	4925      	ldr	r1, [pc, #148]	@ (80013a0 <clock_fsm+0xbe4>)
 800130a:	6809      	ldr	r1, [r1, #0]
 800130c:	4b22      	ldr	r3, [pc, #136]	@ (8001398 <clock_fsm+0xbdc>)
 800130e:	f893 c000 	ldrb.w	ip, [r3]
 8001312:	4663      	mov	r3, ip
 8001314:	9303      	str	r3, [sp, #12]
 8001316:	9102      	str	r1, [sp, #8]
 8001318:	9201      	str	r2, [sp, #4]
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	9300      	str	r3, [sp, #0]
 800131e:	4633      	mov	r3, r6
 8001320:	462a      	mov	r2, r5
 8001322:	4621      	mov	r1, r4
 8001324:	f000 fd50 	bl	8001dc8 <displayToggleTime>
			if(button_count[1] == 1){
 8001328:	4b1c      	ldr	r3, [pc, #112]	@ (800139c <clock_fsm+0xbe0>)
 800132a:	885b      	ldrh	r3, [r3, #2]
 800132c:	2b01      	cmp	r3, #1
 800132e:	d12e      	bne.n	800138e <clock_fsm+0xbd2>
				lcd_Clear(BLACK);
 8001330:	2000      	movs	r0, #0
 8001332:	f001 f95d 	bl	80025f0 <lcd_Clear>
				updateRemindTime(displayDate, displayMonth, displayYear, displayDay, displayHour, displayMinute, displaySecond);
 8001336:	4b1d      	ldr	r3, [pc, #116]	@ (80013ac <clock_fsm+0xbf0>)
 8001338:	6818      	ldr	r0, [r3, #0]
 800133a:	4b1d      	ldr	r3, [pc, #116]	@ (80013b0 <clock_fsm+0xbf4>)
 800133c:	681c      	ldr	r4, [r3, #0]
 800133e:	4b1d      	ldr	r3, [pc, #116]	@ (80013b4 <clock_fsm+0xbf8>)
 8001340:	681d      	ldr	r5, [r3, #0]
 8001342:	4b1d      	ldr	r3, [pc, #116]	@ (80013b8 <clock_fsm+0xbfc>)
 8001344:	681e      	ldr	r6, [r3, #0]
 8001346:	4b1d      	ldr	r3, [pc, #116]	@ (80013bc <clock_fsm+0xc00>)
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	4a1d      	ldr	r2, [pc, #116]	@ (80013c0 <clock_fsm+0xc04>)
 800134c:	6812      	ldr	r2, [r2, #0]
 800134e:	4914      	ldr	r1, [pc, #80]	@ (80013a0 <clock_fsm+0xbe4>)
 8001350:	6809      	ldr	r1, [r1, #0]
 8001352:	9102      	str	r1, [sp, #8]
 8001354:	9201      	str	r2, [sp, #4]
 8001356:	9300      	str	r3, [sp, #0]
 8001358:	4633      	mov	r3, r6
 800135a:	462a      	mov	r2, r5
 800135c:	4621      	mov	r1, r4
 800135e:	f7ff f98b 	bl	8000678 <updateRemindTime>
				toggleVar = 0;
 8001362:	4b11      	ldr	r3, [pc, #68]	@ (80013a8 <clock_fsm+0xbec>)
 8001364:	2200      	movs	r2, #0
 8001366:	601a      	str	r2, [r3, #0]
				if(clockModifyState == SECOND){
 8001368:	4b0b      	ldr	r3, [pc, #44]	@ (8001398 <clock_fsm+0xbdc>)
 800136a:	781b      	ldrb	r3, [r3, #0]
 800136c:	2b06      	cmp	r3, #6
 800136e:	d103      	bne.n	8001378 <clock_fsm+0xbbc>
					clockModifyState = DATE;
 8001370:	4b09      	ldr	r3, [pc, #36]	@ (8001398 <clock_fsm+0xbdc>)
 8001372:	2200      	movs	r2, #0
 8001374:	701a      	strb	r2, [r3, #0]
		break;
 8001376:	e00a      	b.n	800138e <clock_fsm+0xbd2>
					++clockModifyState;
 8001378:	4b07      	ldr	r3, [pc, #28]	@ (8001398 <clock_fsm+0xbdc>)
 800137a:	781b      	ldrb	r3, [r3, #0]
 800137c:	3301      	adds	r3, #1
 800137e:	b2da      	uxtb	r2, r3
 8001380:	4b05      	ldr	r3, [pc, #20]	@ (8001398 <clock_fsm+0xbdc>)
 8001382:	701a      	strb	r2, [r3, #0]
		break;
 8001384:	e003      	b.n	800138e <clock_fsm+0xbd2>
	case REQUEST:

		break;
 8001386:	bf00      	nop
 8001388:	e002      	b.n	8001390 <clock_fsm+0xbd4>
		break;
 800138a:	bf00      	nop
 800138c:	e000      	b.n	8001390 <clock_fsm+0xbd4>
		break;
 800138e:	bf00      	nop
	}
}
 8001390:	bf00      	nop
 8001392:	370c      	adds	r7, #12
 8001394:	46bd      	mov	sp, r7
 8001396:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001398:	20000053 	.word	0x20000053
 800139c:	20000030 	.word	0x20000030
 80013a0:	20000070 	.word	0x20000070
 80013a4:	2000015e 	.word	0x2000015e
 80013a8:	20000090 	.word	0x20000090
 80013ac:	20000058 	.word	0x20000058
 80013b0:	2000005c 	.word	0x2000005c
 80013b4:	20000060 	.word	0x20000060
 80013b8:	20000064 	.word	0x20000064
 80013bc:	20000068 	.word	0x20000068
 80013c0:	2000006c 	.word	0x2000006c

080013c4 <displayNormalTime>:

#include "displayTime.h"

int toggleVar = 0;

void displayNormalTime(int date, int month, int year, int day, int hour, int minute, int second){
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b088      	sub	sp, #32
 80013c8:	af04      	add	r7, sp, #16
 80013ca:	60f8      	str	r0, [r7, #12]
 80013cc:	60b9      	str	r1, [r7, #8]
 80013ce:	607a      	str	r2, [r7, #4]
 80013d0:	603b      	str	r3, [r7, #0]

	lcd_ShowIntNum(70, 100, date, 2, GREEN, BLACK, 24);
 80013d2:	68fb      	ldr	r3, [r7, #12]
 80013d4:	b29a      	uxth	r2, r3
 80013d6:	2318      	movs	r3, #24
 80013d8:	9302      	str	r3, [sp, #8]
 80013da:	2300      	movs	r3, #0
 80013dc:	9301      	str	r3, [sp, #4]
 80013de:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 80013e2:	9300      	str	r3, [sp, #0]
 80013e4:	2302      	movs	r3, #2
 80013e6:	2164      	movs	r1, #100	@ 0x64
 80013e8:	2046      	movs	r0, #70	@ 0x46
 80013ea:	f001 fa3f 	bl	800286c <lcd_ShowIntNum>
	lcd_ShowChar(95, 100, '/', GREEN, BLACK, 24, 1);
 80013ee:	2301      	movs	r3, #1
 80013f0:	9302      	str	r3, [sp, #8]
 80013f2:	2318      	movs	r3, #24
 80013f4:	9301      	str	r3, [sp, #4]
 80013f6:	2300      	movs	r3, #0
 80013f8:	9300      	str	r3, [sp, #0]
 80013fa:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 80013fe:	222f      	movs	r2, #47	@ 0x2f
 8001400:	2164      	movs	r1, #100	@ 0x64
 8001402:	205f      	movs	r0, #95	@ 0x5f
 8001404:	f001 f946 	bl	8002694 <lcd_ShowChar>
	lcd_ShowIntNum(110, 100, month, 2, GREEN, BLACK, 24);
 8001408:	68bb      	ldr	r3, [r7, #8]
 800140a:	b29a      	uxth	r2, r3
 800140c:	2318      	movs	r3, #24
 800140e:	9302      	str	r3, [sp, #8]
 8001410:	2300      	movs	r3, #0
 8001412:	9301      	str	r3, [sp, #4]
 8001414:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8001418:	9300      	str	r3, [sp, #0]
 800141a:	2302      	movs	r3, #2
 800141c:	2164      	movs	r1, #100	@ 0x64
 800141e:	206e      	movs	r0, #110	@ 0x6e
 8001420:	f001 fa24 	bl	800286c <lcd_ShowIntNum>
	lcd_ShowChar(135, 100, '/', GREEN, BLACK, 24, 1);
 8001424:	2301      	movs	r3, #1
 8001426:	9302      	str	r3, [sp, #8]
 8001428:	2318      	movs	r3, #24
 800142a:	9301      	str	r3, [sp, #4]
 800142c:	2300      	movs	r3, #0
 800142e:	9300      	str	r3, [sp, #0]
 8001430:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8001434:	222f      	movs	r2, #47	@ 0x2f
 8001436:	2164      	movs	r1, #100	@ 0x64
 8001438:	2087      	movs	r0, #135	@ 0x87
 800143a:	f001 f92b 	bl	8002694 <lcd_ShowChar>
	lcd_ShowIntNum(150, 100, year, 2, GREEN, BLACK, 24);
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	b29a      	uxth	r2, r3
 8001442:	2318      	movs	r3, #24
 8001444:	9302      	str	r3, [sp, #8]
 8001446:	2300      	movs	r3, #0
 8001448:	9301      	str	r3, [sp, #4]
 800144a:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 800144e:	9300      	str	r3, [sp, #0]
 8001450:	2302      	movs	r3, #2
 8001452:	2164      	movs	r1, #100	@ 0x64
 8001454:	2096      	movs	r0, #150	@ 0x96
 8001456:	f001 fa09 	bl	800286c <lcd_ShowIntNum>

	lcd_ShowIntNum(110, 130, day, 2, YELLOW, BLACK, 24);
 800145a:	683b      	ldr	r3, [r7, #0]
 800145c:	b29a      	uxth	r2, r3
 800145e:	2318      	movs	r3, #24
 8001460:	9302      	str	r3, [sp, #8]
 8001462:	2300      	movs	r3, #0
 8001464:	9301      	str	r3, [sp, #4]
 8001466:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 800146a:	9300      	str	r3, [sp, #0]
 800146c:	2302      	movs	r3, #2
 800146e:	2182      	movs	r1, #130	@ 0x82
 8001470:	206e      	movs	r0, #110	@ 0x6e
 8001472:	f001 f9fb 	bl	800286c <lcd_ShowIntNum>

	lcd_ShowIntNum(70, 160, hour, 2, GREEN, BLACK, 24);
 8001476:	69bb      	ldr	r3, [r7, #24]
 8001478:	b29a      	uxth	r2, r3
 800147a:	2318      	movs	r3, #24
 800147c:	9302      	str	r3, [sp, #8]
 800147e:	2300      	movs	r3, #0
 8001480:	9301      	str	r3, [sp, #4]
 8001482:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8001486:	9300      	str	r3, [sp, #0]
 8001488:	2302      	movs	r3, #2
 800148a:	21a0      	movs	r1, #160	@ 0xa0
 800148c:	2046      	movs	r0, #70	@ 0x46
 800148e:	f001 f9ed 	bl	800286c <lcd_ShowIntNum>
	lcd_ShowChar(95, 160, ':', GREEN, BLACK, 24, 1);
 8001492:	2301      	movs	r3, #1
 8001494:	9302      	str	r3, [sp, #8]
 8001496:	2318      	movs	r3, #24
 8001498:	9301      	str	r3, [sp, #4]
 800149a:	2300      	movs	r3, #0
 800149c:	9300      	str	r3, [sp, #0]
 800149e:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 80014a2:	223a      	movs	r2, #58	@ 0x3a
 80014a4:	21a0      	movs	r1, #160	@ 0xa0
 80014a6:	205f      	movs	r0, #95	@ 0x5f
 80014a8:	f001 f8f4 	bl	8002694 <lcd_ShowChar>
	lcd_ShowIntNum(110, 160, minute, 2, GREEN, BLACK, 24);
 80014ac:	69fb      	ldr	r3, [r7, #28]
 80014ae:	b29a      	uxth	r2, r3
 80014b0:	2318      	movs	r3, #24
 80014b2:	9302      	str	r3, [sp, #8]
 80014b4:	2300      	movs	r3, #0
 80014b6:	9301      	str	r3, [sp, #4]
 80014b8:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 80014bc:	9300      	str	r3, [sp, #0]
 80014be:	2302      	movs	r3, #2
 80014c0:	21a0      	movs	r1, #160	@ 0xa0
 80014c2:	206e      	movs	r0, #110	@ 0x6e
 80014c4:	f001 f9d2 	bl	800286c <lcd_ShowIntNum>
	lcd_ShowChar(135, 160, ':', GREEN, BLACK, 24, 1);
 80014c8:	2301      	movs	r3, #1
 80014ca:	9302      	str	r3, [sp, #8]
 80014cc:	2318      	movs	r3, #24
 80014ce:	9301      	str	r3, [sp, #4]
 80014d0:	2300      	movs	r3, #0
 80014d2:	9300      	str	r3, [sp, #0]
 80014d4:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 80014d8:	223a      	movs	r2, #58	@ 0x3a
 80014da:	21a0      	movs	r1, #160	@ 0xa0
 80014dc:	2087      	movs	r0, #135	@ 0x87
 80014de:	f001 f8d9 	bl	8002694 <lcd_ShowChar>
	lcd_ShowIntNum(150, 160, second, 2, GREEN, BLACK, 24);
 80014e2:	6a3b      	ldr	r3, [r7, #32]
 80014e4:	b29a      	uxth	r2, r3
 80014e6:	2318      	movs	r3, #24
 80014e8:	9302      	str	r3, [sp, #8]
 80014ea:	2300      	movs	r3, #0
 80014ec:	9301      	str	r3, [sp, #4]
 80014ee:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 80014f2:	9300      	str	r3, [sp, #0]
 80014f4:	2302      	movs	r3, #2
 80014f6:	21a0      	movs	r1, #160	@ 0xa0
 80014f8:	2096      	movs	r0, #150	@ 0x96
 80014fa:	f001 f9b7 	bl	800286c <lcd_ShowIntNum>

}
 80014fe:	bf00      	nop
 8001500:	3710      	adds	r7, #16
 8001502:	46bd      	mov	sp, r7
 8001504:	bd80      	pop	{r7, pc}

08001506 <displayNoDateTime>:

void displayNoDateTime(int date, int month, int year, int day, int hour, int minute, int second){
 8001506:	b580      	push	{r7, lr}
 8001508:	b088      	sub	sp, #32
 800150a:	af04      	add	r7, sp, #16
 800150c:	60f8      	str	r0, [r7, #12]
 800150e:	60b9      	str	r1, [r7, #8]
 8001510:	607a      	str	r2, [r7, #4]
 8001512:	603b      	str	r3, [r7, #0]

	lcd_ShowIntNum(70, 100, date, 2, BLACK, BLACK, 24);
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	b29a      	uxth	r2, r3
 8001518:	2318      	movs	r3, #24
 800151a:	9302      	str	r3, [sp, #8]
 800151c:	2300      	movs	r3, #0
 800151e:	9301      	str	r3, [sp, #4]
 8001520:	2300      	movs	r3, #0
 8001522:	9300      	str	r3, [sp, #0]
 8001524:	2302      	movs	r3, #2
 8001526:	2164      	movs	r1, #100	@ 0x64
 8001528:	2046      	movs	r0, #70	@ 0x46
 800152a:	f001 f99f 	bl	800286c <lcd_ShowIntNum>
	lcd_ShowChar(95, 100, '/', GREEN, BLACK, 24, 1);
 800152e:	2301      	movs	r3, #1
 8001530:	9302      	str	r3, [sp, #8]
 8001532:	2318      	movs	r3, #24
 8001534:	9301      	str	r3, [sp, #4]
 8001536:	2300      	movs	r3, #0
 8001538:	9300      	str	r3, [sp, #0]
 800153a:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 800153e:	222f      	movs	r2, #47	@ 0x2f
 8001540:	2164      	movs	r1, #100	@ 0x64
 8001542:	205f      	movs	r0, #95	@ 0x5f
 8001544:	f001 f8a6 	bl	8002694 <lcd_ShowChar>
	lcd_ShowIntNum(110, 100, month, 2, GREEN, BLACK, 24);
 8001548:	68bb      	ldr	r3, [r7, #8]
 800154a:	b29a      	uxth	r2, r3
 800154c:	2318      	movs	r3, #24
 800154e:	9302      	str	r3, [sp, #8]
 8001550:	2300      	movs	r3, #0
 8001552:	9301      	str	r3, [sp, #4]
 8001554:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8001558:	9300      	str	r3, [sp, #0]
 800155a:	2302      	movs	r3, #2
 800155c:	2164      	movs	r1, #100	@ 0x64
 800155e:	206e      	movs	r0, #110	@ 0x6e
 8001560:	f001 f984 	bl	800286c <lcd_ShowIntNum>
	lcd_ShowChar(135, 100, '/', GREEN, BLACK, 24, 1);
 8001564:	2301      	movs	r3, #1
 8001566:	9302      	str	r3, [sp, #8]
 8001568:	2318      	movs	r3, #24
 800156a:	9301      	str	r3, [sp, #4]
 800156c:	2300      	movs	r3, #0
 800156e:	9300      	str	r3, [sp, #0]
 8001570:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8001574:	222f      	movs	r2, #47	@ 0x2f
 8001576:	2164      	movs	r1, #100	@ 0x64
 8001578:	2087      	movs	r0, #135	@ 0x87
 800157a:	f001 f88b 	bl	8002694 <lcd_ShowChar>
	lcd_ShowIntNum(150, 100, year, 2, GREEN, BLACK, 24);
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	b29a      	uxth	r2, r3
 8001582:	2318      	movs	r3, #24
 8001584:	9302      	str	r3, [sp, #8]
 8001586:	2300      	movs	r3, #0
 8001588:	9301      	str	r3, [sp, #4]
 800158a:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 800158e:	9300      	str	r3, [sp, #0]
 8001590:	2302      	movs	r3, #2
 8001592:	2164      	movs	r1, #100	@ 0x64
 8001594:	2096      	movs	r0, #150	@ 0x96
 8001596:	f001 f969 	bl	800286c <lcd_ShowIntNum>

	lcd_ShowIntNum(110, 130, day, 2, YELLOW, BLACK, 24);
 800159a:	683b      	ldr	r3, [r7, #0]
 800159c:	b29a      	uxth	r2, r3
 800159e:	2318      	movs	r3, #24
 80015a0:	9302      	str	r3, [sp, #8]
 80015a2:	2300      	movs	r3, #0
 80015a4:	9301      	str	r3, [sp, #4]
 80015a6:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 80015aa:	9300      	str	r3, [sp, #0]
 80015ac:	2302      	movs	r3, #2
 80015ae:	2182      	movs	r1, #130	@ 0x82
 80015b0:	206e      	movs	r0, #110	@ 0x6e
 80015b2:	f001 f95b 	bl	800286c <lcd_ShowIntNum>

	lcd_ShowIntNum(70, 160, hour, 2, GREEN, BLACK, 24);
 80015b6:	69bb      	ldr	r3, [r7, #24]
 80015b8:	b29a      	uxth	r2, r3
 80015ba:	2318      	movs	r3, #24
 80015bc:	9302      	str	r3, [sp, #8]
 80015be:	2300      	movs	r3, #0
 80015c0:	9301      	str	r3, [sp, #4]
 80015c2:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 80015c6:	9300      	str	r3, [sp, #0]
 80015c8:	2302      	movs	r3, #2
 80015ca:	21a0      	movs	r1, #160	@ 0xa0
 80015cc:	2046      	movs	r0, #70	@ 0x46
 80015ce:	f001 f94d 	bl	800286c <lcd_ShowIntNum>
	lcd_ShowChar(95, 160, ':', GREEN, BLACK, 24, 1);
 80015d2:	2301      	movs	r3, #1
 80015d4:	9302      	str	r3, [sp, #8]
 80015d6:	2318      	movs	r3, #24
 80015d8:	9301      	str	r3, [sp, #4]
 80015da:	2300      	movs	r3, #0
 80015dc:	9300      	str	r3, [sp, #0]
 80015de:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 80015e2:	223a      	movs	r2, #58	@ 0x3a
 80015e4:	21a0      	movs	r1, #160	@ 0xa0
 80015e6:	205f      	movs	r0, #95	@ 0x5f
 80015e8:	f001 f854 	bl	8002694 <lcd_ShowChar>
	lcd_ShowIntNum(110, 160, minute, 2, GREEN, BLACK, 24);
 80015ec:	69fb      	ldr	r3, [r7, #28]
 80015ee:	b29a      	uxth	r2, r3
 80015f0:	2318      	movs	r3, #24
 80015f2:	9302      	str	r3, [sp, #8]
 80015f4:	2300      	movs	r3, #0
 80015f6:	9301      	str	r3, [sp, #4]
 80015f8:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 80015fc:	9300      	str	r3, [sp, #0]
 80015fe:	2302      	movs	r3, #2
 8001600:	21a0      	movs	r1, #160	@ 0xa0
 8001602:	206e      	movs	r0, #110	@ 0x6e
 8001604:	f001 f932 	bl	800286c <lcd_ShowIntNum>
	lcd_ShowChar(135, 160, ':', GREEN, BLACK, 24, 1);
 8001608:	2301      	movs	r3, #1
 800160a:	9302      	str	r3, [sp, #8]
 800160c:	2318      	movs	r3, #24
 800160e:	9301      	str	r3, [sp, #4]
 8001610:	2300      	movs	r3, #0
 8001612:	9300      	str	r3, [sp, #0]
 8001614:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8001618:	223a      	movs	r2, #58	@ 0x3a
 800161a:	21a0      	movs	r1, #160	@ 0xa0
 800161c:	2087      	movs	r0, #135	@ 0x87
 800161e:	f001 f839 	bl	8002694 <lcd_ShowChar>
	lcd_ShowIntNum(150, 160, second, 2, GREEN, BLACK, 24);
 8001622:	6a3b      	ldr	r3, [r7, #32]
 8001624:	b29a      	uxth	r2, r3
 8001626:	2318      	movs	r3, #24
 8001628:	9302      	str	r3, [sp, #8]
 800162a:	2300      	movs	r3, #0
 800162c:	9301      	str	r3, [sp, #4]
 800162e:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8001632:	9300      	str	r3, [sp, #0]
 8001634:	2302      	movs	r3, #2
 8001636:	21a0      	movs	r1, #160	@ 0xa0
 8001638:	2096      	movs	r0, #150	@ 0x96
 800163a:	f001 f917 	bl	800286c <lcd_ShowIntNum>

}
 800163e:	bf00      	nop
 8001640:	3710      	adds	r7, #16
 8001642:	46bd      	mov	sp, r7
 8001644:	bd80      	pop	{r7, pc}

08001646 <displayNoMonthTime>:

void displayNoMonthTime(int date, int month, int year, int day, int hour, int minute, int second){
 8001646:	b580      	push	{r7, lr}
 8001648:	b088      	sub	sp, #32
 800164a:	af04      	add	r7, sp, #16
 800164c:	60f8      	str	r0, [r7, #12]
 800164e:	60b9      	str	r1, [r7, #8]
 8001650:	607a      	str	r2, [r7, #4]
 8001652:	603b      	str	r3, [r7, #0]

	lcd_ShowIntNum(70, 100, date, 2, GREEN, BLACK, 24);
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	b29a      	uxth	r2, r3
 8001658:	2318      	movs	r3, #24
 800165a:	9302      	str	r3, [sp, #8]
 800165c:	2300      	movs	r3, #0
 800165e:	9301      	str	r3, [sp, #4]
 8001660:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8001664:	9300      	str	r3, [sp, #0]
 8001666:	2302      	movs	r3, #2
 8001668:	2164      	movs	r1, #100	@ 0x64
 800166a:	2046      	movs	r0, #70	@ 0x46
 800166c:	f001 f8fe 	bl	800286c <lcd_ShowIntNum>
	lcd_ShowChar(95, 100, '/', GREEN, BLACK, 24, 1);
 8001670:	2301      	movs	r3, #1
 8001672:	9302      	str	r3, [sp, #8]
 8001674:	2318      	movs	r3, #24
 8001676:	9301      	str	r3, [sp, #4]
 8001678:	2300      	movs	r3, #0
 800167a:	9300      	str	r3, [sp, #0]
 800167c:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8001680:	222f      	movs	r2, #47	@ 0x2f
 8001682:	2164      	movs	r1, #100	@ 0x64
 8001684:	205f      	movs	r0, #95	@ 0x5f
 8001686:	f001 f805 	bl	8002694 <lcd_ShowChar>
	lcd_ShowIntNum(110, 100, month, 2, BLACK, BLACK, 24);
 800168a:	68bb      	ldr	r3, [r7, #8]
 800168c:	b29a      	uxth	r2, r3
 800168e:	2318      	movs	r3, #24
 8001690:	9302      	str	r3, [sp, #8]
 8001692:	2300      	movs	r3, #0
 8001694:	9301      	str	r3, [sp, #4]
 8001696:	2300      	movs	r3, #0
 8001698:	9300      	str	r3, [sp, #0]
 800169a:	2302      	movs	r3, #2
 800169c:	2164      	movs	r1, #100	@ 0x64
 800169e:	206e      	movs	r0, #110	@ 0x6e
 80016a0:	f001 f8e4 	bl	800286c <lcd_ShowIntNum>
	lcd_ShowChar(135, 100, '/', GREEN, BLACK, 24, 1);
 80016a4:	2301      	movs	r3, #1
 80016a6:	9302      	str	r3, [sp, #8]
 80016a8:	2318      	movs	r3, #24
 80016aa:	9301      	str	r3, [sp, #4]
 80016ac:	2300      	movs	r3, #0
 80016ae:	9300      	str	r3, [sp, #0]
 80016b0:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 80016b4:	222f      	movs	r2, #47	@ 0x2f
 80016b6:	2164      	movs	r1, #100	@ 0x64
 80016b8:	2087      	movs	r0, #135	@ 0x87
 80016ba:	f000 ffeb 	bl	8002694 <lcd_ShowChar>
	lcd_ShowIntNum(150, 100, year, 2, GREEN, BLACK, 24);
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	b29a      	uxth	r2, r3
 80016c2:	2318      	movs	r3, #24
 80016c4:	9302      	str	r3, [sp, #8]
 80016c6:	2300      	movs	r3, #0
 80016c8:	9301      	str	r3, [sp, #4]
 80016ca:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 80016ce:	9300      	str	r3, [sp, #0]
 80016d0:	2302      	movs	r3, #2
 80016d2:	2164      	movs	r1, #100	@ 0x64
 80016d4:	2096      	movs	r0, #150	@ 0x96
 80016d6:	f001 f8c9 	bl	800286c <lcd_ShowIntNum>

	lcd_ShowIntNum(110, 130, day, 2, YELLOW, BLACK, 24);
 80016da:	683b      	ldr	r3, [r7, #0]
 80016dc:	b29a      	uxth	r2, r3
 80016de:	2318      	movs	r3, #24
 80016e0:	9302      	str	r3, [sp, #8]
 80016e2:	2300      	movs	r3, #0
 80016e4:	9301      	str	r3, [sp, #4]
 80016e6:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 80016ea:	9300      	str	r3, [sp, #0]
 80016ec:	2302      	movs	r3, #2
 80016ee:	2182      	movs	r1, #130	@ 0x82
 80016f0:	206e      	movs	r0, #110	@ 0x6e
 80016f2:	f001 f8bb 	bl	800286c <lcd_ShowIntNum>

	lcd_ShowIntNum(70, 160, hour, 2, GREEN, BLACK, 24);
 80016f6:	69bb      	ldr	r3, [r7, #24]
 80016f8:	b29a      	uxth	r2, r3
 80016fa:	2318      	movs	r3, #24
 80016fc:	9302      	str	r3, [sp, #8]
 80016fe:	2300      	movs	r3, #0
 8001700:	9301      	str	r3, [sp, #4]
 8001702:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8001706:	9300      	str	r3, [sp, #0]
 8001708:	2302      	movs	r3, #2
 800170a:	21a0      	movs	r1, #160	@ 0xa0
 800170c:	2046      	movs	r0, #70	@ 0x46
 800170e:	f001 f8ad 	bl	800286c <lcd_ShowIntNum>
	lcd_ShowChar(95, 160, ':', GREEN, BLACK, 24, 1);
 8001712:	2301      	movs	r3, #1
 8001714:	9302      	str	r3, [sp, #8]
 8001716:	2318      	movs	r3, #24
 8001718:	9301      	str	r3, [sp, #4]
 800171a:	2300      	movs	r3, #0
 800171c:	9300      	str	r3, [sp, #0]
 800171e:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8001722:	223a      	movs	r2, #58	@ 0x3a
 8001724:	21a0      	movs	r1, #160	@ 0xa0
 8001726:	205f      	movs	r0, #95	@ 0x5f
 8001728:	f000 ffb4 	bl	8002694 <lcd_ShowChar>
	lcd_ShowIntNum(110, 160, minute, 2, GREEN, BLACK, 24);
 800172c:	69fb      	ldr	r3, [r7, #28]
 800172e:	b29a      	uxth	r2, r3
 8001730:	2318      	movs	r3, #24
 8001732:	9302      	str	r3, [sp, #8]
 8001734:	2300      	movs	r3, #0
 8001736:	9301      	str	r3, [sp, #4]
 8001738:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 800173c:	9300      	str	r3, [sp, #0]
 800173e:	2302      	movs	r3, #2
 8001740:	21a0      	movs	r1, #160	@ 0xa0
 8001742:	206e      	movs	r0, #110	@ 0x6e
 8001744:	f001 f892 	bl	800286c <lcd_ShowIntNum>
	lcd_ShowChar(135, 160, ':', GREEN, BLACK, 24, 1);
 8001748:	2301      	movs	r3, #1
 800174a:	9302      	str	r3, [sp, #8]
 800174c:	2318      	movs	r3, #24
 800174e:	9301      	str	r3, [sp, #4]
 8001750:	2300      	movs	r3, #0
 8001752:	9300      	str	r3, [sp, #0]
 8001754:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8001758:	223a      	movs	r2, #58	@ 0x3a
 800175a:	21a0      	movs	r1, #160	@ 0xa0
 800175c:	2087      	movs	r0, #135	@ 0x87
 800175e:	f000 ff99 	bl	8002694 <lcd_ShowChar>
	lcd_ShowIntNum(150, 160, second, 2, GREEN, BLACK, 24);
 8001762:	6a3b      	ldr	r3, [r7, #32]
 8001764:	b29a      	uxth	r2, r3
 8001766:	2318      	movs	r3, #24
 8001768:	9302      	str	r3, [sp, #8]
 800176a:	2300      	movs	r3, #0
 800176c:	9301      	str	r3, [sp, #4]
 800176e:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8001772:	9300      	str	r3, [sp, #0]
 8001774:	2302      	movs	r3, #2
 8001776:	21a0      	movs	r1, #160	@ 0xa0
 8001778:	2096      	movs	r0, #150	@ 0x96
 800177a:	f001 f877 	bl	800286c <lcd_ShowIntNum>

}
 800177e:	bf00      	nop
 8001780:	3710      	adds	r7, #16
 8001782:	46bd      	mov	sp, r7
 8001784:	bd80      	pop	{r7, pc}

08001786 <displayNoYearTime>:

void displayNoYearTime(int date, int month, int year, int day, int hour, int minute, int second){
 8001786:	b580      	push	{r7, lr}
 8001788:	b088      	sub	sp, #32
 800178a:	af04      	add	r7, sp, #16
 800178c:	60f8      	str	r0, [r7, #12]
 800178e:	60b9      	str	r1, [r7, #8]
 8001790:	607a      	str	r2, [r7, #4]
 8001792:	603b      	str	r3, [r7, #0]

	lcd_ShowIntNum(70, 100, date, 2, GREEN, BLACK, 24);
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	b29a      	uxth	r2, r3
 8001798:	2318      	movs	r3, #24
 800179a:	9302      	str	r3, [sp, #8]
 800179c:	2300      	movs	r3, #0
 800179e:	9301      	str	r3, [sp, #4]
 80017a0:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 80017a4:	9300      	str	r3, [sp, #0]
 80017a6:	2302      	movs	r3, #2
 80017a8:	2164      	movs	r1, #100	@ 0x64
 80017aa:	2046      	movs	r0, #70	@ 0x46
 80017ac:	f001 f85e 	bl	800286c <lcd_ShowIntNum>
	lcd_ShowChar(95, 100, '/', GREEN, BLACK, 24, 1);
 80017b0:	2301      	movs	r3, #1
 80017b2:	9302      	str	r3, [sp, #8]
 80017b4:	2318      	movs	r3, #24
 80017b6:	9301      	str	r3, [sp, #4]
 80017b8:	2300      	movs	r3, #0
 80017ba:	9300      	str	r3, [sp, #0]
 80017bc:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 80017c0:	222f      	movs	r2, #47	@ 0x2f
 80017c2:	2164      	movs	r1, #100	@ 0x64
 80017c4:	205f      	movs	r0, #95	@ 0x5f
 80017c6:	f000 ff65 	bl	8002694 <lcd_ShowChar>
	lcd_ShowIntNum(110, 100, month, 2, GREEN, BLACK, 24);
 80017ca:	68bb      	ldr	r3, [r7, #8]
 80017cc:	b29a      	uxth	r2, r3
 80017ce:	2318      	movs	r3, #24
 80017d0:	9302      	str	r3, [sp, #8]
 80017d2:	2300      	movs	r3, #0
 80017d4:	9301      	str	r3, [sp, #4]
 80017d6:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 80017da:	9300      	str	r3, [sp, #0]
 80017dc:	2302      	movs	r3, #2
 80017de:	2164      	movs	r1, #100	@ 0x64
 80017e0:	206e      	movs	r0, #110	@ 0x6e
 80017e2:	f001 f843 	bl	800286c <lcd_ShowIntNum>
	lcd_ShowChar(135, 100, '/', GREEN, BLACK, 24, 1);
 80017e6:	2301      	movs	r3, #1
 80017e8:	9302      	str	r3, [sp, #8]
 80017ea:	2318      	movs	r3, #24
 80017ec:	9301      	str	r3, [sp, #4]
 80017ee:	2300      	movs	r3, #0
 80017f0:	9300      	str	r3, [sp, #0]
 80017f2:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 80017f6:	222f      	movs	r2, #47	@ 0x2f
 80017f8:	2164      	movs	r1, #100	@ 0x64
 80017fa:	2087      	movs	r0, #135	@ 0x87
 80017fc:	f000 ff4a 	bl	8002694 <lcd_ShowChar>
	lcd_ShowIntNum(150, 100, year, 2, BLACK, BLACK, 24);
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	b29a      	uxth	r2, r3
 8001804:	2318      	movs	r3, #24
 8001806:	9302      	str	r3, [sp, #8]
 8001808:	2300      	movs	r3, #0
 800180a:	9301      	str	r3, [sp, #4]
 800180c:	2300      	movs	r3, #0
 800180e:	9300      	str	r3, [sp, #0]
 8001810:	2302      	movs	r3, #2
 8001812:	2164      	movs	r1, #100	@ 0x64
 8001814:	2096      	movs	r0, #150	@ 0x96
 8001816:	f001 f829 	bl	800286c <lcd_ShowIntNum>

	lcd_ShowIntNum(110, 130, day, 2, YELLOW, BLACK, 24);
 800181a:	683b      	ldr	r3, [r7, #0]
 800181c:	b29a      	uxth	r2, r3
 800181e:	2318      	movs	r3, #24
 8001820:	9302      	str	r3, [sp, #8]
 8001822:	2300      	movs	r3, #0
 8001824:	9301      	str	r3, [sp, #4]
 8001826:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 800182a:	9300      	str	r3, [sp, #0]
 800182c:	2302      	movs	r3, #2
 800182e:	2182      	movs	r1, #130	@ 0x82
 8001830:	206e      	movs	r0, #110	@ 0x6e
 8001832:	f001 f81b 	bl	800286c <lcd_ShowIntNum>

	lcd_ShowIntNum(70, 160, hour, 2, GREEN, BLACK, 24);
 8001836:	69bb      	ldr	r3, [r7, #24]
 8001838:	b29a      	uxth	r2, r3
 800183a:	2318      	movs	r3, #24
 800183c:	9302      	str	r3, [sp, #8]
 800183e:	2300      	movs	r3, #0
 8001840:	9301      	str	r3, [sp, #4]
 8001842:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8001846:	9300      	str	r3, [sp, #0]
 8001848:	2302      	movs	r3, #2
 800184a:	21a0      	movs	r1, #160	@ 0xa0
 800184c:	2046      	movs	r0, #70	@ 0x46
 800184e:	f001 f80d 	bl	800286c <lcd_ShowIntNum>
	lcd_ShowChar(95, 160, ':', GREEN, BLACK, 24, 1);
 8001852:	2301      	movs	r3, #1
 8001854:	9302      	str	r3, [sp, #8]
 8001856:	2318      	movs	r3, #24
 8001858:	9301      	str	r3, [sp, #4]
 800185a:	2300      	movs	r3, #0
 800185c:	9300      	str	r3, [sp, #0]
 800185e:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8001862:	223a      	movs	r2, #58	@ 0x3a
 8001864:	21a0      	movs	r1, #160	@ 0xa0
 8001866:	205f      	movs	r0, #95	@ 0x5f
 8001868:	f000 ff14 	bl	8002694 <lcd_ShowChar>
	lcd_ShowIntNum(110, 160, minute, 2, GREEN, BLACK, 24);
 800186c:	69fb      	ldr	r3, [r7, #28]
 800186e:	b29a      	uxth	r2, r3
 8001870:	2318      	movs	r3, #24
 8001872:	9302      	str	r3, [sp, #8]
 8001874:	2300      	movs	r3, #0
 8001876:	9301      	str	r3, [sp, #4]
 8001878:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 800187c:	9300      	str	r3, [sp, #0]
 800187e:	2302      	movs	r3, #2
 8001880:	21a0      	movs	r1, #160	@ 0xa0
 8001882:	206e      	movs	r0, #110	@ 0x6e
 8001884:	f000 fff2 	bl	800286c <lcd_ShowIntNum>
	lcd_ShowChar(135, 160, ':', GREEN, BLACK, 24, 1);
 8001888:	2301      	movs	r3, #1
 800188a:	9302      	str	r3, [sp, #8]
 800188c:	2318      	movs	r3, #24
 800188e:	9301      	str	r3, [sp, #4]
 8001890:	2300      	movs	r3, #0
 8001892:	9300      	str	r3, [sp, #0]
 8001894:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8001898:	223a      	movs	r2, #58	@ 0x3a
 800189a:	21a0      	movs	r1, #160	@ 0xa0
 800189c:	2087      	movs	r0, #135	@ 0x87
 800189e:	f000 fef9 	bl	8002694 <lcd_ShowChar>
	lcd_ShowIntNum(150, 160, second, 2, GREEN, BLACK, 24);
 80018a2:	6a3b      	ldr	r3, [r7, #32]
 80018a4:	b29a      	uxth	r2, r3
 80018a6:	2318      	movs	r3, #24
 80018a8:	9302      	str	r3, [sp, #8]
 80018aa:	2300      	movs	r3, #0
 80018ac:	9301      	str	r3, [sp, #4]
 80018ae:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 80018b2:	9300      	str	r3, [sp, #0]
 80018b4:	2302      	movs	r3, #2
 80018b6:	21a0      	movs	r1, #160	@ 0xa0
 80018b8:	2096      	movs	r0, #150	@ 0x96
 80018ba:	f000 ffd7 	bl	800286c <lcd_ShowIntNum>

}
 80018be:	bf00      	nop
 80018c0:	3710      	adds	r7, #16
 80018c2:	46bd      	mov	sp, r7
 80018c4:	bd80      	pop	{r7, pc}

080018c6 <displayNoDayTime>:

void displayNoDayTime(int date, int month, int year, int day, int hour, int minute, int second){
 80018c6:	b580      	push	{r7, lr}
 80018c8:	b088      	sub	sp, #32
 80018ca:	af04      	add	r7, sp, #16
 80018cc:	60f8      	str	r0, [r7, #12]
 80018ce:	60b9      	str	r1, [r7, #8]
 80018d0:	607a      	str	r2, [r7, #4]
 80018d2:	603b      	str	r3, [r7, #0]

	lcd_ShowIntNum(70, 100, date, 2, GREEN, BLACK, 24);
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	b29a      	uxth	r2, r3
 80018d8:	2318      	movs	r3, #24
 80018da:	9302      	str	r3, [sp, #8]
 80018dc:	2300      	movs	r3, #0
 80018de:	9301      	str	r3, [sp, #4]
 80018e0:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 80018e4:	9300      	str	r3, [sp, #0]
 80018e6:	2302      	movs	r3, #2
 80018e8:	2164      	movs	r1, #100	@ 0x64
 80018ea:	2046      	movs	r0, #70	@ 0x46
 80018ec:	f000 ffbe 	bl	800286c <lcd_ShowIntNum>
	lcd_ShowChar(95, 100, '/', GREEN, BLACK, 24, 1);
 80018f0:	2301      	movs	r3, #1
 80018f2:	9302      	str	r3, [sp, #8]
 80018f4:	2318      	movs	r3, #24
 80018f6:	9301      	str	r3, [sp, #4]
 80018f8:	2300      	movs	r3, #0
 80018fa:	9300      	str	r3, [sp, #0]
 80018fc:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8001900:	222f      	movs	r2, #47	@ 0x2f
 8001902:	2164      	movs	r1, #100	@ 0x64
 8001904:	205f      	movs	r0, #95	@ 0x5f
 8001906:	f000 fec5 	bl	8002694 <lcd_ShowChar>
	lcd_ShowIntNum(110, 100, month, 2, GREEN, BLACK, 24);
 800190a:	68bb      	ldr	r3, [r7, #8]
 800190c:	b29a      	uxth	r2, r3
 800190e:	2318      	movs	r3, #24
 8001910:	9302      	str	r3, [sp, #8]
 8001912:	2300      	movs	r3, #0
 8001914:	9301      	str	r3, [sp, #4]
 8001916:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 800191a:	9300      	str	r3, [sp, #0]
 800191c:	2302      	movs	r3, #2
 800191e:	2164      	movs	r1, #100	@ 0x64
 8001920:	206e      	movs	r0, #110	@ 0x6e
 8001922:	f000 ffa3 	bl	800286c <lcd_ShowIntNum>
	lcd_ShowChar(135, 100, '/', GREEN, BLACK, 24, 1);
 8001926:	2301      	movs	r3, #1
 8001928:	9302      	str	r3, [sp, #8]
 800192a:	2318      	movs	r3, #24
 800192c:	9301      	str	r3, [sp, #4]
 800192e:	2300      	movs	r3, #0
 8001930:	9300      	str	r3, [sp, #0]
 8001932:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8001936:	222f      	movs	r2, #47	@ 0x2f
 8001938:	2164      	movs	r1, #100	@ 0x64
 800193a:	2087      	movs	r0, #135	@ 0x87
 800193c:	f000 feaa 	bl	8002694 <lcd_ShowChar>
	lcd_ShowIntNum(150, 100, year, 2, GREEN, BLACK, 24);
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	b29a      	uxth	r2, r3
 8001944:	2318      	movs	r3, #24
 8001946:	9302      	str	r3, [sp, #8]
 8001948:	2300      	movs	r3, #0
 800194a:	9301      	str	r3, [sp, #4]
 800194c:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8001950:	9300      	str	r3, [sp, #0]
 8001952:	2302      	movs	r3, #2
 8001954:	2164      	movs	r1, #100	@ 0x64
 8001956:	2096      	movs	r0, #150	@ 0x96
 8001958:	f000 ff88 	bl	800286c <lcd_ShowIntNum>

	lcd_ShowIntNum(110, 130, day, 2, BLACK, BLACK, 24);
 800195c:	683b      	ldr	r3, [r7, #0]
 800195e:	b29a      	uxth	r2, r3
 8001960:	2318      	movs	r3, #24
 8001962:	9302      	str	r3, [sp, #8]
 8001964:	2300      	movs	r3, #0
 8001966:	9301      	str	r3, [sp, #4]
 8001968:	2300      	movs	r3, #0
 800196a:	9300      	str	r3, [sp, #0]
 800196c:	2302      	movs	r3, #2
 800196e:	2182      	movs	r1, #130	@ 0x82
 8001970:	206e      	movs	r0, #110	@ 0x6e
 8001972:	f000 ff7b 	bl	800286c <lcd_ShowIntNum>

	lcd_ShowIntNum(70, 160, hour, 2, GREEN, BLACK, 24);
 8001976:	69bb      	ldr	r3, [r7, #24]
 8001978:	b29a      	uxth	r2, r3
 800197a:	2318      	movs	r3, #24
 800197c:	9302      	str	r3, [sp, #8]
 800197e:	2300      	movs	r3, #0
 8001980:	9301      	str	r3, [sp, #4]
 8001982:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8001986:	9300      	str	r3, [sp, #0]
 8001988:	2302      	movs	r3, #2
 800198a:	21a0      	movs	r1, #160	@ 0xa0
 800198c:	2046      	movs	r0, #70	@ 0x46
 800198e:	f000 ff6d 	bl	800286c <lcd_ShowIntNum>
	lcd_ShowChar(95, 160, ':', GREEN, BLACK, 24, 1);
 8001992:	2301      	movs	r3, #1
 8001994:	9302      	str	r3, [sp, #8]
 8001996:	2318      	movs	r3, #24
 8001998:	9301      	str	r3, [sp, #4]
 800199a:	2300      	movs	r3, #0
 800199c:	9300      	str	r3, [sp, #0]
 800199e:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 80019a2:	223a      	movs	r2, #58	@ 0x3a
 80019a4:	21a0      	movs	r1, #160	@ 0xa0
 80019a6:	205f      	movs	r0, #95	@ 0x5f
 80019a8:	f000 fe74 	bl	8002694 <lcd_ShowChar>
	lcd_ShowIntNum(110, 160, minute, 2, GREEN, BLACK, 24);
 80019ac:	69fb      	ldr	r3, [r7, #28]
 80019ae:	b29a      	uxth	r2, r3
 80019b0:	2318      	movs	r3, #24
 80019b2:	9302      	str	r3, [sp, #8]
 80019b4:	2300      	movs	r3, #0
 80019b6:	9301      	str	r3, [sp, #4]
 80019b8:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 80019bc:	9300      	str	r3, [sp, #0]
 80019be:	2302      	movs	r3, #2
 80019c0:	21a0      	movs	r1, #160	@ 0xa0
 80019c2:	206e      	movs	r0, #110	@ 0x6e
 80019c4:	f000 ff52 	bl	800286c <lcd_ShowIntNum>
	lcd_ShowChar(135, 160, ':', GREEN, BLACK, 24, 1);
 80019c8:	2301      	movs	r3, #1
 80019ca:	9302      	str	r3, [sp, #8]
 80019cc:	2318      	movs	r3, #24
 80019ce:	9301      	str	r3, [sp, #4]
 80019d0:	2300      	movs	r3, #0
 80019d2:	9300      	str	r3, [sp, #0]
 80019d4:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 80019d8:	223a      	movs	r2, #58	@ 0x3a
 80019da:	21a0      	movs	r1, #160	@ 0xa0
 80019dc:	2087      	movs	r0, #135	@ 0x87
 80019de:	f000 fe59 	bl	8002694 <lcd_ShowChar>
	lcd_ShowIntNum(150, 160, second, 2, GREEN, BLACK, 24);
 80019e2:	6a3b      	ldr	r3, [r7, #32]
 80019e4:	b29a      	uxth	r2, r3
 80019e6:	2318      	movs	r3, #24
 80019e8:	9302      	str	r3, [sp, #8]
 80019ea:	2300      	movs	r3, #0
 80019ec:	9301      	str	r3, [sp, #4]
 80019ee:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 80019f2:	9300      	str	r3, [sp, #0]
 80019f4:	2302      	movs	r3, #2
 80019f6:	21a0      	movs	r1, #160	@ 0xa0
 80019f8:	2096      	movs	r0, #150	@ 0x96
 80019fa:	f000 ff37 	bl	800286c <lcd_ShowIntNum>

}
 80019fe:	bf00      	nop
 8001a00:	3710      	adds	r7, #16
 8001a02:	46bd      	mov	sp, r7
 8001a04:	bd80      	pop	{r7, pc}

08001a06 <displayNoHourTime>:

void displayNoHourTime(int date, int month, int year, int day, int hour, int minute, int second){
 8001a06:	b580      	push	{r7, lr}
 8001a08:	b088      	sub	sp, #32
 8001a0a:	af04      	add	r7, sp, #16
 8001a0c:	60f8      	str	r0, [r7, #12]
 8001a0e:	60b9      	str	r1, [r7, #8]
 8001a10:	607a      	str	r2, [r7, #4]
 8001a12:	603b      	str	r3, [r7, #0]

	lcd_ShowIntNum(70, 100, date, 2, GREEN, BLACK, 24);
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	b29a      	uxth	r2, r3
 8001a18:	2318      	movs	r3, #24
 8001a1a:	9302      	str	r3, [sp, #8]
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	9301      	str	r3, [sp, #4]
 8001a20:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8001a24:	9300      	str	r3, [sp, #0]
 8001a26:	2302      	movs	r3, #2
 8001a28:	2164      	movs	r1, #100	@ 0x64
 8001a2a:	2046      	movs	r0, #70	@ 0x46
 8001a2c:	f000 ff1e 	bl	800286c <lcd_ShowIntNum>
	lcd_ShowChar(95, 100, '/', GREEN, BLACK, 24, 1);
 8001a30:	2301      	movs	r3, #1
 8001a32:	9302      	str	r3, [sp, #8]
 8001a34:	2318      	movs	r3, #24
 8001a36:	9301      	str	r3, [sp, #4]
 8001a38:	2300      	movs	r3, #0
 8001a3a:	9300      	str	r3, [sp, #0]
 8001a3c:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8001a40:	222f      	movs	r2, #47	@ 0x2f
 8001a42:	2164      	movs	r1, #100	@ 0x64
 8001a44:	205f      	movs	r0, #95	@ 0x5f
 8001a46:	f000 fe25 	bl	8002694 <lcd_ShowChar>
	lcd_ShowIntNum(110, 100, month, 2, GREEN, BLACK, 24);
 8001a4a:	68bb      	ldr	r3, [r7, #8]
 8001a4c:	b29a      	uxth	r2, r3
 8001a4e:	2318      	movs	r3, #24
 8001a50:	9302      	str	r3, [sp, #8]
 8001a52:	2300      	movs	r3, #0
 8001a54:	9301      	str	r3, [sp, #4]
 8001a56:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8001a5a:	9300      	str	r3, [sp, #0]
 8001a5c:	2302      	movs	r3, #2
 8001a5e:	2164      	movs	r1, #100	@ 0x64
 8001a60:	206e      	movs	r0, #110	@ 0x6e
 8001a62:	f000 ff03 	bl	800286c <lcd_ShowIntNum>
	lcd_ShowChar(135, 100, '/', GREEN, BLACK, 24, 1);
 8001a66:	2301      	movs	r3, #1
 8001a68:	9302      	str	r3, [sp, #8]
 8001a6a:	2318      	movs	r3, #24
 8001a6c:	9301      	str	r3, [sp, #4]
 8001a6e:	2300      	movs	r3, #0
 8001a70:	9300      	str	r3, [sp, #0]
 8001a72:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8001a76:	222f      	movs	r2, #47	@ 0x2f
 8001a78:	2164      	movs	r1, #100	@ 0x64
 8001a7a:	2087      	movs	r0, #135	@ 0x87
 8001a7c:	f000 fe0a 	bl	8002694 <lcd_ShowChar>
	lcd_ShowIntNum(150, 100, year, 2, GREEN, BLACK, 24);
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	b29a      	uxth	r2, r3
 8001a84:	2318      	movs	r3, #24
 8001a86:	9302      	str	r3, [sp, #8]
 8001a88:	2300      	movs	r3, #0
 8001a8a:	9301      	str	r3, [sp, #4]
 8001a8c:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8001a90:	9300      	str	r3, [sp, #0]
 8001a92:	2302      	movs	r3, #2
 8001a94:	2164      	movs	r1, #100	@ 0x64
 8001a96:	2096      	movs	r0, #150	@ 0x96
 8001a98:	f000 fee8 	bl	800286c <lcd_ShowIntNum>

	lcd_ShowIntNum(110, 130, day, 2, YELLOW, BLACK, 24);
 8001a9c:	683b      	ldr	r3, [r7, #0]
 8001a9e:	b29a      	uxth	r2, r3
 8001aa0:	2318      	movs	r3, #24
 8001aa2:	9302      	str	r3, [sp, #8]
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	9301      	str	r3, [sp, #4]
 8001aa8:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8001aac:	9300      	str	r3, [sp, #0]
 8001aae:	2302      	movs	r3, #2
 8001ab0:	2182      	movs	r1, #130	@ 0x82
 8001ab2:	206e      	movs	r0, #110	@ 0x6e
 8001ab4:	f000 feda 	bl	800286c <lcd_ShowIntNum>

	lcd_ShowIntNum(70, 160, hour, 2, BLACK, BLACK, 24);
 8001ab8:	69bb      	ldr	r3, [r7, #24]
 8001aba:	b29a      	uxth	r2, r3
 8001abc:	2318      	movs	r3, #24
 8001abe:	9302      	str	r3, [sp, #8]
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	9301      	str	r3, [sp, #4]
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	9300      	str	r3, [sp, #0]
 8001ac8:	2302      	movs	r3, #2
 8001aca:	21a0      	movs	r1, #160	@ 0xa0
 8001acc:	2046      	movs	r0, #70	@ 0x46
 8001ace:	f000 fecd 	bl	800286c <lcd_ShowIntNum>
	lcd_ShowChar(95, 160, ':', GREEN, BLACK, 24, 1);
 8001ad2:	2301      	movs	r3, #1
 8001ad4:	9302      	str	r3, [sp, #8]
 8001ad6:	2318      	movs	r3, #24
 8001ad8:	9301      	str	r3, [sp, #4]
 8001ada:	2300      	movs	r3, #0
 8001adc:	9300      	str	r3, [sp, #0]
 8001ade:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8001ae2:	223a      	movs	r2, #58	@ 0x3a
 8001ae4:	21a0      	movs	r1, #160	@ 0xa0
 8001ae6:	205f      	movs	r0, #95	@ 0x5f
 8001ae8:	f000 fdd4 	bl	8002694 <lcd_ShowChar>
	lcd_ShowIntNum(110, 160, minute, 2, GREEN, BLACK, 24);
 8001aec:	69fb      	ldr	r3, [r7, #28]
 8001aee:	b29a      	uxth	r2, r3
 8001af0:	2318      	movs	r3, #24
 8001af2:	9302      	str	r3, [sp, #8]
 8001af4:	2300      	movs	r3, #0
 8001af6:	9301      	str	r3, [sp, #4]
 8001af8:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8001afc:	9300      	str	r3, [sp, #0]
 8001afe:	2302      	movs	r3, #2
 8001b00:	21a0      	movs	r1, #160	@ 0xa0
 8001b02:	206e      	movs	r0, #110	@ 0x6e
 8001b04:	f000 feb2 	bl	800286c <lcd_ShowIntNum>
	lcd_ShowChar(135, 160, ':', GREEN, BLACK, 24, 1);
 8001b08:	2301      	movs	r3, #1
 8001b0a:	9302      	str	r3, [sp, #8]
 8001b0c:	2318      	movs	r3, #24
 8001b0e:	9301      	str	r3, [sp, #4]
 8001b10:	2300      	movs	r3, #0
 8001b12:	9300      	str	r3, [sp, #0]
 8001b14:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8001b18:	223a      	movs	r2, #58	@ 0x3a
 8001b1a:	21a0      	movs	r1, #160	@ 0xa0
 8001b1c:	2087      	movs	r0, #135	@ 0x87
 8001b1e:	f000 fdb9 	bl	8002694 <lcd_ShowChar>
	lcd_ShowIntNum(150, 160, second, 2, GREEN, BLACK, 24);
 8001b22:	6a3b      	ldr	r3, [r7, #32]
 8001b24:	b29a      	uxth	r2, r3
 8001b26:	2318      	movs	r3, #24
 8001b28:	9302      	str	r3, [sp, #8]
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	9301      	str	r3, [sp, #4]
 8001b2e:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8001b32:	9300      	str	r3, [sp, #0]
 8001b34:	2302      	movs	r3, #2
 8001b36:	21a0      	movs	r1, #160	@ 0xa0
 8001b38:	2096      	movs	r0, #150	@ 0x96
 8001b3a:	f000 fe97 	bl	800286c <lcd_ShowIntNum>

}
 8001b3e:	bf00      	nop
 8001b40:	3710      	adds	r7, #16
 8001b42:	46bd      	mov	sp, r7
 8001b44:	bd80      	pop	{r7, pc}

08001b46 <displayNoMinuteTime>:

void displayNoMinuteTime(int date, int month, int year, int day, int hour, int minute, int second){
 8001b46:	b580      	push	{r7, lr}
 8001b48:	b088      	sub	sp, #32
 8001b4a:	af04      	add	r7, sp, #16
 8001b4c:	60f8      	str	r0, [r7, #12]
 8001b4e:	60b9      	str	r1, [r7, #8]
 8001b50:	607a      	str	r2, [r7, #4]
 8001b52:	603b      	str	r3, [r7, #0]

	lcd_ShowIntNum(70, 100, date, 2, GREEN, BLACK, 24);
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	b29a      	uxth	r2, r3
 8001b58:	2318      	movs	r3, #24
 8001b5a:	9302      	str	r3, [sp, #8]
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	9301      	str	r3, [sp, #4]
 8001b60:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8001b64:	9300      	str	r3, [sp, #0]
 8001b66:	2302      	movs	r3, #2
 8001b68:	2164      	movs	r1, #100	@ 0x64
 8001b6a:	2046      	movs	r0, #70	@ 0x46
 8001b6c:	f000 fe7e 	bl	800286c <lcd_ShowIntNum>
	lcd_ShowChar(95, 100, '/', GREEN, BLACK, 24, 1);
 8001b70:	2301      	movs	r3, #1
 8001b72:	9302      	str	r3, [sp, #8]
 8001b74:	2318      	movs	r3, #24
 8001b76:	9301      	str	r3, [sp, #4]
 8001b78:	2300      	movs	r3, #0
 8001b7a:	9300      	str	r3, [sp, #0]
 8001b7c:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8001b80:	222f      	movs	r2, #47	@ 0x2f
 8001b82:	2164      	movs	r1, #100	@ 0x64
 8001b84:	205f      	movs	r0, #95	@ 0x5f
 8001b86:	f000 fd85 	bl	8002694 <lcd_ShowChar>
	lcd_ShowIntNum(110, 100, month, 2, GREEN, BLACK, 24);
 8001b8a:	68bb      	ldr	r3, [r7, #8]
 8001b8c:	b29a      	uxth	r2, r3
 8001b8e:	2318      	movs	r3, #24
 8001b90:	9302      	str	r3, [sp, #8]
 8001b92:	2300      	movs	r3, #0
 8001b94:	9301      	str	r3, [sp, #4]
 8001b96:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8001b9a:	9300      	str	r3, [sp, #0]
 8001b9c:	2302      	movs	r3, #2
 8001b9e:	2164      	movs	r1, #100	@ 0x64
 8001ba0:	206e      	movs	r0, #110	@ 0x6e
 8001ba2:	f000 fe63 	bl	800286c <lcd_ShowIntNum>
	lcd_ShowChar(135, 100, '/', GREEN, BLACK, 24, 1);
 8001ba6:	2301      	movs	r3, #1
 8001ba8:	9302      	str	r3, [sp, #8]
 8001baa:	2318      	movs	r3, #24
 8001bac:	9301      	str	r3, [sp, #4]
 8001bae:	2300      	movs	r3, #0
 8001bb0:	9300      	str	r3, [sp, #0]
 8001bb2:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8001bb6:	222f      	movs	r2, #47	@ 0x2f
 8001bb8:	2164      	movs	r1, #100	@ 0x64
 8001bba:	2087      	movs	r0, #135	@ 0x87
 8001bbc:	f000 fd6a 	bl	8002694 <lcd_ShowChar>
	lcd_ShowIntNum(150, 100, year, 2, GREEN, BLACK, 24);
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	b29a      	uxth	r2, r3
 8001bc4:	2318      	movs	r3, #24
 8001bc6:	9302      	str	r3, [sp, #8]
 8001bc8:	2300      	movs	r3, #0
 8001bca:	9301      	str	r3, [sp, #4]
 8001bcc:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8001bd0:	9300      	str	r3, [sp, #0]
 8001bd2:	2302      	movs	r3, #2
 8001bd4:	2164      	movs	r1, #100	@ 0x64
 8001bd6:	2096      	movs	r0, #150	@ 0x96
 8001bd8:	f000 fe48 	bl	800286c <lcd_ShowIntNum>

	lcd_ShowIntNum(110, 130, day, 2, YELLOW, BLACK, 24);
 8001bdc:	683b      	ldr	r3, [r7, #0]
 8001bde:	b29a      	uxth	r2, r3
 8001be0:	2318      	movs	r3, #24
 8001be2:	9302      	str	r3, [sp, #8]
 8001be4:	2300      	movs	r3, #0
 8001be6:	9301      	str	r3, [sp, #4]
 8001be8:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8001bec:	9300      	str	r3, [sp, #0]
 8001bee:	2302      	movs	r3, #2
 8001bf0:	2182      	movs	r1, #130	@ 0x82
 8001bf2:	206e      	movs	r0, #110	@ 0x6e
 8001bf4:	f000 fe3a 	bl	800286c <lcd_ShowIntNum>

	lcd_ShowIntNum(70, 160, hour, 2, GREEN, BLACK, 24);
 8001bf8:	69bb      	ldr	r3, [r7, #24]
 8001bfa:	b29a      	uxth	r2, r3
 8001bfc:	2318      	movs	r3, #24
 8001bfe:	9302      	str	r3, [sp, #8]
 8001c00:	2300      	movs	r3, #0
 8001c02:	9301      	str	r3, [sp, #4]
 8001c04:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8001c08:	9300      	str	r3, [sp, #0]
 8001c0a:	2302      	movs	r3, #2
 8001c0c:	21a0      	movs	r1, #160	@ 0xa0
 8001c0e:	2046      	movs	r0, #70	@ 0x46
 8001c10:	f000 fe2c 	bl	800286c <lcd_ShowIntNum>
	lcd_ShowChar(95, 160, ':', GREEN, BLACK, 24, 1);
 8001c14:	2301      	movs	r3, #1
 8001c16:	9302      	str	r3, [sp, #8]
 8001c18:	2318      	movs	r3, #24
 8001c1a:	9301      	str	r3, [sp, #4]
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	9300      	str	r3, [sp, #0]
 8001c20:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8001c24:	223a      	movs	r2, #58	@ 0x3a
 8001c26:	21a0      	movs	r1, #160	@ 0xa0
 8001c28:	205f      	movs	r0, #95	@ 0x5f
 8001c2a:	f000 fd33 	bl	8002694 <lcd_ShowChar>
	lcd_ShowIntNum(110, 160, minute, 2, BLACK, BLACK, 24);
 8001c2e:	69fb      	ldr	r3, [r7, #28]
 8001c30:	b29a      	uxth	r2, r3
 8001c32:	2318      	movs	r3, #24
 8001c34:	9302      	str	r3, [sp, #8]
 8001c36:	2300      	movs	r3, #0
 8001c38:	9301      	str	r3, [sp, #4]
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	9300      	str	r3, [sp, #0]
 8001c3e:	2302      	movs	r3, #2
 8001c40:	21a0      	movs	r1, #160	@ 0xa0
 8001c42:	206e      	movs	r0, #110	@ 0x6e
 8001c44:	f000 fe12 	bl	800286c <lcd_ShowIntNum>
	lcd_ShowChar(135, 160, ':', GREEN, BLACK, 24, 1);
 8001c48:	2301      	movs	r3, #1
 8001c4a:	9302      	str	r3, [sp, #8]
 8001c4c:	2318      	movs	r3, #24
 8001c4e:	9301      	str	r3, [sp, #4]
 8001c50:	2300      	movs	r3, #0
 8001c52:	9300      	str	r3, [sp, #0]
 8001c54:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8001c58:	223a      	movs	r2, #58	@ 0x3a
 8001c5a:	21a0      	movs	r1, #160	@ 0xa0
 8001c5c:	2087      	movs	r0, #135	@ 0x87
 8001c5e:	f000 fd19 	bl	8002694 <lcd_ShowChar>
	lcd_ShowIntNum(150, 160, second, 2, GREEN, BLACK, 24);
 8001c62:	6a3b      	ldr	r3, [r7, #32]
 8001c64:	b29a      	uxth	r2, r3
 8001c66:	2318      	movs	r3, #24
 8001c68:	9302      	str	r3, [sp, #8]
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	9301      	str	r3, [sp, #4]
 8001c6e:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8001c72:	9300      	str	r3, [sp, #0]
 8001c74:	2302      	movs	r3, #2
 8001c76:	21a0      	movs	r1, #160	@ 0xa0
 8001c78:	2096      	movs	r0, #150	@ 0x96
 8001c7a:	f000 fdf7 	bl	800286c <lcd_ShowIntNum>

}
 8001c7e:	bf00      	nop
 8001c80:	3710      	adds	r7, #16
 8001c82:	46bd      	mov	sp, r7
 8001c84:	bd80      	pop	{r7, pc}

08001c86 <displayNoSecondTime>:

void displayNoSecondTime(int date, int month, int year, int day, int hour, int minute, int second){
 8001c86:	b580      	push	{r7, lr}
 8001c88:	b088      	sub	sp, #32
 8001c8a:	af04      	add	r7, sp, #16
 8001c8c:	60f8      	str	r0, [r7, #12]
 8001c8e:	60b9      	str	r1, [r7, #8]
 8001c90:	607a      	str	r2, [r7, #4]
 8001c92:	603b      	str	r3, [r7, #0]

	lcd_ShowIntNum(70, 100, date, 2, GREEN, BLACK, 24);
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	b29a      	uxth	r2, r3
 8001c98:	2318      	movs	r3, #24
 8001c9a:	9302      	str	r3, [sp, #8]
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	9301      	str	r3, [sp, #4]
 8001ca0:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8001ca4:	9300      	str	r3, [sp, #0]
 8001ca6:	2302      	movs	r3, #2
 8001ca8:	2164      	movs	r1, #100	@ 0x64
 8001caa:	2046      	movs	r0, #70	@ 0x46
 8001cac:	f000 fdde 	bl	800286c <lcd_ShowIntNum>
	lcd_ShowChar(95, 100, '/', GREEN, BLACK, 24, 1);
 8001cb0:	2301      	movs	r3, #1
 8001cb2:	9302      	str	r3, [sp, #8]
 8001cb4:	2318      	movs	r3, #24
 8001cb6:	9301      	str	r3, [sp, #4]
 8001cb8:	2300      	movs	r3, #0
 8001cba:	9300      	str	r3, [sp, #0]
 8001cbc:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8001cc0:	222f      	movs	r2, #47	@ 0x2f
 8001cc2:	2164      	movs	r1, #100	@ 0x64
 8001cc4:	205f      	movs	r0, #95	@ 0x5f
 8001cc6:	f000 fce5 	bl	8002694 <lcd_ShowChar>
	lcd_ShowIntNum(110, 100, month, 2, GREEN, BLACK, 24);
 8001cca:	68bb      	ldr	r3, [r7, #8]
 8001ccc:	b29a      	uxth	r2, r3
 8001cce:	2318      	movs	r3, #24
 8001cd0:	9302      	str	r3, [sp, #8]
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	9301      	str	r3, [sp, #4]
 8001cd6:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8001cda:	9300      	str	r3, [sp, #0]
 8001cdc:	2302      	movs	r3, #2
 8001cde:	2164      	movs	r1, #100	@ 0x64
 8001ce0:	206e      	movs	r0, #110	@ 0x6e
 8001ce2:	f000 fdc3 	bl	800286c <lcd_ShowIntNum>
	lcd_ShowChar(135, 100, '/', GREEN, BLACK, 24, 1);
 8001ce6:	2301      	movs	r3, #1
 8001ce8:	9302      	str	r3, [sp, #8]
 8001cea:	2318      	movs	r3, #24
 8001cec:	9301      	str	r3, [sp, #4]
 8001cee:	2300      	movs	r3, #0
 8001cf0:	9300      	str	r3, [sp, #0]
 8001cf2:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8001cf6:	222f      	movs	r2, #47	@ 0x2f
 8001cf8:	2164      	movs	r1, #100	@ 0x64
 8001cfa:	2087      	movs	r0, #135	@ 0x87
 8001cfc:	f000 fcca 	bl	8002694 <lcd_ShowChar>
	lcd_ShowIntNum(150, 100, year, 2, GREEN, BLACK, 24);
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	b29a      	uxth	r2, r3
 8001d04:	2318      	movs	r3, #24
 8001d06:	9302      	str	r3, [sp, #8]
 8001d08:	2300      	movs	r3, #0
 8001d0a:	9301      	str	r3, [sp, #4]
 8001d0c:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8001d10:	9300      	str	r3, [sp, #0]
 8001d12:	2302      	movs	r3, #2
 8001d14:	2164      	movs	r1, #100	@ 0x64
 8001d16:	2096      	movs	r0, #150	@ 0x96
 8001d18:	f000 fda8 	bl	800286c <lcd_ShowIntNum>

	lcd_ShowIntNum(110, 130, day, 2, YELLOW, BLACK, 24);
 8001d1c:	683b      	ldr	r3, [r7, #0]
 8001d1e:	b29a      	uxth	r2, r3
 8001d20:	2318      	movs	r3, #24
 8001d22:	9302      	str	r3, [sp, #8]
 8001d24:	2300      	movs	r3, #0
 8001d26:	9301      	str	r3, [sp, #4]
 8001d28:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8001d2c:	9300      	str	r3, [sp, #0]
 8001d2e:	2302      	movs	r3, #2
 8001d30:	2182      	movs	r1, #130	@ 0x82
 8001d32:	206e      	movs	r0, #110	@ 0x6e
 8001d34:	f000 fd9a 	bl	800286c <lcd_ShowIntNum>

	lcd_ShowIntNum(70, 160, hour, 2, GREEN, BLACK, 24);
 8001d38:	69bb      	ldr	r3, [r7, #24]
 8001d3a:	b29a      	uxth	r2, r3
 8001d3c:	2318      	movs	r3, #24
 8001d3e:	9302      	str	r3, [sp, #8]
 8001d40:	2300      	movs	r3, #0
 8001d42:	9301      	str	r3, [sp, #4]
 8001d44:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8001d48:	9300      	str	r3, [sp, #0]
 8001d4a:	2302      	movs	r3, #2
 8001d4c:	21a0      	movs	r1, #160	@ 0xa0
 8001d4e:	2046      	movs	r0, #70	@ 0x46
 8001d50:	f000 fd8c 	bl	800286c <lcd_ShowIntNum>
	lcd_ShowChar(95, 160, ':', GREEN, BLACK, 24, 1);
 8001d54:	2301      	movs	r3, #1
 8001d56:	9302      	str	r3, [sp, #8]
 8001d58:	2318      	movs	r3, #24
 8001d5a:	9301      	str	r3, [sp, #4]
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	9300      	str	r3, [sp, #0]
 8001d60:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8001d64:	223a      	movs	r2, #58	@ 0x3a
 8001d66:	21a0      	movs	r1, #160	@ 0xa0
 8001d68:	205f      	movs	r0, #95	@ 0x5f
 8001d6a:	f000 fc93 	bl	8002694 <lcd_ShowChar>
	lcd_ShowIntNum(110, 160, minute, 2, GREEN, BLACK, 24);
 8001d6e:	69fb      	ldr	r3, [r7, #28]
 8001d70:	b29a      	uxth	r2, r3
 8001d72:	2318      	movs	r3, #24
 8001d74:	9302      	str	r3, [sp, #8]
 8001d76:	2300      	movs	r3, #0
 8001d78:	9301      	str	r3, [sp, #4]
 8001d7a:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8001d7e:	9300      	str	r3, [sp, #0]
 8001d80:	2302      	movs	r3, #2
 8001d82:	21a0      	movs	r1, #160	@ 0xa0
 8001d84:	206e      	movs	r0, #110	@ 0x6e
 8001d86:	f000 fd71 	bl	800286c <lcd_ShowIntNum>
	lcd_ShowChar(135, 160, ':', GREEN, BLACK, 24, 1);
 8001d8a:	2301      	movs	r3, #1
 8001d8c:	9302      	str	r3, [sp, #8]
 8001d8e:	2318      	movs	r3, #24
 8001d90:	9301      	str	r3, [sp, #4]
 8001d92:	2300      	movs	r3, #0
 8001d94:	9300      	str	r3, [sp, #0]
 8001d96:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8001d9a:	223a      	movs	r2, #58	@ 0x3a
 8001d9c:	21a0      	movs	r1, #160	@ 0xa0
 8001d9e:	2087      	movs	r0, #135	@ 0x87
 8001da0:	f000 fc78 	bl	8002694 <lcd_ShowChar>
	lcd_ShowIntNum(150, 160, second, 2, BLACK, BLACK, 24);
 8001da4:	6a3b      	ldr	r3, [r7, #32]
 8001da6:	b29a      	uxth	r2, r3
 8001da8:	2318      	movs	r3, #24
 8001daa:	9302      	str	r3, [sp, #8]
 8001dac:	2300      	movs	r3, #0
 8001dae:	9301      	str	r3, [sp, #4]
 8001db0:	2300      	movs	r3, #0
 8001db2:	9300      	str	r3, [sp, #0]
 8001db4:	2302      	movs	r3, #2
 8001db6:	21a0      	movs	r1, #160	@ 0xa0
 8001db8:	2096      	movs	r0, #150	@ 0x96
 8001dba:	f000 fd57 	bl	800286c <lcd_ShowIntNum>

}
 8001dbe:	bf00      	nop
 8001dc0:	3710      	adds	r7, #16
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	bd80      	pop	{r7, pc}
	...

08001dc8 <displayToggleTime>:

void displayToggleTime(int date, int month, int year, int day, int hour, int minute, int second, int indexToggle){
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	b088      	sub	sp, #32
 8001dcc:	af04      	add	r7, sp, #16
 8001dce:	60f8      	str	r0, [r7, #12]
 8001dd0:	60b9      	str	r1, [r7, #8]
 8001dd2:	607a      	str	r2, [r7, #4]
 8001dd4:	603b      	str	r3, [r7, #0]
	if (toggleVar == 0){
 8001dd6:	4b42      	ldr	r3, [pc, #264]	@ (8001ee0 <displayToggleTime+0x118>)
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d10c      	bne.n	8001df8 <displayToggleTime+0x30>
		displayNormalTime(date, month, year, day, hour, minute, second);
 8001dde:	6a3b      	ldr	r3, [r7, #32]
 8001de0:	9302      	str	r3, [sp, #8]
 8001de2:	69fb      	ldr	r3, [r7, #28]
 8001de4:	9301      	str	r3, [sp, #4]
 8001de6:	69bb      	ldr	r3, [r7, #24]
 8001de8:	9300      	str	r3, [sp, #0]
 8001dea:	683b      	ldr	r3, [r7, #0]
 8001dec:	687a      	ldr	r2, [r7, #4]
 8001dee:	68b9      	ldr	r1, [r7, #8]
 8001df0:	68f8      	ldr	r0, [r7, #12]
 8001df2:	f7ff fae7 	bl	80013c4 <displayNormalTime>

		default:
			break;
		}
	}
}
 8001df6:	e06f      	b.n	8001ed8 <displayToggleTime+0x110>
		switch(indexToggle) {
 8001df8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001dfa:	2b06      	cmp	r3, #6
 8001dfc:	d86b      	bhi.n	8001ed6 <displayToggleTime+0x10e>
 8001dfe:	a201      	add	r2, pc, #4	@ (adr r2, 8001e04 <displayToggleTime+0x3c>)
 8001e00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e04:	08001e21 	.word	0x08001e21
 8001e08:	08001e3b 	.word	0x08001e3b
 8001e0c:	08001e55 	.word	0x08001e55
 8001e10:	08001e6f 	.word	0x08001e6f
 8001e14:	08001e89 	.word	0x08001e89
 8001e18:	08001ea3 	.word	0x08001ea3
 8001e1c:	08001ebd 	.word	0x08001ebd
			displayNoDateTime(date, month, year, day, hour, minute, second);
 8001e20:	6a3b      	ldr	r3, [r7, #32]
 8001e22:	9302      	str	r3, [sp, #8]
 8001e24:	69fb      	ldr	r3, [r7, #28]
 8001e26:	9301      	str	r3, [sp, #4]
 8001e28:	69bb      	ldr	r3, [r7, #24]
 8001e2a:	9300      	str	r3, [sp, #0]
 8001e2c:	683b      	ldr	r3, [r7, #0]
 8001e2e:	687a      	ldr	r2, [r7, #4]
 8001e30:	68b9      	ldr	r1, [r7, #8]
 8001e32:	68f8      	ldr	r0, [r7, #12]
 8001e34:	f7ff fb67 	bl	8001506 <displayNoDateTime>
			break;
 8001e38:	e04e      	b.n	8001ed8 <displayToggleTime+0x110>
			displayNoMonthTime(date, month, year, day, hour, minute, second);
 8001e3a:	6a3b      	ldr	r3, [r7, #32]
 8001e3c:	9302      	str	r3, [sp, #8]
 8001e3e:	69fb      	ldr	r3, [r7, #28]
 8001e40:	9301      	str	r3, [sp, #4]
 8001e42:	69bb      	ldr	r3, [r7, #24]
 8001e44:	9300      	str	r3, [sp, #0]
 8001e46:	683b      	ldr	r3, [r7, #0]
 8001e48:	687a      	ldr	r2, [r7, #4]
 8001e4a:	68b9      	ldr	r1, [r7, #8]
 8001e4c:	68f8      	ldr	r0, [r7, #12]
 8001e4e:	f7ff fbfa 	bl	8001646 <displayNoMonthTime>
			break;
 8001e52:	e041      	b.n	8001ed8 <displayToggleTime+0x110>
			displayNoYearTime(date, month, year, day, hour, minute, second);
 8001e54:	6a3b      	ldr	r3, [r7, #32]
 8001e56:	9302      	str	r3, [sp, #8]
 8001e58:	69fb      	ldr	r3, [r7, #28]
 8001e5a:	9301      	str	r3, [sp, #4]
 8001e5c:	69bb      	ldr	r3, [r7, #24]
 8001e5e:	9300      	str	r3, [sp, #0]
 8001e60:	683b      	ldr	r3, [r7, #0]
 8001e62:	687a      	ldr	r2, [r7, #4]
 8001e64:	68b9      	ldr	r1, [r7, #8]
 8001e66:	68f8      	ldr	r0, [r7, #12]
 8001e68:	f7ff fc8d 	bl	8001786 <displayNoYearTime>
			break;
 8001e6c:	e034      	b.n	8001ed8 <displayToggleTime+0x110>
			displayNoDayTime(date, month, year, day, hour, minute, second);
 8001e6e:	6a3b      	ldr	r3, [r7, #32]
 8001e70:	9302      	str	r3, [sp, #8]
 8001e72:	69fb      	ldr	r3, [r7, #28]
 8001e74:	9301      	str	r3, [sp, #4]
 8001e76:	69bb      	ldr	r3, [r7, #24]
 8001e78:	9300      	str	r3, [sp, #0]
 8001e7a:	683b      	ldr	r3, [r7, #0]
 8001e7c:	687a      	ldr	r2, [r7, #4]
 8001e7e:	68b9      	ldr	r1, [r7, #8]
 8001e80:	68f8      	ldr	r0, [r7, #12]
 8001e82:	f7ff fd20 	bl	80018c6 <displayNoDayTime>
			break;
 8001e86:	e027      	b.n	8001ed8 <displayToggleTime+0x110>
			displayNoHourTime(date, month, year, day, hour, minute, second);
 8001e88:	6a3b      	ldr	r3, [r7, #32]
 8001e8a:	9302      	str	r3, [sp, #8]
 8001e8c:	69fb      	ldr	r3, [r7, #28]
 8001e8e:	9301      	str	r3, [sp, #4]
 8001e90:	69bb      	ldr	r3, [r7, #24]
 8001e92:	9300      	str	r3, [sp, #0]
 8001e94:	683b      	ldr	r3, [r7, #0]
 8001e96:	687a      	ldr	r2, [r7, #4]
 8001e98:	68b9      	ldr	r1, [r7, #8]
 8001e9a:	68f8      	ldr	r0, [r7, #12]
 8001e9c:	f7ff fdb3 	bl	8001a06 <displayNoHourTime>
			break;
 8001ea0:	e01a      	b.n	8001ed8 <displayToggleTime+0x110>
			displayNoMinuteTime(date, month, year, day, hour, minute, second);
 8001ea2:	6a3b      	ldr	r3, [r7, #32]
 8001ea4:	9302      	str	r3, [sp, #8]
 8001ea6:	69fb      	ldr	r3, [r7, #28]
 8001ea8:	9301      	str	r3, [sp, #4]
 8001eaa:	69bb      	ldr	r3, [r7, #24]
 8001eac:	9300      	str	r3, [sp, #0]
 8001eae:	683b      	ldr	r3, [r7, #0]
 8001eb0:	687a      	ldr	r2, [r7, #4]
 8001eb2:	68b9      	ldr	r1, [r7, #8]
 8001eb4:	68f8      	ldr	r0, [r7, #12]
 8001eb6:	f7ff fe46 	bl	8001b46 <displayNoMinuteTime>
			break;
 8001eba:	e00d      	b.n	8001ed8 <displayToggleTime+0x110>
			displayNoSecondTime(date, month, year, day, hour, minute, second);
 8001ebc:	6a3b      	ldr	r3, [r7, #32]
 8001ebe:	9302      	str	r3, [sp, #8]
 8001ec0:	69fb      	ldr	r3, [r7, #28]
 8001ec2:	9301      	str	r3, [sp, #4]
 8001ec4:	69bb      	ldr	r3, [r7, #24]
 8001ec6:	9300      	str	r3, [sp, #0]
 8001ec8:	683b      	ldr	r3, [r7, #0]
 8001eca:	687a      	ldr	r2, [r7, #4]
 8001ecc:	68b9      	ldr	r1, [r7, #8]
 8001ece:	68f8      	ldr	r0, [r7, #12]
 8001ed0:	f7ff fed9 	bl	8001c86 <displayNoSecondTime>
			break;
 8001ed4:	e000      	b.n	8001ed8 <displayToggleTime+0x110>
			break;
 8001ed6:	bf00      	nop
}
 8001ed8:	bf00      	nop
 8001eda:	3710      	adds	r7, #16
 8001edc:	46bd      	mov	sp, r7
 8001ede:	bd80      	pop	{r7, pc}
 8001ee0:	20000090 	.word	0x20000090

08001ee4 <ds3231_init>:
uint8_t ds3231_date;
uint8_t ds3231_day;
uint8_t ds3231_month;
uint8_t ds3231_year;

void ds3231_init(){
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	af00      	add	r7, sp, #0
	ds3231_buffer[0] = DEC2BCD(30); //second
 8001ee8:	201e      	movs	r0, #30
 8001eea:	f001 faa3 	bl	8003434 <DEC2BCD>
 8001eee:	4603      	mov	r3, r0
 8001ef0:	461a      	mov	r2, r3
 8001ef2:	4b1c      	ldr	r3, [pc, #112]	@ (8001f64 <ds3231_init+0x80>)
 8001ef4:	701a      	strb	r2, [r3, #0]
	ds3231_buffer[1] = DEC2BCD(22); //minute
 8001ef6:	2016      	movs	r0, #22
 8001ef8:	f001 fa9c 	bl	8003434 <DEC2BCD>
 8001efc:	4603      	mov	r3, r0
 8001efe:	461a      	mov	r2, r3
 8001f00:	4b18      	ldr	r3, [pc, #96]	@ (8001f64 <ds3231_init+0x80>)
 8001f02:	705a      	strb	r2, [r3, #1]
	ds3231_buffer[2] = DEC2BCD(21); //hour
 8001f04:	2015      	movs	r0, #21
 8001f06:	f001 fa95 	bl	8003434 <DEC2BCD>
 8001f0a:	4603      	mov	r3, r0
 8001f0c:	461a      	mov	r2, r3
 8001f0e:	4b15      	ldr	r3, [pc, #84]	@ (8001f64 <ds3231_init+0x80>)
 8001f10:	709a      	strb	r2, [r3, #2]
	ds3231_buffer[3] = DEC2BCD(6);  //day
 8001f12:	2006      	movs	r0, #6
 8001f14:	f001 fa8e 	bl	8003434 <DEC2BCD>
 8001f18:	4603      	mov	r3, r0
 8001f1a:	461a      	mov	r2, r3
 8001f1c:	4b11      	ldr	r3, [pc, #68]	@ (8001f64 <ds3231_init+0x80>)
 8001f1e:	70da      	strb	r2, [r3, #3]
	ds3231_buffer[4] = DEC2BCD(15); //date
 8001f20:	200f      	movs	r0, #15
 8001f22:	f001 fa87 	bl	8003434 <DEC2BCD>
 8001f26:	4603      	mov	r3, r0
 8001f28:	461a      	mov	r2, r3
 8001f2a:	4b0e      	ldr	r3, [pc, #56]	@ (8001f64 <ds3231_init+0x80>)
 8001f2c:	711a      	strb	r2, [r3, #4]
	ds3231_buffer[5] = DEC2BCD(9);  //month
 8001f2e:	2009      	movs	r0, #9
 8001f30:	f001 fa80 	bl	8003434 <DEC2BCD>
 8001f34:	4603      	mov	r3, r0
 8001f36:	461a      	mov	r2, r3
 8001f38:	4b0a      	ldr	r3, [pc, #40]	@ (8001f64 <ds3231_init+0x80>)
 8001f3a:	715a      	strb	r2, [r3, #5]
	ds3231_buffer[6] = DEC2BCD(23); //year
 8001f3c:	2017      	movs	r0, #23
 8001f3e:	f001 fa79 	bl	8003434 <DEC2BCD>
 8001f42:	4603      	mov	r3, r0
 8001f44:	461a      	mov	r2, r3
 8001f46:	4b07      	ldr	r3, [pc, #28]	@ (8001f64 <ds3231_init+0x80>)
 8001f48:	719a      	strb	r2, [r3, #6]
	if(HAL_I2C_IsDeviceReady(&hi2c1, DS3231_ADDRESS, 3, 50) != HAL_OK){
 8001f4a:	2332      	movs	r3, #50	@ 0x32
 8001f4c:	2203      	movs	r2, #3
 8001f4e:	21d0      	movs	r1, #208	@ 0xd0
 8001f50:	4805      	ldr	r0, [pc, #20]	@ (8001f68 <ds3231_init+0x84>)
 8001f52:	f002 fa7f 	bl	8004454 <HAL_I2C_IsDeviceReady>
 8001f56:	4603      	mov	r3, r0
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d001      	beq.n	8001f60 <ds3231_init+0x7c>
		while(1);
 8001f5c:	bf00      	nop
 8001f5e:	e7fd      	b.n	8001f5c <ds3231_init+0x78>
	};
}
 8001f60:	bf00      	nop
 8001f62:	bd80      	pop	{r7, pc}
 8001f64:	20000094 	.word	0x20000094
 8001f68:	200000f8 	.word	0x200000f8

08001f6c <ds3231_Write>:

void ds3231_Write(uint8_t address, uint8_t value){
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	b088      	sub	sp, #32
 8001f70:	af04      	add	r7, sp, #16
 8001f72:	4603      	mov	r3, r0
 8001f74:	460a      	mov	r2, r1
 8001f76:	71fb      	strb	r3, [r7, #7]
 8001f78:	4613      	mov	r3, r2
 8001f7a:	71bb      	strb	r3, [r7, #6]
	uint8_t temp = DEC2BCD(value);
 8001f7c:	79bb      	ldrb	r3, [r7, #6]
 8001f7e:	4618      	mov	r0, r3
 8001f80:	f001 fa58 	bl	8003434 <DEC2BCD>
 8001f84:	4603      	mov	r3, r0
 8001f86:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(&hi2c1, DS3231_ADDRESS, address, I2C_MEMADD_SIZE_8BIT, &temp, 1,10);
 8001f88:	79fb      	ldrb	r3, [r7, #7]
 8001f8a:	b29a      	uxth	r2, r3
 8001f8c:	230a      	movs	r3, #10
 8001f8e:	9302      	str	r3, [sp, #8]
 8001f90:	2301      	movs	r3, #1
 8001f92:	9301      	str	r3, [sp, #4]
 8001f94:	f107 030f 	add.w	r3, r7, #15
 8001f98:	9300      	str	r3, [sp, #0]
 8001f9a:	2301      	movs	r3, #1
 8001f9c:	21d0      	movs	r1, #208	@ 0xd0
 8001f9e:	4803      	ldr	r0, [pc, #12]	@ (8001fac <ds3231_Write+0x40>)
 8001fa0:	f001 ff38 	bl	8003e14 <HAL_I2C_Mem_Write>
}
 8001fa4:	bf00      	nop
 8001fa6:	3710      	adds	r7, #16
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	bd80      	pop	{r7, pc}
 8001fac:	200000f8 	.word	0x200000f8

08001fb0 <ds3231_ReadTime>:

void ds3231_ReadTime(){
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	b084      	sub	sp, #16
 8001fb4:	af04      	add	r7, sp, #16
	HAL_I2C_Mem_Read(&hi2c1, DS3231_ADDRESS, 0x00, I2C_MEMADD_SIZE_8BIT, ds3231_buffer, 7, 10);
 8001fb6:	230a      	movs	r3, #10
 8001fb8:	9302      	str	r3, [sp, #8]
 8001fba:	2307      	movs	r3, #7
 8001fbc:	9301      	str	r3, [sp, #4]
 8001fbe:	4b25      	ldr	r3, [pc, #148]	@ (8002054 <ds3231_ReadTime+0xa4>)
 8001fc0:	9300      	str	r3, [sp, #0]
 8001fc2:	2301      	movs	r3, #1
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	21d0      	movs	r1, #208	@ 0xd0
 8001fc8:	4823      	ldr	r0, [pc, #140]	@ (8002058 <ds3231_ReadTime+0xa8>)
 8001fca:	f002 f81d 	bl	8004008 <HAL_I2C_Mem_Read>
	ds3231_sec = BCD2DEC(ds3231_buffer[0]);
 8001fce:	4b21      	ldr	r3, [pc, #132]	@ (8002054 <ds3231_ReadTime+0xa4>)
 8001fd0:	781b      	ldrb	r3, [r3, #0]
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	f001 fa14 	bl	8003400 <BCD2DEC>
 8001fd8:	4603      	mov	r3, r0
 8001fda:	461a      	mov	r2, r3
 8001fdc:	4b1f      	ldr	r3, [pc, #124]	@ (800205c <ds3231_ReadTime+0xac>)
 8001fde:	701a      	strb	r2, [r3, #0]
	ds3231_min = BCD2DEC(ds3231_buffer[1]);
 8001fe0:	4b1c      	ldr	r3, [pc, #112]	@ (8002054 <ds3231_ReadTime+0xa4>)
 8001fe2:	785b      	ldrb	r3, [r3, #1]
 8001fe4:	4618      	mov	r0, r3
 8001fe6:	f001 fa0b 	bl	8003400 <BCD2DEC>
 8001fea:	4603      	mov	r3, r0
 8001fec:	461a      	mov	r2, r3
 8001fee:	4b1c      	ldr	r3, [pc, #112]	@ (8002060 <ds3231_ReadTime+0xb0>)
 8001ff0:	701a      	strb	r2, [r3, #0]
	ds3231_hours = BCD2DEC(ds3231_buffer[2]);
 8001ff2:	4b18      	ldr	r3, [pc, #96]	@ (8002054 <ds3231_ReadTime+0xa4>)
 8001ff4:	789b      	ldrb	r3, [r3, #2]
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	f001 fa02 	bl	8003400 <BCD2DEC>
 8001ffc:	4603      	mov	r3, r0
 8001ffe:	461a      	mov	r2, r3
 8002000:	4b18      	ldr	r3, [pc, #96]	@ (8002064 <ds3231_ReadTime+0xb4>)
 8002002:	701a      	strb	r2, [r3, #0]
	ds3231_day = BCD2DEC(ds3231_buffer[3]);
 8002004:	4b13      	ldr	r3, [pc, #76]	@ (8002054 <ds3231_ReadTime+0xa4>)
 8002006:	78db      	ldrb	r3, [r3, #3]
 8002008:	4618      	mov	r0, r3
 800200a:	f001 f9f9 	bl	8003400 <BCD2DEC>
 800200e:	4603      	mov	r3, r0
 8002010:	461a      	mov	r2, r3
 8002012:	4b15      	ldr	r3, [pc, #84]	@ (8002068 <ds3231_ReadTime+0xb8>)
 8002014:	701a      	strb	r2, [r3, #0]
	ds3231_date = BCD2DEC(ds3231_buffer[4]);
 8002016:	4b0f      	ldr	r3, [pc, #60]	@ (8002054 <ds3231_ReadTime+0xa4>)
 8002018:	791b      	ldrb	r3, [r3, #4]
 800201a:	4618      	mov	r0, r3
 800201c:	f001 f9f0 	bl	8003400 <BCD2DEC>
 8002020:	4603      	mov	r3, r0
 8002022:	461a      	mov	r2, r3
 8002024:	4b11      	ldr	r3, [pc, #68]	@ (800206c <ds3231_ReadTime+0xbc>)
 8002026:	701a      	strb	r2, [r3, #0]
	ds3231_month = BCD2DEC(ds3231_buffer[5]);
 8002028:	4b0a      	ldr	r3, [pc, #40]	@ (8002054 <ds3231_ReadTime+0xa4>)
 800202a:	795b      	ldrb	r3, [r3, #5]
 800202c:	4618      	mov	r0, r3
 800202e:	f001 f9e7 	bl	8003400 <BCD2DEC>
 8002032:	4603      	mov	r3, r0
 8002034:	461a      	mov	r2, r3
 8002036:	4b0e      	ldr	r3, [pc, #56]	@ (8002070 <ds3231_ReadTime+0xc0>)
 8002038:	701a      	strb	r2, [r3, #0]
	ds3231_year = BCD2DEC(ds3231_buffer[6]);
 800203a:	4b06      	ldr	r3, [pc, #24]	@ (8002054 <ds3231_ReadTime+0xa4>)
 800203c:	799b      	ldrb	r3, [r3, #6]
 800203e:	4618      	mov	r0, r3
 8002040:	f001 f9de 	bl	8003400 <BCD2DEC>
 8002044:	4603      	mov	r3, r0
 8002046:	461a      	mov	r2, r3
 8002048:	4b0a      	ldr	r3, [pc, #40]	@ (8002074 <ds3231_ReadTime+0xc4>)
 800204a:	701a      	strb	r2, [r3, #0]
}
 800204c:	bf00      	nop
 800204e:	46bd      	mov	sp, r7
 8002050:	bd80      	pop	{r7, pc}
 8002052:	bf00      	nop
 8002054:	20000094 	.word	0x20000094
 8002058:	200000f8 	.word	0x200000f8
 800205c:	2000009d 	.word	0x2000009d
 8002060:	2000009c 	.word	0x2000009c
 8002064:	2000009b 	.word	0x2000009b
 8002068:	2000009f 	.word	0x2000009f
 800206c:	2000009e 	.word	0x2000009e
 8002070:	200000a0 	.word	0x200000a0
 8002074:	200000a1 	.word	0x200000a1

08002078 <MX_FSMC_Init>:

SRAM_HandleTypeDef hsram1;

/* FSMC initialization function */
void MX_FSMC_Init(void)
{
 8002078:	b580      	push	{r7, lr}
 800207a:	b08e      	sub	sp, #56	@ 0x38
 800207c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 800207e:	f107 031c 	add.w	r3, r7, #28
 8002082:	2200      	movs	r2, #0
 8002084:	601a      	str	r2, [r3, #0]
 8002086:	605a      	str	r2, [r3, #4]
 8002088:	609a      	str	r2, [r3, #8]
 800208a:	60da      	str	r2, [r3, #12]
 800208c:	611a      	str	r2, [r3, #16]
 800208e:	615a      	str	r2, [r3, #20]
 8002090:	619a      	str	r2, [r3, #24]
  FSMC_NORSRAM_TimingTypeDef ExtTiming = {0};
 8002092:	463b      	mov	r3, r7
 8002094:	2200      	movs	r2, #0
 8002096:	601a      	str	r2, [r3, #0]
 8002098:	605a      	str	r2, [r3, #4]
 800209a:	609a      	str	r2, [r3, #8]
 800209c:	60da      	str	r2, [r3, #12]
 800209e:	611a      	str	r2, [r3, #16]
 80020a0:	615a      	str	r2, [r3, #20]
 80020a2:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 80020a4:	4b2f      	ldr	r3, [pc, #188]	@ (8002164 <MX_FSMC_Init+0xec>)
 80020a6:	f04f 4220 	mov.w	r2, #2684354560	@ 0xa0000000
 80020aa:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 80020ac:	4b2d      	ldr	r3, [pc, #180]	@ (8002164 <MX_FSMC_Init+0xec>)
 80020ae:	4a2e      	ldr	r2, [pc, #184]	@ (8002168 <MX_FSMC_Init+0xf0>)
 80020b0:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK1;
 80020b2:	4b2c      	ldr	r3, [pc, #176]	@ (8002164 <MX_FSMC_Init+0xec>)
 80020b4:	2200      	movs	r2, #0
 80020b6:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 80020b8:	4b2a      	ldr	r3, [pc, #168]	@ (8002164 <MX_FSMC_Init+0xec>)
 80020ba:	2200      	movs	r2, #0
 80020bc:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 80020be:	4b29      	ldr	r3, [pc, #164]	@ (8002164 <MX_FSMC_Init+0xec>)
 80020c0:	2200      	movs	r2, #0
 80020c2:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 80020c4:	4b27      	ldr	r3, [pc, #156]	@ (8002164 <MX_FSMC_Init+0xec>)
 80020c6:	2210      	movs	r2, #16
 80020c8:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 80020ca:	4b26      	ldr	r3, [pc, #152]	@ (8002164 <MX_FSMC_Init+0xec>)
 80020cc:	2200      	movs	r2, #0
 80020ce:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 80020d0:	4b24      	ldr	r3, [pc, #144]	@ (8002164 <MX_FSMC_Init+0xec>)
 80020d2:	2200      	movs	r2, #0
 80020d4:	61da      	str	r2, [r3, #28]
  hsram1.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 80020d6:	4b23      	ldr	r3, [pc, #140]	@ (8002164 <MX_FSMC_Init+0xec>)
 80020d8:	2200      	movs	r2, #0
 80020da:	621a      	str	r2, [r3, #32]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 80020dc:	4b21      	ldr	r3, [pc, #132]	@ (8002164 <MX_FSMC_Init+0xec>)
 80020de:	2200      	movs	r2, #0
 80020e0:	625a      	str	r2, [r3, #36]	@ 0x24
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 80020e2:	4b20      	ldr	r3, [pc, #128]	@ (8002164 <MX_FSMC_Init+0xec>)
 80020e4:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80020e8:	629a      	str	r2, [r3, #40]	@ 0x28
  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 80020ea:	4b1e      	ldr	r3, [pc, #120]	@ (8002164 <MX_FSMC_Init+0xec>)
 80020ec:	2200      	movs	r2, #0
 80020ee:	62da      	str	r2, [r3, #44]	@ 0x2c
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_ENABLE;
 80020f0:	4b1c      	ldr	r3, [pc, #112]	@ (8002164 <MX_FSMC_Init+0xec>)
 80020f2:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80020f6:	631a      	str	r2, [r3, #48]	@ 0x30
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 80020f8:	4b1a      	ldr	r3, [pc, #104]	@ (8002164 <MX_FSMC_Init+0xec>)
 80020fa:	2200      	movs	r2, #0
 80020fc:	635a      	str	r2, [r3, #52]	@ 0x34
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 80020fe:	4b19      	ldr	r3, [pc, #100]	@ (8002164 <MX_FSMC_Init+0xec>)
 8002100:	2200      	movs	r2, #0
 8002102:	639a      	str	r2, [r3, #56]	@ 0x38
  hsram1.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 8002104:	4b17      	ldr	r3, [pc, #92]	@ (8002164 <MX_FSMC_Init+0xec>)
 8002106:	2200      	movs	r2, #0
 8002108:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Timing */
  Timing.AddressSetupTime = 0xf;
 800210a:	230f      	movs	r3, #15
 800210c:	61fb      	str	r3, [r7, #28]
  Timing.AddressHoldTime = 15;
 800210e:	230f      	movs	r3, #15
 8002110:	623b      	str	r3, [r7, #32]
  Timing.DataSetupTime = 60;
 8002112:	233c      	movs	r3, #60	@ 0x3c
 8002114:	627b      	str	r3, [r7, #36]	@ 0x24
  Timing.BusTurnAroundDuration = 0;
 8002116:	2300      	movs	r3, #0
 8002118:	62bb      	str	r3, [r7, #40]	@ 0x28
  Timing.CLKDivision = 16;
 800211a:	2310      	movs	r3, #16
 800211c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  Timing.DataLatency = 17;
 800211e:	2311      	movs	r3, #17
 8002120:	633b      	str	r3, [r7, #48]	@ 0x30
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 8002122:	2300      	movs	r3, #0
 8002124:	637b      	str	r3, [r7, #52]	@ 0x34
  /* ExtTiming */
  ExtTiming.AddressSetupTime = 8;
 8002126:	2308      	movs	r3, #8
 8002128:	603b      	str	r3, [r7, #0]
  ExtTiming.AddressHoldTime = 15;
 800212a:	230f      	movs	r3, #15
 800212c:	607b      	str	r3, [r7, #4]
  ExtTiming.DataSetupTime = 9;
 800212e:	2309      	movs	r3, #9
 8002130:	60bb      	str	r3, [r7, #8]
  ExtTiming.BusTurnAroundDuration = 0;
 8002132:	2300      	movs	r3, #0
 8002134:	60fb      	str	r3, [r7, #12]
  ExtTiming.CLKDivision = 16;
 8002136:	2310      	movs	r3, #16
 8002138:	613b      	str	r3, [r7, #16]
  ExtTiming.DataLatency = 17;
 800213a:	2311      	movs	r3, #17
 800213c:	617b      	str	r3, [r7, #20]
  ExtTiming.AccessMode = FSMC_ACCESS_MODE_A;
 800213e:	2300      	movs	r3, #0
 8002140:	61bb      	str	r3, [r7, #24]

  if (HAL_SRAM_Init(&hsram1, &Timing, &ExtTiming) != HAL_OK)
 8002142:	463a      	mov	r2, r7
 8002144:	f107 031c 	add.w	r3, r7, #28
 8002148:	4619      	mov	r1, r3
 800214a:	4806      	ldr	r0, [pc, #24]	@ (8002164 <MX_FSMC_Init+0xec>)
 800214c:	f004 f838 	bl	80061c0 <HAL_SRAM_Init>
 8002150:	4603      	mov	r3, r0
 8002152:	2b00      	cmp	r3, #0
 8002154:	d001      	beq.n	800215a <MX_FSMC_Init+0xe2>
  {
    Error_Handler( );
 8002156:	f000 ff47 	bl	8002fe8 <Error_Handler>
  }

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 800215a:	bf00      	nop
 800215c:	3738      	adds	r7, #56	@ 0x38
 800215e:	46bd      	mov	sp, r7
 8002160:	bd80      	pop	{r7, pc}
 8002162:	bf00      	nop
 8002164:	200000a4 	.word	0x200000a4
 8002168:	a0000104 	.word	0xa0000104

0800216c <HAL_FSMC_MspInit>:

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 800216c:	b580      	push	{r7, lr}
 800216e:	b086      	sub	sp, #24
 8002170:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002172:	1d3b      	adds	r3, r7, #4
 8002174:	2200      	movs	r2, #0
 8002176:	601a      	str	r2, [r3, #0]
 8002178:	605a      	str	r2, [r3, #4]
 800217a:	609a      	str	r2, [r3, #8]
 800217c:	60da      	str	r2, [r3, #12]
 800217e:	611a      	str	r2, [r3, #16]
  if (FSMC_Initialized) {
 8002180:	4b1c      	ldr	r3, [pc, #112]	@ (80021f4 <HAL_FSMC_MspInit+0x88>)
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	2b00      	cmp	r3, #0
 8002186:	d131      	bne.n	80021ec <HAL_FSMC_MspInit+0x80>
    return;
  }
  FSMC_Initialized = 1;
 8002188:	4b1a      	ldr	r3, [pc, #104]	@ (80021f4 <HAL_FSMC_MspInit+0x88>)
 800218a:	2201      	movs	r2, #1
 800218c:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 800218e:	2300      	movs	r3, #0
 8002190:	603b      	str	r3, [r7, #0]
 8002192:	4b19      	ldr	r3, [pc, #100]	@ (80021f8 <HAL_FSMC_MspInit+0x8c>)
 8002194:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002196:	4a18      	ldr	r2, [pc, #96]	@ (80021f8 <HAL_FSMC_MspInit+0x8c>)
 8002198:	f043 0301 	orr.w	r3, r3, #1
 800219c:	6393      	str	r3, [r2, #56]	@ 0x38
 800219e:	4b16      	ldr	r3, [pc, #88]	@ (80021f8 <HAL_FSMC_MspInit+0x8c>)
 80021a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80021a2:	f003 0301 	and.w	r3, r3, #1
 80021a6:	603b      	str	r3, [r7, #0]
 80021a8:	683b      	ldr	r3, [r7, #0]
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PD7   ------> FSMC_NE1
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
 80021aa:	f64f 7388 	movw	r3, #65416	@ 0xff88
 80021ae:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
                          |GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021b0:	2302      	movs	r3, #2
 80021b2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021b4:	2300      	movs	r3, #0
 80021b6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021b8:	2303      	movs	r3, #3
 80021ba:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 80021bc:	230c      	movs	r3, #12
 80021be:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80021c0:	1d3b      	adds	r3, r7, #4
 80021c2:	4619      	mov	r1, r3
 80021c4:	480d      	ldr	r0, [pc, #52]	@ (80021fc <HAL_FSMC_MspInit+0x90>)
 80021c6:	f001 fb2b 	bl	8003820 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 80021ca:	f24c 73b3 	movw	r3, #51123	@ 0xc7b3
 80021ce:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4
                          |GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021d0:	2302      	movs	r3, #2
 80021d2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021d4:	2300      	movs	r3, #0
 80021d6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021d8:	2303      	movs	r3, #3
 80021da:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 80021dc:	230c      	movs	r3, #12
 80021de:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80021e0:	1d3b      	adds	r3, r7, #4
 80021e2:	4619      	mov	r1, r3
 80021e4:	4806      	ldr	r0, [pc, #24]	@ (8002200 <HAL_FSMC_MspInit+0x94>)
 80021e6:	f001 fb1b 	bl	8003820 <HAL_GPIO_Init>
 80021ea:	e000      	b.n	80021ee <HAL_FSMC_MspInit+0x82>
    return;
 80021ec:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 80021ee:	3718      	adds	r7, #24
 80021f0:	46bd      	mov	sp, r7
 80021f2:	bd80      	pop	{r7, pc}
 80021f4:	200000f4 	.word	0x200000f4
 80021f8:	40023800 	.word	0x40023800
 80021fc:	40021000 	.word	0x40021000
 8002200:	40020c00 	.word	0x40020c00

08002204 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* sramHandle){
 8002204:	b580      	push	{r7, lr}
 8002206:	b082      	sub	sp, #8
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 800220c:	f7ff ffae 	bl	800216c <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8002210:	bf00      	nop
 8002212:	3708      	adds	r7, #8
 8002214:	46bd      	mov	sp, r7
 8002216:	bd80      	pop	{r7, pc}

08002218 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8002218:	b580      	push	{r7, lr}
 800221a:	b08c      	sub	sp, #48	@ 0x30
 800221c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800221e:	f107 031c 	add.w	r3, r7, #28
 8002222:	2200      	movs	r2, #0
 8002224:	601a      	str	r2, [r3, #0]
 8002226:	605a      	str	r2, [r3, #4]
 8002228:	609a      	str	r2, [r3, #8]
 800222a:	60da      	str	r2, [r3, #12]
 800222c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800222e:	2300      	movs	r3, #0
 8002230:	61bb      	str	r3, [r7, #24]
 8002232:	4b6f      	ldr	r3, [pc, #444]	@ (80023f0 <MX_GPIO_Init+0x1d8>)
 8002234:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002236:	4a6e      	ldr	r2, [pc, #440]	@ (80023f0 <MX_GPIO_Init+0x1d8>)
 8002238:	f043 0310 	orr.w	r3, r3, #16
 800223c:	6313      	str	r3, [r2, #48]	@ 0x30
 800223e:	4b6c      	ldr	r3, [pc, #432]	@ (80023f0 <MX_GPIO_Init+0x1d8>)
 8002240:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002242:	f003 0310 	and.w	r3, r3, #16
 8002246:	61bb      	str	r3, [r7, #24]
 8002248:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800224a:	2300      	movs	r3, #0
 800224c:	617b      	str	r3, [r7, #20]
 800224e:	4b68      	ldr	r3, [pc, #416]	@ (80023f0 <MX_GPIO_Init+0x1d8>)
 8002250:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002252:	4a67      	ldr	r2, [pc, #412]	@ (80023f0 <MX_GPIO_Init+0x1d8>)
 8002254:	f043 0304 	orr.w	r3, r3, #4
 8002258:	6313      	str	r3, [r2, #48]	@ 0x30
 800225a:	4b65      	ldr	r3, [pc, #404]	@ (80023f0 <MX_GPIO_Init+0x1d8>)
 800225c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800225e:	f003 0304 	and.w	r3, r3, #4
 8002262:	617b      	str	r3, [r7, #20]
 8002264:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002266:	2300      	movs	r3, #0
 8002268:	613b      	str	r3, [r7, #16]
 800226a:	4b61      	ldr	r3, [pc, #388]	@ (80023f0 <MX_GPIO_Init+0x1d8>)
 800226c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800226e:	4a60      	ldr	r2, [pc, #384]	@ (80023f0 <MX_GPIO_Init+0x1d8>)
 8002270:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002274:	6313      	str	r3, [r2, #48]	@ 0x30
 8002276:	4b5e      	ldr	r3, [pc, #376]	@ (80023f0 <MX_GPIO_Init+0x1d8>)
 8002278:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800227a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800227e:	613b      	str	r3, [r7, #16]
 8002280:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002282:	2300      	movs	r3, #0
 8002284:	60fb      	str	r3, [r7, #12]
 8002286:	4b5a      	ldr	r3, [pc, #360]	@ (80023f0 <MX_GPIO_Init+0x1d8>)
 8002288:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800228a:	4a59      	ldr	r2, [pc, #356]	@ (80023f0 <MX_GPIO_Init+0x1d8>)
 800228c:	f043 0301 	orr.w	r3, r3, #1
 8002290:	6313      	str	r3, [r2, #48]	@ 0x30
 8002292:	4b57      	ldr	r3, [pc, #348]	@ (80023f0 <MX_GPIO_Init+0x1d8>)
 8002294:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002296:	f003 0301 	and.w	r3, r3, #1
 800229a:	60fb      	str	r3, [r7, #12]
 800229c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800229e:	2300      	movs	r3, #0
 80022a0:	60bb      	str	r3, [r7, #8]
 80022a2:	4b53      	ldr	r3, [pc, #332]	@ (80023f0 <MX_GPIO_Init+0x1d8>)
 80022a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022a6:	4a52      	ldr	r2, [pc, #328]	@ (80023f0 <MX_GPIO_Init+0x1d8>)
 80022a8:	f043 0308 	orr.w	r3, r3, #8
 80022ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80022ae:	4b50      	ldr	r3, [pc, #320]	@ (80023f0 <MX_GPIO_Init+0x1d8>)
 80022b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022b2:	f003 0308 	and.w	r3, r3, #8
 80022b6:	60bb      	str	r3, [r7, #8]
 80022b8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80022ba:	2300      	movs	r3, #0
 80022bc:	607b      	str	r3, [r7, #4]
 80022be:	4b4c      	ldr	r3, [pc, #304]	@ (80023f0 <MX_GPIO_Init+0x1d8>)
 80022c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022c2:	4a4b      	ldr	r2, [pc, #300]	@ (80023f0 <MX_GPIO_Init+0x1d8>)
 80022c4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80022c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80022ca:	4b49      	ldr	r3, [pc, #292]	@ (80023f0 <MX_GPIO_Init+0x1d8>)
 80022cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022ce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80022d2:	607b      	str	r3, [r7, #4]
 80022d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80022d6:	2300      	movs	r3, #0
 80022d8:	603b      	str	r3, [r7, #0]
 80022da:	4b45      	ldr	r3, [pc, #276]	@ (80023f0 <MX_GPIO_Init+0x1d8>)
 80022dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022de:	4a44      	ldr	r2, [pc, #272]	@ (80023f0 <MX_GPIO_Init+0x1d8>)
 80022e0:	f043 0302 	orr.w	r3, r3, #2
 80022e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80022e6:	4b42      	ldr	r3, [pc, #264]	@ (80023f0 <MX_GPIO_Init+0x1d8>)
 80022e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022ea:	f003 0302 	and.w	r3, r3, #2
 80022ee:	603b      	str	r3, [r7, #0]
 80022f0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, DEBUG_LED_Pin|OUTPUT_Y0_Pin|OUTPUT_Y1_Pin, GPIO_PIN_RESET);
 80022f2:	2200      	movs	r2, #0
 80022f4:	2170      	movs	r1, #112	@ 0x70
 80022f6:	483f      	ldr	r0, [pc, #252]	@ (80023f4 <MX_GPIO_Init+0x1dc>)
 80022f8:	f001 fc2e 	bl	8003b58 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_RESET);
 80022fc:	2200      	movs	r2, #0
 80022fe:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002302:	483d      	ldr	r0, [pc, #244]	@ (80023f8 <MX_GPIO_Init+0x1e0>)
 8002304:	f001 fc28 	bl	8003b58 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, GPIO_PIN_RESET);
 8002308:	2200      	movs	r2, #0
 800230a:	2140      	movs	r1, #64	@ 0x40
 800230c:	483b      	ldr	r0, [pc, #236]	@ (80023fc <MX_GPIO_Init+0x1e4>)
 800230e:	f001 fc23 	bl	8003b58 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FSMC_BLK_GPIO_Port, FSMC_BLK_Pin, GPIO_PIN_RESET);
 8002312:	2200      	movs	r2, #0
 8002314:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002318:	4839      	ldr	r0, [pc, #228]	@ (8002400 <MX_GPIO_Init+0x1e8>)
 800231a:	f001 fc1d 	bl	8003b58 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, GPIO_PIN_RESET);
 800231e:	2200      	movs	r2, #0
 8002320:	2108      	movs	r1, #8
 8002322:	4838      	ldr	r0, [pc, #224]	@ (8002404 <MX_GPIO_Init+0x1ec>)
 8002324:	f001 fc18 	bl	8003b58 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = DEBUG_LED_Pin|OUTPUT_Y0_Pin|OUTPUT_Y1_Pin;
 8002328:	2370      	movs	r3, #112	@ 0x70
 800232a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800232c:	2301      	movs	r3, #1
 800232e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002330:	2300      	movs	r3, #0
 8002332:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002334:	2300      	movs	r3, #0
 8002336:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002338:	f107 031c 	add.w	r3, r7, #28
 800233c:	4619      	mov	r1, r3
 800233e:	482d      	ldr	r0, [pc, #180]	@ (80023f4 <MX_GPIO_Init+0x1dc>)
 8002340:	f001 fa6e 	bl	8003820 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = FSMC_RES_Pin;
 8002344:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002348:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800234a:	2301      	movs	r3, #1
 800234c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800234e:	2300      	movs	r3, #0
 8002350:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002352:	2300      	movs	r3, #0
 8002354:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(FSMC_RES_GPIO_Port, &GPIO_InitStruct);
 8002356:	f107 031c 	add.w	r3, r7, #28
 800235a:	4619      	mov	r1, r3
 800235c:	4826      	ldr	r0, [pc, #152]	@ (80023f8 <MX_GPIO_Init+0x1e0>)
 800235e:	f001 fa5f 	bl	8003820 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = INPUT_X0_Pin|INPUT_X1_Pin;
 8002362:	23c0      	movs	r3, #192	@ 0xc0
 8002364:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002366:	2300      	movs	r3, #0
 8002368:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800236a:	2300      	movs	r3, #0
 800236c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800236e:	f107 031c 	add.w	r3, r7, #28
 8002372:	4619      	mov	r1, r3
 8002374:	4822      	ldr	r0, [pc, #136]	@ (8002400 <MX_GPIO_Init+0x1e8>)
 8002376:	f001 fa53 	bl	8003820 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = INPUT_X2_Pin|INPUT_X3_Pin;
 800237a:	2330      	movs	r3, #48	@ 0x30
 800237c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800237e:	2300      	movs	r3, #0
 8002380:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002382:	2300      	movs	r3, #0
 8002384:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002386:	f107 031c 	add.w	r3, r7, #28
 800238a:	4619      	mov	r1, r3
 800238c:	481a      	ldr	r0, [pc, #104]	@ (80023f8 <MX_GPIO_Init+0x1e0>)
 800238e:	f001 fa47 	bl	8003820 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD_LATCH_Pin;
 8002392:	2340      	movs	r3, #64	@ 0x40
 8002394:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002396:	2301      	movs	r3, #1
 8002398:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800239a:	2300      	movs	r3, #0
 800239c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800239e:	2300      	movs	r3, #0
 80023a0:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(LD_LATCH_GPIO_Port, &GPIO_InitStruct);
 80023a2:	f107 031c 	add.w	r3, r7, #28
 80023a6:	4619      	mov	r1, r3
 80023a8:	4814      	ldr	r0, [pc, #80]	@ (80023fc <MX_GPIO_Init+0x1e4>)
 80023aa:	f001 fa39 	bl	8003820 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = FSMC_BLK_Pin;
 80023ae:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80023b2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80023b4:	2301      	movs	r3, #1
 80023b6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023b8:	2300      	movs	r3, #0
 80023ba:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023bc:	2300      	movs	r3, #0
 80023be:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(FSMC_BLK_GPIO_Port, &GPIO_InitStruct);
 80023c0:	f107 031c 	add.w	r3, r7, #28
 80023c4:	4619      	mov	r1, r3
 80023c6:	480e      	ldr	r0, [pc, #56]	@ (8002400 <MX_GPIO_Init+0x1e8>)
 80023c8:	f001 fa2a 	bl	8003820 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BTN_LOAD_Pin;
 80023cc:	2308      	movs	r3, #8
 80023ce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80023d0:	2301      	movs	r3, #1
 80023d2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023d4:	2300      	movs	r3, #0
 80023d6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023d8:	2300      	movs	r3, #0
 80023da:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(BTN_LOAD_GPIO_Port, &GPIO_InitStruct);
 80023dc:	f107 031c 	add.w	r3, r7, #28
 80023e0:	4619      	mov	r1, r3
 80023e2:	4808      	ldr	r0, [pc, #32]	@ (8002404 <MX_GPIO_Init+0x1ec>)
 80023e4:	f001 fa1c 	bl	8003820 <HAL_GPIO_Init>

}
 80023e8:	bf00      	nop
 80023ea:	3730      	adds	r7, #48	@ 0x30
 80023ec:	46bd      	mov	sp, r7
 80023ee:	bd80      	pop	{r7, pc}
 80023f0:	40023800 	.word	0x40023800
 80023f4:	40021000 	.word	0x40021000
 80023f8:	40020800 	.word	0x40020800
 80023fc:	40021800 	.word	0x40021800
 8002400:	40020000 	.word	0x40020000
 8002404:	40020c00 	.word	0x40020c00

08002408 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8002408:	b580      	push	{r7, lr}
 800240a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800240c:	4b12      	ldr	r3, [pc, #72]	@ (8002458 <MX_I2C1_Init+0x50>)
 800240e:	4a13      	ldr	r2, [pc, #76]	@ (800245c <MX_I2C1_Init+0x54>)
 8002410:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8002412:	4b11      	ldr	r3, [pc, #68]	@ (8002458 <MX_I2C1_Init+0x50>)
 8002414:	4a12      	ldr	r2, [pc, #72]	@ (8002460 <MX_I2C1_Init+0x58>)
 8002416:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002418:	4b0f      	ldr	r3, [pc, #60]	@ (8002458 <MX_I2C1_Init+0x50>)
 800241a:	2200      	movs	r2, #0
 800241c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800241e:	4b0e      	ldr	r3, [pc, #56]	@ (8002458 <MX_I2C1_Init+0x50>)
 8002420:	2200      	movs	r2, #0
 8002422:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002424:	4b0c      	ldr	r3, [pc, #48]	@ (8002458 <MX_I2C1_Init+0x50>)
 8002426:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800242a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800242c:	4b0a      	ldr	r3, [pc, #40]	@ (8002458 <MX_I2C1_Init+0x50>)
 800242e:	2200      	movs	r2, #0
 8002430:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8002432:	4b09      	ldr	r3, [pc, #36]	@ (8002458 <MX_I2C1_Init+0x50>)
 8002434:	2200      	movs	r2, #0
 8002436:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002438:	4b07      	ldr	r3, [pc, #28]	@ (8002458 <MX_I2C1_Init+0x50>)
 800243a:	2200      	movs	r2, #0
 800243c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800243e:	4b06      	ldr	r3, [pc, #24]	@ (8002458 <MX_I2C1_Init+0x50>)
 8002440:	2200      	movs	r2, #0
 8002442:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002444:	4804      	ldr	r0, [pc, #16]	@ (8002458 <MX_I2C1_Init+0x50>)
 8002446:	f001 fba1 	bl	8003b8c <HAL_I2C_Init>
 800244a:	4603      	mov	r3, r0
 800244c:	2b00      	cmp	r3, #0
 800244e:	d001      	beq.n	8002454 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002450:	f000 fdca 	bl	8002fe8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002454:	bf00      	nop
 8002456:	bd80      	pop	{r7, pc}
 8002458:	200000f8 	.word	0x200000f8
 800245c:	40005400 	.word	0x40005400
 8002460:	000186a0 	.word	0x000186a0

08002464 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8002464:	b580      	push	{r7, lr}
 8002466:	b08a      	sub	sp, #40	@ 0x28
 8002468:	af00      	add	r7, sp, #0
 800246a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800246c:	f107 0314 	add.w	r3, r7, #20
 8002470:	2200      	movs	r2, #0
 8002472:	601a      	str	r2, [r3, #0]
 8002474:	605a      	str	r2, [r3, #4]
 8002476:	609a      	str	r2, [r3, #8]
 8002478:	60da      	str	r2, [r3, #12]
 800247a:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	4a19      	ldr	r2, [pc, #100]	@ (80024e8 <HAL_I2C_MspInit+0x84>)
 8002482:	4293      	cmp	r3, r2
 8002484:	d12b      	bne.n	80024de <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002486:	2300      	movs	r3, #0
 8002488:	613b      	str	r3, [r7, #16]
 800248a:	4b18      	ldr	r3, [pc, #96]	@ (80024ec <HAL_I2C_MspInit+0x88>)
 800248c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800248e:	4a17      	ldr	r2, [pc, #92]	@ (80024ec <HAL_I2C_MspInit+0x88>)
 8002490:	f043 0302 	orr.w	r3, r3, #2
 8002494:	6313      	str	r3, [r2, #48]	@ 0x30
 8002496:	4b15      	ldr	r3, [pc, #84]	@ (80024ec <HAL_I2C_MspInit+0x88>)
 8002498:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800249a:	f003 0302 	and.w	r3, r3, #2
 800249e:	613b      	str	r3, [r7, #16]
 80024a0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80024a2:	23c0      	movs	r3, #192	@ 0xc0
 80024a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80024a6:	2312      	movs	r3, #18
 80024a8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024aa:	2300      	movs	r3, #0
 80024ac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024ae:	2303      	movs	r3, #3
 80024b0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80024b2:	2304      	movs	r3, #4
 80024b4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80024b6:	f107 0314 	add.w	r3, r7, #20
 80024ba:	4619      	mov	r1, r3
 80024bc:	480c      	ldr	r0, [pc, #48]	@ (80024f0 <HAL_I2C_MspInit+0x8c>)
 80024be:	f001 f9af 	bl	8003820 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80024c2:	2300      	movs	r3, #0
 80024c4:	60fb      	str	r3, [r7, #12]
 80024c6:	4b09      	ldr	r3, [pc, #36]	@ (80024ec <HAL_I2C_MspInit+0x88>)
 80024c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024ca:	4a08      	ldr	r2, [pc, #32]	@ (80024ec <HAL_I2C_MspInit+0x88>)
 80024cc:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80024d0:	6413      	str	r3, [r2, #64]	@ 0x40
 80024d2:	4b06      	ldr	r3, [pc, #24]	@ (80024ec <HAL_I2C_MspInit+0x88>)
 80024d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024d6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80024da:	60fb      	str	r3, [r7, #12]
 80024dc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80024de:	bf00      	nop
 80024e0:	3728      	adds	r7, #40	@ 0x28
 80024e2:	46bd      	mov	sp, r7
 80024e4:	bd80      	pop	{r7, pc}
 80024e6:	bf00      	nop
 80024e8:	40005400 	.word	0x40005400
 80024ec:	40023800 	.word	0x40023800
 80024f0:	40020400 	.word	0x40020400

080024f4 <LCD_WR_REG>:
unsigned char s[50];

_lcd_dev lcddev;

void LCD_WR_REG(uint16_t reg) //
{
 80024f4:	b480      	push	{r7}
 80024f6:	b083      	sub	sp, #12
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	4603      	mov	r3, r0
 80024fc:	80fb      	strh	r3, [r7, #6]
	LCD->LCD_REG=reg;
 80024fe:	4a04      	ldr	r2, [pc, #16]	@ (8002510 <LCD_WR_REG+0x1c>)
 8002500:	88fb      	ldrh	r3, [r7, #6]
 8002502:	8013      	strh	r3, [r2, #0]
}
 8002504:	bf00      	nop
 8002506:	370c      	adds	r7, #12
 8002508:	46bd      	mov	sp, r7
 800250a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250e:	4770      	bx	lr
 8002510:	600ffffe 	.word	0x600ffffe

08002514 <LCD_WR_DATA>:

void LCD_WR_DATA(uint16_t data)
{
 8002514:	b480      	push	{r7}
 8002516:	b083      	sub	sp, #12
 8002518:	af00      	add	r7, sp, #0
 800251a:	4603      	mov	r3, r0
 800251c:	80fb      	strh	r3, [r7, #6]
	LCD->LCD_RAM=data;
 800251e:	4a04      	ldr	r2, [pc, #16]	@ (8002530 <LCD_WR_DATA+0x1c>)
 8002520:	88fb      	ldrh	r3, [r7, #6]
 8002522:	8053      	strh	r3, [r2, #2]
}
 8002524:	bf00      	nop
 8002526:	370c      	adds	r7, #12
 8002528:	46bd      	mov	sp, r7
 800252a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252e:	4770      	bx	lr
 8002530:	600ffffe 	.word	0x600ffffe

08002534 <LCD_RD_DATA>:

uint16_t LCD_RD_DATA(void)
{
 8002534:	b480      	push	{r7}
 8002536:	b083      	sub	sp, #12
 8002538:	af00      	add	r7, sp, #0
	__IO uint16_t ram;
	ram=LCD->LCD_RAM;
 800253a:	4b06      	ldr	r3, [pc, #24]	@ (8002554 <LCD_RD_DATA+0x20>)
 800253c:	885b      	ldrh	r3, [r3, #2]
 800253e:	b29b      	uxth	r3, r3
 8002540:	80fb      	strh	r3, [r7, #6]
	return ram;
 8002542:	88fb      	ldrh	r3, [r7, #6]
 8002544:	b29b      	uxth	r3, r3
}
 8002546:	4618      	mov	r0, r3
 8002548:	370c      	adds	r7, #12
 800254a:	46bd      	mov	sp, r7
 800254c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002550:	4770      	bx	lr
 8002552:	bf00      	nop
 8002554:	600ffffe 	.word	0x600ffffe

08002558 <lcd_AddressSet>:


void lcd_AddressSet(uint16_t x1,uint16_t y1,uint16_t x2,uint16_t y2)
{
 8002558:	b590      	push	{r4, r7, lr}
 800255a:	b083      	sub	sp, #12
 800255c:	af00      	add	r7, sp, #0
 800255e:	4604      	mov	r4, r0
 8002560:	4608      	mov	r0, r1
 8002562:	4611      	mov	r1, r2
 8002564:	461a      	mov	r2, r3
 8002566:	4623      	mov	r3, r4
 8002568:	80fb      	strh	r3, [r7, #6]
 800256a:	4603      	mov	r3, r0
 800256c:	80bb      	strh	r3, [r7, #4]
 800256e:	460b      	mov	r3, r1
 8002570:	807b      	strh	r3, [r7, #2]
 8002572:	4613      	mov	r3, r2
 8002574:	803b      	strh	r3, [r7, #0]
		LCD_WR_REG(0x2a);
 8002576:	202a      	movs	r0, #42	@ 0x2a
 8002578:	f7ff ffbc 	bl	80024f4 <LCD_WR_REG>
		LCD_WR_DATA(x1>>8);
 800257c:	88fb      	ldrh	r3, [r7, #6]
 800257e:	0a1b      	lsrs	r3, r3, #8
 8002580:	b29b      	uxth	r3, r3
 8002582:	4618      	mov	r0, r3
 8002584:	f7ff ffc6 	bl	8002514 <LCD_WR_DATA>
		LCD_WR_DATA(x1&0xff);
 8002588:	88fb      	ldrh	r3, [r7, #6]
 800258a:	b2db      	uxtb	r3, r3
 800258c:	b29b      	uxth	r3, r3
 800258e:	4618      	mov	r0, r3
 8002590:	f7ff ffc0 	bl	8002514 <LCD_WR_DATA>
		LCD_WR_DATA(x2>>8);
 8002594:	887b      	ldrh	r3, [r7, #2]
 8002596:	0a1b      	lsrs	r3, r3, #8
 8002598:	b29b      	uxth	r3, r3
 800259a:	4618      	mov	r0, r3
 800259c:	f7ff ffba 	bl	8002514 <LCD_WR_DATA>
		LCD_WR_DATA(x2&0xff);
 80025a0:	887b      	ldrh	r3, [r7, #2]
 80025a2:	b2db      	uxtb	r3, r3
 80025a4:	b29b      	uxth	r3, r3
 80025a6:	4618      	mov	r0, r3
 80025a8:	f7ff ffb4 	bl	8002514 <LCD_WR_DATA>
		LCD_WR_REG(0x2b);
 80025ac:	202b      	movs	r0, #43	@ 0x2b
 80025ae:	f7ff ffa1 	bl	80024f4 <LCD_WR_REG>
		LCD_WR_DATA(y1>>8);
 80025b2:	88bb      	ldrh	r3, [r7, #4]
 80025b4:	0a1b      	lsrs	r3, r3, #8
 80025b6:	b29b      	uxth	r3, r3
 80025b8:	4618      	mov	r0, r3
 80025ba:	f7ff ffab 	bl	8002514 <LCD_WR_DATA>
		LCD_WR_DATA(y1&0xff);
 80025be:	88bb      	ldrh	r3, [r7, #4]
 80025c0:	b2db      	uxtb	r3, r3
 80025c2:	b29b      	uxth	r3, r3
 80025c4:	4618      	mov	r0, r3
 80025c6:	f7ff ffa5 	bl	8002514 <LCD_WR_DATA>
		LCD_WR_DATA(y2>>8);
 80025ca:	883b      	ldrh	r3, [r7, #0]
 80025cc:	0a1b      	lsrs	r3, r3, #8
 80025ce:	b29b      	uxth	r3, r3
 80025d0:	4618      	mov	r0, r3
 80025d2:	f7ff ff9f 	bl	8002514 <LCD_WR_DATA>
		LCD_WR_DATA(y2&0xff);
 80025d6:	883b      	ldrh	r3, [r7, #0]
 80025d8:	b2db      	uxtb	r3, r3
 80025da:	b29b      	uxth	r3, r3
 80025dc:	4618      	mov	r0, r3
 80025de:	f7ff ff99 	bl	8002514 <LCD_WR_DATA>
		LCD_WR_REG(0x2c);
 80025e2:	202c      	movs	r0, #44	@ 0x2c
 80025e4:	f7ff ff86 	bl	80024f4 <LCD_WR_REG>
}
 80025e8:	bf00      	nop
 80025ea:	370c      	adds	r7, #12
 80025ec:	46bd      	mov	sp, r7
 80025ee:	bd90      	pop	{r4, r7, pc}

080025f0 <lcd_Clear>:
	return (((r>>11)<<11)|((g>>10)<<5)|(b>>11));
}


void lcd_Clear(uint16_t color) //
{
 80025f0:	b580      	push	{r7, lr}
 80025f2:	b084      	sub	sp, #16
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	4603      	mov	r3, r0
 80025f8:	80fb      	strh	r3, [r7, #6]
	uint16_t i,j;
	uint8_t buffer[2];
	buffer[0] = color >> 8;
 80025fa:	88fb      	ldrh	r3, [r7, #6]
 80025fc:	0a1b      	lsrs	r3, r3, #8
 80025fe:	b29b      	uxth	r3, r3
 8002600:	b2db      	uxtb	r3, r3
 8002602:	723b      	strb	r3, [r7, #8]
	buffer[1] = color;
 8002604:	88fb      	ldrh	r3, [r7, #6]
 8002606:	b2db      	uxtb	r3, r3
 8002608:	727b      	strb	r3, [r7, #9]
	lcd_AddressSet(0,0,lcddev.width-1,lcddev.height-1);
 800260a:	4b15      	ldr	r3, [pc, #84]	@ (8002660 <lcd_Clear+0x70>)
 800260c:	881b      	ldrh	r3, [r3, #0]
 800260e:	3b01      	subs	r3, #1
 8002610:	b29a      	uxth	r2, r3
 8002612:	4b13      	ldr	r3, [pc, #76]	@ (8002660 <lcd_Clear+0x70>)
 8002614:	885b      	ldrh	r3, [r3, #2]
 8002616:	3b01      	subs	r3, #1
 8002618:	b29b      	uxth	r3, r3
 800261a:	2100      	movs	r1, #0
 800261c:	2000      	movs	r0, #0
 800261e:	f7ff ff9b 	bl	8002558 <lcd_AddressSet>
	for(i=0;i<lcddev.width;i++)
 8002622:	2300      	movs	r3, #0
 8002624:	81fb      	strh	r3, [r7, #14]
 8002626:	e011      	b.n	800264c <lcd_Clear+0x5c>
	{
		for(j=0;j<lcddev.height;j++)
 8002628:	2300      	movs	r3, #0
 800262a:	81bb      	strh	r3, [r7, #12]
 800262c:	e006      	b.n	800263c <lcd_Clear+0x4c>
		{
			LCD_WR_DATA(color);
 800262e:	88fb      	ldrh	r3, [r7, #6]
 8002630:	4618      	mov	r0, r3
 8002632:	f7ff ff6f 	bl	8002514 <LCD_WR_DATA>
		for(j=0;j<lcddev.height;j++)
 8002636:	89bb      	ldrh	r3, [r7, #12]
 8002638:	3301      	adds	r3, #1
 800263a:	81bb      	strh	r3, [r7, #12]
 800263c:	4b08      	ldr	r3, [pc, #32]	@ (8002660 <lcd_Clear+0x70>)
 800263e:	885b      	ldrh	r3, [r3, #2]
 8002640:	89ba      	ldrh	r2, [r7, #12]
 8002642:	429a      	cmp	r2, r3
 8002644:	d3f3      	bcc.n	800262e <lcd_Clear+0x3e>
	for(i=0;i<lcddev.width;i++)
 8002646:	89fb      	ldrh	r3, [r7, #14]
 8002648:	3301      	adds	r3, #1
 800264a:	81fb      	strh	r3, [r7, #14]
 800264c:	4b04      	ldr	r3, [pc, #16]	@ (8002660 <lcd_Clear+0x70>)
 800264e:	881b      	ldrh	r3, [r3, #0]
 8002650:	89fa      	ldrh	r2, [r7, #14]
 8002652:	429a      	cmp	r2, r3
 8002654:	d3e8      	bcc.n	8002628 <lcd_Clear+0x38>
//			sram_WriteBuffer(&buffer, (i*lcddev.width+j)*4, 2);
		}
	}
}
 8002656:	bf00      	nop
 8002658:	bf00      	nop
 800265a:	3710      	adds	r7, #16
 800265c:	46bd      	mov	sp, r7
 800265e:	bd80      	pop	{r7, pc}
 8002660:	2000014c 	.word	0x2000014c

08002664 <lcd_DrawPoint>:
		}
	}
}

void lcd_DrawPoint(uint16_t x,uint16_t y,uint16_t color) // 1 ddieemr anhr
{
 8002664:	b580      	push	{r7, lr}
 8002666:	b082      	sub	sp, #8
 8002668:	af00      	add	r7, sp, #0
 800266a:	4603      	mov	r3, r0
 800266c:	80fb      	strh	r3, [r7, #6]
 800266e:	460b      	mov	r3, r1
 8002670:	80bb      	strh	r3, [r7, #4]
 8002672:	4613      	mov	r3, r2
 8002674:	807b      	strh	r3, [r7, #2]
	lcd_AddressSet(x,y,x,y);//ÉèÖÃ¹â±êÎ»ÖÃ
 8002676:	88bb      	ldrh	r3, [r7, #4]
 8002678:	88fa      	ldrh	r2, [r7, #6]
 800267a:	88b9      	ldrh	r1, [r7, #4]
 800267c:	88f8      	ldrh	r0, [r7, #6]
 800267e:	f7ff ff6b 	bl	8002558 <lcd_AddressSet>
	LCD_WR_DATA(color);
 8002682:	887b      	ldrh	r3, [r7, #2]
 8002684:	4618      	mov	r0, r3
 8002686:	f7ff ff45 	bl	8002514 <LCD_WR_DATA>
}
 800268a:	bf00      	nop
 800268c:	3708      	adds	r7, #8
 800268e:	46bd      	mov	sp, r7
 8002690:	bd80      	pop	{r7, pc}
	...

08002694 <lcd_ShowChar>:
	lcd_DrawLine(x1,y2,x2,y2,color);
	lcd_DrawLine(x2,y1,x2,y2,color);
}

void lcd_ShowChar(uint16_t x,uint16_t y,uint8_t num,uint16_t fc,uint16_t bc,uint8_t sizey,uint8_t mode) // 1ky tu size = 12 16 24 32, fc: mau chuw, bc, mauf neefn, mode: hien neen
{
 8002694:	b590      	push	{r4, r7, lr}
 8002696:	b087      	sub	sp, #28
 8002698:	af00      	add	r7, sp, #0
 800269a:	4604      	mov	r4, r0
 800269c:	4608      	mov	r0, r1
 800269e:	4611      	mov	r1, r2
 80026a0:	461a      	mov	r2, r3
 80026a2:	4623      	mov	r3, r4
 80026a4:	80fb      	strh	r3, [r7, #6]
 80026a6:	4603      	mov	r3, r0
 80026a8:	80bb      	strh	r3, [r7, #4]
 80026aa:	460b      	mov	r3, r1
 80026ac:	70fb      	strb	r3, [r7, #3]
 80026ae:	4613      	mov	r3, r2
 80026b0:	803b      	strh	r3, [r7, #0]
	uint8_t temp,sizex,t,m=0;
 80026b2:	2300      	movs	r3, #0
 80026b4:	757b      	strb	r3, [r7, #21]
	uint16_t i,TypefaceNum;
	uint16_t x0=x;
 80026b6:	88fb      	ldrh	r3, [r7, #6]
 80026b8:	823b      	strh	r3, [r7, #16]
	sizex=sizey/2;
 80026ba:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80026be:	085b      	lsrs	r3, r3, #1
 80026c0:	73fb      	strb	r3, [r7, #15]
	TypefaceNum=(sizex/8+((sizex%8)?1:0))*sizey;
 80026c2:	7bfb      	ldrb	r3, [r7, #15]
 80026c4:	08db      	lsrs	r3, r3, #3
 80026c6:	b2db      	uxtb	r3, r3
 80026c8:	461a      	mov	r2, r3
 80026ca:	7bfb      	ldrb	r3, [r7, #15]
 80026cc:	f003 0307 	and.w	r3, r3, #7
 80026d0:	b2db      	uxtb	r3, r3
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	bf14      	ite	ne
 80026d6:	2301      	movne	r3, #1
 80026d8:	2300      	moveq	r3, #0
 80026da:	b2db      	uxtb	r3, r3
 80026dc:	4413      	add	r3, r2
 80026de:	b29a      	uxth	r2, r3
 80026e0:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80026e4:	b29b      	uxth	r3, r3
 80026e6:	fb12 f303 	smulbb	r3, r2, r3
 80026ea:	81bb      	strh	r3, [r7, #12]
	num=num-' ';
 80026ec:	78fb      	ldrb	r3, [r7, #3]
 80026ee:	3b20      	subs	r3, #32
 80026f0:	70fb      	strb	r3, [r7, #3]
	lcd_AddressSet(x,y,x+sizex-1,y+sizey-1);
 80026f2:	7bfb      	ldrb	r3, [r7, #15]
 80026f4:	b29a      	uxth	r2, r3
 80026f6:	88fb      	ldrh	r3, [r7, #6]
 80026f8:	4413      	add	r3, r2
 80026fa:	b29b      	uxth	r3, r3
 80026fc:	3b01      	subs	r3, #1
 80026fe:	b29c      	uxth	r4, r3
 8002700:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8002704:	b29a      	uxth	r2, r3
 8002706:	88bb      	ldrh	r3, [r7, #4]
 8002708:	4413      	add	r3, r2
 800270a:	b29b      	uxth	r3, r3
 800270c:	3b01      	subs	r3, #1
 800270e:	b29b      	uxth	r3, r3
 8002710:	88b9      	ldrh	r1, [r7, #4]
 8002712:	88f8      	ldrh	r0, [r7, #6]
 8002714:	4622      	mov	r2, r4
 8002716:	f7ff ff1f 	bl	8002558 <lcd_AddressSet>
	for(i=0;i<TypefaceNum;i++)
 800271a:	2300      	movs	r3, #0
 800271c:	827b      	strh	r3, [r7, #18]
 800271e:	e07a      	b.n	8002816 <lcd_ShowChar+0x182>
	{
		if(sizey==12);
 8002720:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8002724:	2b0c      	cmp	r3, #12
 8002726:	d028      	beq.n	800277a <lcd_ShowChar+0xe6>
		else if(sizey==16)temp=ascii_1608[num][i];
 8002728:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800272c:	2b10      	cmp	r3, #16
 800272e:	d108      	bne.n	8002742 <lcd_ShowChar+0xae>
 8002730:	78fa      	ldrb	r2, [r7, #3]
 8002732:	8a7b      	ldrh	r3, [r7, #18]
 8002734:	493c      	ldr	r1, [pc, #240]	@ (8002828 <lcd_ShowChar+0x194>)
 8002736:	0112      	lsls	r2, r2, #4
 8002738:	440a      	add	r2, r1
 800273a:	4413      	add	r3, r2
 800273c:	781b      	ldrb	r3, [r3, #0]
 800273e:	75fb      	strb	r3, [r7, #23]
 8002740:	e01b      	b.n	800277a <lcd_ShowChar+0xe6>
		else if(sizey==24)temp=ascii_2412[num][i];
 8002742:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8002746:	2b18      	cmp	r3, #24
 8002748:	d10b      	bne.n	8002762 <lcd_ShowChar+0xce>
 800274a:	78fa      	ldrb	r2, [r7, #3]
 800274c:	8a79      	ldrh	r1, [r7, #18]
 800274e:	4837      	ldr	r0, [pc, #220]	@ (800282c <lcd_ShowChar+0x198>)
 8002750:	4613      	mov	r3, r2
 8002752:	005b      	lsls	r3, r3, #1
 8002754:	4413      	add	r3, r2
 8002756:	011b      	lsls	r3, r3, #4
 8002758:	4403      	add	r3, r0
 800275a:	440b      	add	r3, r1
 800275c:	781b      	ldrb	r3, [r3, #0]
 800275e:	75fb      	strb	r3, [r7, #23]
 8002760:	e00b      	b.n	800277a <lcd_ShowChar+0xe6>
		else if(sizey==32)temp=ascii_3216[num][i];
 8002762:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8002766:	2b20      	cmp	r3, #32
 8002768:	d15a      	bne.n	8002820 <lcd_ShowChar+0x18c>
 800276a:	78fa      	ldrb	r2, [r7, #3]
 800276c:	8a7b      	ldrh	r3, [r7, #18]
 800276e:	4930      	ldr	r1, [pc, #192]	@ (8002830 <lcd_ShowChar+0x19c>)
 8002770:	0192      	lsls	r2, r2, #6
 8002772:	440a      	add	r2, r1
 8002774:	4413      	add	r3, r2
 8002776:	781b      	ldrb	r3, [r3, #0]
 8002778:	75fb      	strb	r3, [r7, #23]
		else return;
		for(t=0;t<8;t++)
 800277a:	2300      	movs	r3, #0
 800277c:	75bb      	strb	r3, [r7, #22]
 800277e:	e044      	b.n	800280a <lcd_ShowChar+0x176>
		{
			if(!mode)
 8002780:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8002784:	2b00      	cmp	r3, #0
 8002786:	d120      	bne.n	80027ca <lcd_ShowChar+0x136>
			{
				if(temp&(0x01<<t))LCD_WR_DATA(fc);
 8002788:	7dfa      	ldrb	r2, [r7, #23]
 800278a:	7dbb      	ldrb	r3, [r7, #22]
 800278c:	fa42 f303 	asr.w	r3, r2, r3
 8002790:	f003 0301 	and.w	r3, r3, #1
 8002794:	2b00      	cmp	r3, #0
 8002796:	d004      	beq.n	80027a2 <lcd_ShowChar+0x10e>
 8002798:	883b      	ldrh	r3, [r7, #0]
 800279a:	4618      	mov	r0, r3
 800279c:	f7ff feba 	bl	8002514 <LCD_WR_DATA>
 80027a0:	e003      	b.n	80027aa <lcd_ShowChar+0x116>
				else LCD_WR_DATA(bc);
 80027a2:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80027a4:	4618      	mov	r0, r3
 80027a6:	f7ff feb5 	bl	8002514 <LCD_WR_DATA>
				m++;
 80027aa:	7d7b      	ldrb	r3, [r7, #21]
 80027ac:	3301      	adds	r3, #1
 80027ae:	757b      	strb	r3, [r7, #21]
				if(m%sizex==0)
 80027b0:	7d7b      	ldrb	r3, [r7, #21]
 80027b2:	7bfa      	ldrb	r2, [r7, #15]
 80027b4:	fbb3 f1f2 	udiv	r1, r3, r2
 80027b8:	fb01 f202 	mul.w	r2, r1, r2
 80027bc:	1a9b      	subs	r3, r3, r2
 80027be:	b2db      	uxtb	r3, r3
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d11f      	bne.n	8002804 <lcd_ShowChar+0x170>
				{
					m=0;
 80027c4:	2300      	movs	r3, #0
 80027c6:	757b      	strb	r3, [r7, #21]
					break;
 80027c8:	e022      	b.n	8002810 <lcd_ShowChar+0x17c>
				}
			}
			else
			{
				if(temp&(0x01<<t))lcd_DrawPoint(x,y,fc);
 80027ca:	7dfa      	ldrb	r2, [r7, #23]
 80027cc:	7dbb      	ldrb	r3, [r7, #22]
 80027ce:	fa42 f303 	asr.w	r3, r2, r3
 80027d2:	f003 0301 	and.w	r3, r3, #1
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d005      	beq.n	80027e6 <lcd_ShowChar+0x152>
 80027da:	883a      	ldrh	r2, [r7, #0]
 80027dc:	88b9      	ldrh	r1, [r7, #4]
 80027de:	88fb      	ldrh	r3, [r7, #6]
 80027e0:	4618      	mov	r0, r3
 80027e2:	f7ff ff3f 	bl	8002664 <lcd_DrawPoint>
				x++;
 80027e6:	88fb      	ldrh	r3, [r7, #6]
 80027e8:	3301      	adds	r3, #1
 80027ea:	80fb      	strh	r3, [r7, #6]
				if((x-x0)==sizex)
 80027ec:	88fa      	ldrh	r2, [r7, #6]
 80027ee:	8a3b      	ldrh	r3, [r7, #16]
 80027f0:	1ad2      	subs	r2, r2, r3
 80027f2:	7bfb      	ldrb	r3, [r7, #15]
 80027f4:	429a      	cmp	r2, r3
 80027f6:	d105      	bne.n	8002804 <lcd_ShowChar+0x170>
				{
					x=x0;
 80027f8:	8a3b      	ldrh	r3, [r7, #16]
 80027fa:	80fb      	strh	r3, [r7, #6]
					y++;
 80027fc:	88bb      	ldrh	r3, [r7, #4]
 80027fe:	3301      	adds	r3, #1
 8002800:	80bb      	strh	r3, [r7, #4]
					break;
 8002802:	e005      	b.n	8002810 <lcd_ShowChar+0x17c>
		for(t=0;t<8;t++)
 8002804:	7dbb      	ldrb	r3, [r7, #22]
 8002806:	3301      	adds	r3, #1
 8002808:	75bb      	strb	r3, [r7, #22]
 800280a:	7dbb      	ldrb	r3, [r7, #22]
 800280c:	2b07      	cmp	r3, #7
 800280e:	d9b7      	bls.n	8002780 <lcd_ShowChar+0xec>
	for(i=0;i<TypefaceNum;i++)
 8002810:	8a7b      	ldrh	r3, [r7, #18]
 8002812:	3301      	adds	r3, #1
 8002814:	827b      	strh	r3, [r7, #18]
 8002816:	8a7a      	ldrh	r2, [r7, #18]
 8002818:	89bb      	ldrh	r3, [r7, #12]
 800281a:	429a      	cmp	r2, r3
 800281c:	d380      	bcc.n	8002720 <lcd_ShowChar+0x8c>
 800281e:	e000      	b.n	8002822 <lcd_ShowChar+0x18e>
		else return;
 8002820:	bf00      	nop
				}
			}
		}
	}
}
 8002822:	371c      	adds	r7, #28
 8002824:	46bd      	mov	sp, r7
 8002826:	bd90      	pop	{r4, r7, pc}
 8002828:	08006d84 	.word	0x08006d84
 800282c:	08007374 	.word	0x08007374
 8002830:	08008544 	.word	0x08008544

08002834 <mypow>:

uint32_t mypow(uint8_t m,uint8_t n)
{
 8002834:	b480      	push	{r7}
 8002836:	b085      	sub	sp, #20
 8002838:	af00      	add	r7, sp, #0
 800283a:	4603      	mov	r3, r0
 800283c:	460a      	mov	r2, r1
 800283e:	71fb      	strb	r3, [r7, #7]
 8002840:	4613      	mov	r3, r2
 8002842:	71bb      	strb	r3, [r7, #6]
	uint32_t result=1;
 8002844:	2301      	movs	r3, #1
 8002846:	60fb      	str	r3, [r7, #12]
	while(n--)result*=m;
 8002848:	e004      	b.n	8002854 <mypow+0x20>
 800284a:	79fa      	ldrb	r2, [r7, #7]
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	fb02 f303 	mul.w	r3, r2, r3
 8002852:	60fb      	str	r3, [r7, #12]
 8002854:	79bb      	ldrb	r3, [r7, #6]
 8002856:	1e5a      	subs	r2, r3, #1
 8002858:	71ba      	strb	r2, [r7, #6]
 800285a:	2b00      	cmp	r3, #0
 800285c:	d1f5      	bne.n	800284a <mypow+0x16>
	return result;
 800285e:	68fb      	ldr	r3, [r7, #12]
}
 8002860:	4618      	mov	r0, r3
 8002862:	3714      	adds	r7, #20
 8002864:	46bd      	mov	sp, r7
 8002866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800286a:	4770      	bx	lr

0800286c <lcd_ShowIntNum>:

void lcd_ShowIntNum(uint16_t x,uint16_t y,uint16_t num,uint8_t len,uint16_t fc,uint16_t bc,uint8_t sizey) //len: ddooj daif cuar so
{
 800286c:	b590      	push	{r4, r7, lr}
 800286e:	b089      	sub	sp, #36	@ 0x24
 8002870:	af04      	add	r7, sp, #16
 8002872:	4604      	mov	r4, r0
 8002874:	4608      	mov	r0, r1
 8002876:	4611      	mov	r1, r2
 8002878:	461a      	mov	r2, r3
 800287a:	4623      	mov	r3, r4
 800287c:	80fb      	strh	r3, [r7, #6]
 800287e:	4603      	mov	r3, r0
 8002880:	80bb      	strh	r3, [r7, #4]
 8002882:	460b      	mov	r3, r1
 8002884:	807b      	strh	r3, [r7, #2]
 8002886:	4613      	mov	r3, r2
 8002888:	707b      	strb	r3, [r7, #1]
	uint8_t t,temp;
	uint8_t enshow=0;
 800288a:	2300      	movs	r3, #0
 800288c:	73bb      	strb	r3, [r7, #14]
	uint8_t sizex=sizey/2;
 800288e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8002892:	085b      	lsrs	r3, r3, #1
 8002894:	737b      	strb	r3, [r7, #13]
	for(t=0;t<len;t++)
 8002896:	2300      	movs	r3, #0
 8002898:	73fb      	strb	r3, [r7, #15]
 800289a:	e059      	b.n	8002950 <lcd_ShowIntNum+0xe4>
	{
		temp=(num/mypow(10,len-t-1))%10;
 800289c:	887c      	ldrh	r4, [r7, #2]
 800289e:	787a      	ldrb	r2, [r7, #1]
 80028a0:	7bfb      	ldrb	r3, [r7, #15]
 80028a2:	1ad3      	subs	r3, r2, r3
 80028a4:	b2db      	uxtb	r3, r3
 80028a6:	3b01      	subs	r3, #1
 80028a8:	b2db      	uxtb	r3, r3
 80028aa:	4619      	mov	r1, r3
 80028ac:	200a      	movs	r0, #10
 80028ae:	f7ff ffc1 	bl	8002834 <mypow>
 80028b2:	4603      	mov	r3, r0
 80028b4:	fbb4 f1f3 	udiv	r1, r4, r3
 80028b8:	4b2a      	ldr	r3, [pc, #168]	@ (8002964 <lcd_ShowIntNum+0xf8>)
 80028ba:	fba3 2301 	umull	r2, r3, r3, r1
 80028be:	08da      	lsrs	r2, r3, #3
 80028c0:	4613      	mov	r3, r2
 80028c2:	009b      	lsls	r3, r3, #2
 80028c4:	4413      	add	r3, r2
 80028c6:	005b      	lsls	r3, r3, #1
 80028c8:	1aca      	subs	r2, r1, r3
 80028ca:	4613      	mov	r3, r2
 80028cc:	733b      	strb	r3, [r7, #12]
		if(enshow==0&&t<(len-1))
 80028ce:	7bbb      	ldrb	r3, [r7, #14]
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d121      	bne.n	8002918 <lcd_ShowIntNum+0xac>
 80028d4:	7bfa      	ldrb	r2, [r7, #15]
 80028d6:	787b      	ldrb	r3, [r7, #1]
 80028d8:	3b01      	subs	r3, #1
 80028da:	429a      	cmp	r2, r3
 80028dc:	da1c      	bge.n	8002918 <lcd_ShowIntNum+0xac>
		{
			if(temp==0)
 80028de:	7b3b      	ldrb	r3, [r7, #12]
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d117      	bne.n	8002914 <lcd_ShowIntNum+0xa8>
			{
				lcd_ShowChar(x+t*sizex,y,' ',fc,bc,sizey,0);
 80028e4:	7bfb      	ldrb	r3, [r7, #15]
 80028e6:	b29a      	uxth	r2, r3
 80028e8:	7b7b      	ldrb	r3, [r7, #13]
 80028ea:	b29b      	uxth	r3, r3
 80028ec:	fb12 f303 	smulbb	r3, r2, r3
 80028f0:	b29a      	uxth	r2, r3
 80028f2:	88fb      	ldrh	r3, [r7, #6]
 80028f4:	4413      	add	r3, r2
 80028f6:	b298      	uxth	r0, r3
 80028f8:	8c3a      	ldrh	r2, [r7, #32]
 80028fa:	88b9      	ldrh	r1, [r7, #4]
 80028fc:	2300      	movs	r3, #0
 80028fe:	9302      	str	r3, [sp, #8]
 8002900:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8002904:	9301      	str	r3, [sp, #4]
 8002906:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8002908:	9300      	str	r3, [sp, #0]
 800290a:	4613      	mov	r3, r2
 800290c:	2220      	movs	r2, #32
 800290e:	f7ff fec1 	bl	8002694 <lcd_ShowChar>
				continue;
 8002912:	e01a      	b.n	800294a <lcd_ShowIntNum+0xde>
			}else enshow=1;
 8002914:	2301      	movs	r3, #1
 8002916:	73bb      	strb	r3, [r7, #14]

		}
	 	lcd_ShowChar(x+t*sizex,y,temp+48,fc,bc,sizey,0);
 8002918:	7bfb      	ldrb	r3, [r7, #15]
 800291a:	b29a      	uxth	r2, r3
 800291c:	7b7b      	ldrb	r3, [r7, #13]
 800291e:	b29b      	uxth	r3, r3
 8002920:	fb12 f303 	smulbb	r3, r2, r3
 8002924:	b29a      	uxth	r2, r3
 8002926:	88fb      	ldrh	r3, [r7, #6]
 8002928:	4413      	add	r3, r2
 800292a:	b298      	uxth	r0, r3
 800292c:	7b3b      	ldrb	r3, [r7, #12]
 800292e:	3330      	adds	r3, #48	@ 0x30
 8002930:	b2da      	uxtb	r2, r3
 8002932:	8c3c      	ldrh	r4, [r7, #32]
 8002934:	88b9      	ldrh	r1, [r7, #4]
 8002936:	2300      	movs	r3, #0
 8002938:	9302      	str	r3, [sp, #8]
 800293a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800293e:	9301      	str	r3, [sp, #4]
 8002940:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8002942:	9300      	str	r3, [sp, #0]
 8002944:	4623      	mov	r3, r4
 8002946:	f7ff fea5 	bl	8002694 <lcd_ShowChar>
	for(t=0;t<len;t++)
 800294a:	7bfb      	ldrb	r3, [r7, #15]
 800294c:	3301      	adds	r3, #1
 800294e:	73fb      	strb	r3, [r7, #15]
 8002950:	7bfa      	ldrb	r2, [r7, #15]
 8002952:	787b      	ldrb	r3, [r7, #1]
 8002954:	429a      	cmp	r2, r3
 8002956:	d3a1      	bcc.n	800289c <lcd_ShowIntNum+0x30>
	}
}
 8002958:	bf00      	nop
 800295a:	bf00      	nop
 800295c:	3714      	adds	r7, #20
 800295e:	46bd      	mov	sp, r7
 8002960:	bd90      	pop	{r4, r7, pc}
 8002962:	bf00      	nop
 8002964:	cccccccd 	.word	0xcccccccd

08002968 <lcd_SetDir>:
	}
}


void lcd_SetDir(uint8_t dir) //chinh huong man hinh
{
 8002968:	b480      	push	{r7}
 800296a:	b083      	sub	sp, #12
 800296c:	af00      	add	r7, sp, #0
 800296e:	4603      	mov	r3, r0
 8002970:	71fb      	strb	r3, [r7, #7]
	if((dir>>4)%4)
 8002972:	79fb      	ldrb	r3, [r7, #7]
 8002974:	091b      	lsrs	r3, r3, #4
 8002976:	b2db      	uxtb	r3, r3
 8002978:	f003 0303 	and.w	r3, r3, #3
 800297c:	b2db      	uxtb	r3, r3
 800297e:	2b00      	cmp	r3, #0
 8002980:	d007      	beq.n	8002992 <lcd_SetDir+0x2a>
	{
		lcddev.width=320;
 8002982:	4b0a      	ldr	r3, [pc, #40]	@ (80029ac <lcd_SetDir+0x44>)
 8002984:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8002988:	801a      	strh	r2, [r3, #0]
		lcddev.height=240;
 800298a:	4b08      	ldr	r3, [pc, #32]	@ (80029ac <lcd_SetDir+0x44>)
 800298c:	22f0      	movs	r2, #240	@ 0xf0
 800298e:	805a      	strh	r2, [r3, #2]
	}else
	{
		lcddev.width=240;
		lcddev.height=320;
	}
}
 8002990:	e006      	b.n	80029a0 <lcd_SetDir+0x38>
		lcddev.width=240;
 8002992:	4b06      	ldr	r3, [pc, #24]	@ (80029ac <lcd_SetDir+0x44>)
 8002994:	22f0      	movs	r2, #240	@ 0xf0
 8002996:	801a      	strh	r2, [r3, #0]
		lcddev.height=320;
 8002998:	4b04      	ldr	r3, [pc, #16]	@ (80029ac <lcd_SetDir+0x44>)
 800299a:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 800299e:	805a      	strh	r2, [r3, #2]
}
 80029a0:	bf00      	nop
 80029a2:	370c      	adds	r7, #12
 80029a4:	46bd      	mov	sp, r7
 80029a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029aa:	4770      	bx	lr
 80029ac:	2000014c 	.word	0x2000014c

080029b0 <lcd_init>:


void lcd_init(void)
{
 80029b0:	b580      	push	{r7, lr}
 80029b2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_RESET);
 80029b4:	2200      	movs	r2, #0
 80029b6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80029ba:	48aa      	ldr	r0, [pc, #680]	@ (8002c64 <lcd_init+0x2b4>)
 80029bc:	f001 f8cc 	bl	8003b58 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 80029c0:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80029c4:	f000 fdf6 	bl	80035b4 <HAL_Delay>
	HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_SET);
 80029c8:	2201      	movs	r2, #1
 80029ca:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80029ce:	48a5      	ldr	r0, [pc, #660]	@ (8002c64 <lcd_init+0x2b4>)
 80029d0:	f001 f8c2 	bl	8003b58 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 80029d4:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80029d8:	f000 fdec 	bl	80035b4 <HAL_Delay>
	lcd_SetDir(L2R_U2D);
 80029dc:	2000      	movs	r0, #0
 80029de:	f7ff ffc3 	bl	8002968 <lcd_SetDir>
	LCD_WR_REG(0XD3);
 80029e2:	20d3      	movs	r0, #211	@ 0xd3
 80029e4:	f7ff fd86 	bl	80024f4 <LCD_WR_REG>
	lcddev.id=LCD_RD_DATA();	//dummy read
 80029e8:	f7ff fda4 	bl	8002534 <LCD_RD_DATA>
 80029ec:	4603      	mov	r3, r0
 80029ee:	461a      	mov	r2, r3
 80029f0:	4b9d      	ldr	r3, [pc, #628]	@ (8002c68 <lcd_init+0x2b8>)
 80029f2:	809a      	strh	r2, [r3, #4]
	lcddev.id=LCD_RD_DATA();
 80029f4:	f7ff fd9e 	bl	8002534 <LCD_RD_DATA>
 80029f8:	4603      	mov	r3, r0
 80029fa:	461a      	mov	r2, r3
 80029fc:	4b9a      	ldr	r3, [pc, #616]	@ (8002c68 <lcd_init+0x2b8>)
 80029fe:	809a      	strh	r2, [r3, #4]
	lcddev.id=LCD_RD_DATA();
 8002a00:	f7ff fd98 	bl	8002534 <LCD_RD_DATA>
 8002a04:	4603      	mov	r3, r0
 8002a06:	461a      	mov	r2, r3
 8002a08:	4b97      	ldr	r3, [pc, #604]	@ (8002c68 <lcd_init+0x2b8>)
 8002a0a:	809a      	strh	r2, [r3, #4]
	lcddev.id<<=8;
 8002a0c:	4b96      	ldr	r3, [pc, #600]	@ (8002c68 <lcd_init+0x2b8>)
 8002a0e:	889b      	ldrh	r3, [r3, #4]
 8002a10:	021b      	lsls	r3, r3, #8
 8002a12:	b29a      	uxth	r2, r3
 8002a14:	4b94      	ldr	r3, [pc, #592]	@ (8002c68 <lcd_init+0x2b8>)
 8002a16:	809a      	strh	r2, [r3, #4]
	lcddev.id|=LCD_RD_DATA();
 8002a18:	f7ff fd8c 	bl	8002534 <LCD_RD_DATA>
 8002a1c:	4603      	mov	r3, r0
 8002a1e:	461a      	mov	r2, r3
 8002a20:	4b91      	ldr	r3, [pc, #580]	@ (8002c68 <lcd_init+0x2b8>)
 8002a22:	889b      	ldrh	r3, [r3, #4]
 8002a24:	4313      	orrs	r3, r2
 8002a26:	b29a      	uxth	r2, r3
 8002a28:	4b8f      	ldr	r3, [pc, #572]	@ (8002c68 <lcd_init+0x2b8>)
 8002a2a:	809a      	strh	r2, [r3, #4]

	LCD_WR_REG(0xCF);
 8002a2c:	20cf      	movs	r0, #207	@ 0xcf
 8002a2e:	f7ff fd61 	bl	80024f4 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8002a32:	2000      	movs	r0, #0
 8002a34:	f7ff fd6e 	bl	8002514 <LCD_WR_DATA>
	LCD_WR_DATA(0xC1);
 8002a38:	20c1      	movs	r0, #193	@ 0xc1
 8002a3a:	f7ff fd6b 	bl	8002514 <LCD_WR_DATA>
	LCD_WR_DATA(0X30);
 8002a3e:	2030      	movs	r0, #48	@ 0x30
 8002a40:	f7ff fd68 	bl	8002514 <LCD_WR_DATA>
	LCD_WR_REG(0xED);
 8002a44:	20ed      	movs	r0, #237	@ 0xed
 8002a46:	f7ff fd55 	bl	80024f4 <LCD_WR_REG>
	LCD_WR_DATA(0x64);
 8002a4a:	2064      	movs	r0, #100	@ 0x64
 8002a4c:	f7ff fd62 	bl	8002514 <LCD_WR_DATA>
	LCD_WR_DATA(0x03);
 8002a50:	2003      	movs	r0, #3
 8002a52:	f7ff fd5f 	bl	8002514 <LCD_WR_DATA>
	LCD_WR_DATA(0X12);
 8002a56:	2012      	movs	r0, #18
 8002a58:	f7ff fd5c 	bl	8002514 <LCD_WR_DATA>
	LCD_WR_DATA(0X81);
 8002a5c:	2081      	movs	r0, #129	@ 0x81
 8002a5e:	f7ff fd59 	bl	8002514 <LCD_WR_DATA>
	LCD_WR_REG(0xE8);
 8002a62:	20e8      	movs	r0, #232	@ 0xe8
 8002a64:	f7ff fd46 	bl	80024f4 <LCD_WR_REG>
	LCD_WR_DATA(0x85);
 8002a68:	2085      	movs	r0, #133	@ 0x85
 8002a6a:	f7ff fd53 	bl	8002514 <LCD_WR_DATA>
	LCD_WR_DATA(0x10);
 8002a6e:	2010      	movs	r0, #16
 8002a70:	f7ff fd50 	bl	8002514 <LCD_WR_DATA>
	LCD_WR_DATA(0x7A);
 8002a74:	207a      	movs	r0, #122	@ 0x7a
 8002a76:	f7ff fd4d 	bl	8002514 <LCD_WR_DATA>
	LCD_WR_REG(0xCB);
 8002a7a:	20cb      	movs	r0, #203	@ 0xcb
 8002a7c:	f7ff fd3a 	bl	80024f4 <LCD_WR_REG>
	LCD_WR_DATA(0x39);
 8002a80:	2039      	movs	r0, #57	@ 0x39
 8002a82:	f7ff fd47 	bl	8002514 <LCD_WR_DATA>
	LCD_WR_DATA(0x2C);
 8002a86:	202c      	movs	r0, #44	@ 0x2c
 8002a88:	f7ff fd44 	bl	8002514 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8002a8c:	2000      	movs	r0, #0
 8002a8e:	f7ff fd41 	bl	8002514 <LCD_WR_DATA>
	LCD_WR_DATA(0x34);
 8002a92:	2034      	movs	r0, #52	@ 0x34
 8002a94:	f7ff fd3e 	bl	8002514 <LCD_WR_DATA>
	LCD_WR_DATA(0x02);
 8002a98:	2002      	movs	r0, #2
 8002a9a:	f7ff fd3b 	bl	8002514 <LCD_WR_DATA>
	LCD_WR_REG(0xF7);
 8002a9e:	20f7      	movs	r0, #247	@ 0xf7
 8002aa0:	f7ff fd28 	bl	80024f4 <LCD_WR_REG>
	LCD_WR_DATA(0x20);
 8002aa4:	2020      	movs	r0, #32
 8002aa6:	f7ff fd35 	bl	8002514 <LCD_WR_DATA>
	LCD_WR_REG(0xEA);
 8002aaa:	20ea      	movs	r0, #234	@ 0xea
 8002aac:	f7ff fd22 	bl	80024f4 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8002ab0:	2000      	movs	r0, #0
 8002ab2:	f7ff fd2f 	bl	8002514 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8002ab6:	2000      	movs	r0, #0
 8002ab8:	f7ff fd2c 	bl	8002514 <LCD_WR_DATA>
	LCD_WR_REG(0xC0);    //Power control
 8002abc:	20c0      	movs	r0, #192	@ 0xc0
 8002abe:	f7ff fd19 	bl	80024f4 <LCD_WR_REG>
	LCD_WR_DATA(0x1B);   //VRH[5:0]
 8002ac2:	201b      	movs	r0, #27
 8002ac4:	f7ff fd26 	bl	8002514 <LCD_WR_DATA>
	LCD_WR_REG(0xC1);    //Power control
 8002ac8:	20c1      	movs	r0, #193	@ 0xc1
 8002aca:	f7ff fd13 	bl	80024f4 <LCD_WR_REG>
	LCD_WR_DATA(0x01);   //SAP[2:0];BT[3:0]
 8002ace:	2001      	movs	r0, #1
 8002ad0:	f7ff fd20 	bl	8002514 <LCD_WR_DATA>
	LCD_WR_REG(0xC5);    //VCM control
 8002ad4:	20c5      	movs	r0, #197	@ 0xc5
 8002ad6:	f7ff fd0d 	bl	80024f4 <LCD_WR_REG>
	LCD_WR_DATA(0x30); 	 //3F
 8002ada:	2030      	movs	r0, #48	@ 0x30
 8002adc:	f7ff fd1a 	bl	8002514 <LCD_WR_DATA>
	LCD_WR_DATA(0x30); 	 //3C
 8002ae0:	2030      	movs	r0, #48	@ 0x30
 8002ae2:	f7ff fd17 	bl	8002514 <LCD_WR_DATA>
	LCD_WR_REG(0xC7);    //VCM control2
 8002ae6:	20c7      	movs	r0, #199	@ 0xc7
 8002ae8:	f7ff fd04 	bl	80024f4 <LCD_WR_REG>
	LCD_WR_DATA(0XB7);
 8002aec:	20b7      	movs	r0, #183	@ 0xb7
 8002aee:	f7ff fd11 	bl	8002514 <LCD_WR_DATA>
	LCD_WR_REG(0x36);    // Memory Access Control
 8002af2:	2036      	movs	r0, #54	@ 0x36
 8002af4:	f7ff fcfe 	bl	80024f4 <LCD_WR_REG>
	LCD_WR_DATA(0x08|L2R_U2D);
 8002af8:	2008      	movs	r0, #8
 8002afa:	f7ff fd0b 	bl	8002514 <LCD_WR_DATA>

//	LCD_WR_DATA(0x08|DFT_SCAN_DIR);
	LCD_WR_REG(0x3A);
 8002afe:	203a      	movs	r0, #58	@ 0x3a
 8002b00:	f7ff fcf8 	bl	80024f4 <LCD_WR_REG>
	LCD_WR_DATA(0x55);
 8002b04:	2055      	movs	r0, #85	@ 0x55
 8002b06:	f7ff fd05 	bl	8002514 <LCD_WR_DATA>
	LCD_WR_REG(0xB1);
 8002b0a:	20b1      	movs	r0, #177	@ 0xb1
 8002b0c:	f7ff fcf2 	bl	80024f4 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8002b10:	2000      	movs	r0, #0
 8002b12:	f7ff fcff 	bl	8002514 <LCD_WR_DATA>
	LCD_WR_DATA(0x1A);
 8002b16:	201a      	movs	r0, #26
 8002b18:	f7ff fcfc 	bl	8002514 <LCD_WR_DATA>
	LCD_WR_REG(0xB6);    // Display Function Control
 8002b1c:	20b6      	movs	r0, #182	@ 0xb6
 8002b1e:	f7ff fce9 	bl	80024f4 <LCD_WR_REG>
	LCD_WR_DATA(0x0A);
 8002b22:	200a      	movs	r0, #10
 8002b24:	f7ff fcf6 	bl	8002514 <LCD_WR_DATA>
	LCD_WR_DATA(0xA2);
 8002b28:	20a2      	movs	r0, #162	@ 0xa2
 8002b2a:	f7ff fcf3 	bl	8002514 <LCD_WR_DATA>
	LCD_WR_REG(0xF2);    // 3Gamma Function Disable
 8002b2e:	20f2      	movs	r0, #242	@ 0xf2
 8002b30:	f7ff fce0 	bl	80024f4 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8002b34:	2000      	movs	r0, #0
 8002b36:	f7ff fced 	bl	8002514 <LCD_WR_DATA>
	LCD_WR_REG(0x26);    //Gamma curve selected
 8002b3a:	2026      	movs	r0, #38	@ 0x26
 8002b3c:	f7ff fcda 	bl	80024f4 <LCD_WR_REG>
	LCD_WR_DATA(0x01);
 8002b40:	2001      	movs	r0, #1
 8002b42:	f7ff fce7 	bl	8002514 <LCD_WR_DATA>
	LCD_WR_REG(0xE0);    //Set Gamma
 8002b46:	20e0      	movs	r0, #224	@ 0xe0
 8002b48:	f7ff fcd4 	bl	80024f4 <LCD_WR_REG>
	LCD_WR_DATA(0x0F);
 8002b4c:	200f      	movs	r0, #15
 8002b4e:	f7ff fce1 	bl	8002514 <LCD_WR_DATA>
	LCD_WR_DATA(0x2A);
 8002b52:	202a      	movs	r0, #42	@ 0x2a
 8002b54:	f7ff fcde 	bl	8002514 <LCD_WR_DATA>
	LCD_WR_DATA(0x28);
 8002b58:	2028      	movs	r0, #40	@ 0x28
 8002b5a:	f7ff fcdb 	bl	8002514 <LCD_WR_DATA>
	LCD_WR_DATA(0x08);
 8002b5e:	2008      	movs	r0, #8
 8002b60:	f7ff fcd8 	bl	8002514 <LCD_WR_DATA>
	LCD_WR_DATA(0x0E);
 8002b64:	200e      	movs	r0, #14
 8002b66:	f7ff fcd5 	bl	8002514 <LCD_WR_DATA>
	LCD_WR_DATA(0x08);
 8002b6a:	2008      	movs	r0, #8
 8002b6c:	f7ff fcd2 	bl	8002514 <LCD_WR_DATA>
	LCD_WR_DATA(0x54);
 8002b70:	2054      	movs	r0, #84	@ 0x54
 8002b72:	f7ff fccf 	bl	8002514 <LCD_WR_DATA>
	LCD_WR_DATA(0XA9);
 8002b76:	20a9      	movs	r0, #169	@ 0xa9
 8002b78:	f7ff fccc 	bl	8002514 <LCD_WR_DATA>
	LCD_WR_DATA(0x43);
 8002b7c:	2043      	movs	r0, #67	@ 0x43
 8002b7e:	f7ff fcc9 	bl	8002514 <LCD_WR_DATA>
	LCD_WR_DATA(0x0A);
 8002b82:	200a      	movs	r0, #10
 8002b84:	f7ff fcc6 	bl	8002514 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 8002b88:	200f      	movs	r0, #15
 8002b8a:	f7ff fcc3 	bl	8002514 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8002b8e:	2000      	movs	r0, #0
 8002b90:	f7ff fcc0 	bl	8002514 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8002b94:	2000      	movs	r0, #0
 8002b96:	f7ff fcbd 	bl	8002514 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8002b9a:	2000      	movs	r0, #0
 8002b9c:	f7ff fcba 	bl	8002514 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8002ba0:	2000      	movs	r0, #0
 8002ba2:	f7ff fcb7 	bl	8002514 <LCD_WR_DATA>
	LCD_WR_REG(0XE1);    //Set Gamma
 8002ba6:	20e1      	movs	r0, #225	@ 0xe1
 8002ba8:	f7ff fca4 	bl	80024f4 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8002bac:	2000      	movs	r0, #0
 8002bae:	f7ff fcb1 	bl	8002514 <LCD_WR_DATA>
	LCD_WR_DATA(0x15);
 8002bb2:	2015      	movs	r0, #21
 8002bb4:	f7ff fcae 	bl	8002514 <LCD_WR_DATA>
	LCD_WR_DATA(0x17);
 8002bb8:	2017      	movs	r0, #23
 8002bba:	f7ff fcab 	bl	8002514 <LCD_WR_DATA>
	LCD_WR_DATA(0x07);
 8002bbe:	2007      	movs	r0, #7
 8002bc0:	f7ff fca8 	bl	8002514 <LCD_WR_DATA>
	LCD_WR_DATA(0x11);
 8002bc4:	2011      	movs	r0, #17
 8002bc6:	f7ff fca5 	bl	8002514 <LCD_WR_DATA>
	LCD_WR_DATA(0x06);
 8002bca:	2006      	movs	r0, #6
 8002bcc:	f7ff fca2 	bl	8002514 <LCD_WR_DATA>
	LCD_WR_DATA(0x2B);
 8002bd0:	202b      	movs	r0, #43	@ 0x2b
 8002bd2:	f7ff fc9f 	bl	8002514 <LCD_WR_DATA>
	LCD_WR_DATA(0x56);
 8002bd6:	2056      	movs	r0, #86	@ 0x56
 8002bd8:	f7ff fc9c 	bl	8002514 <LCD_WR_DATA>
	LCD_WR_DATA(0x3C);
 8002bdc:	203c      	movs	r0, #60	@ 0x3c
 8002bde:	f7ff fc99 	bl	8002514 <LCD_WR_DATA>
	LCD_WR_DATA(0x05);
 8002be2:	2005      	movs	r0, #5
 8002be4:	f7ff fc96 	bl	8002514 <LCD_WR_DATA>
	LCD_WR_DATA(0x10);
 8002be8:	2010      	movs	r0, #16
 8002bea:	f7ff fc93 	bl	8002514 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 8002bee:	200f      	movs	r0, #15
 8002bf0:	f7ff fc90 	bl	8002514 <LCD_WR_DATA>
	LCD_WR_DATA(0x3F);
 8002bf4:	203f      	movs	r0, #63	@ 0x3f
 8002bf6:	f7ff fc8d 	bl	8002514 <LCD_WR_DATA>
	LCD_WR_DATA(0x3F);
 8002bfa:	203f      	movs	r0, #63	@ 0x3f
 8002bfc:	f7ff fc8a 	bl	8002514 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 8002c00:	200f      	movs	r0, #15
 8002c02:	f7ff fc87 	bl	8002514 <LCD_WR_DATA>
	LCD_WR_REG(0x2B);
 8002c06:	202b      	movs	r0, #43	@ 0x2b
 8002c08:	f7ff fc74 	bl	80024f4 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8002c0c:	2000      	movs	r0, #0
 8002c0e:	f7ff fc81 	bl	8002514 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8002c12:	2000      	movs	r0, #0
 8002c14:	f7ff fc7e 	bl	8002514 <LCD_WR_DATA>
	LCD_WR_DATA(0x01);
 8002c18:	2001      	movs	r0, #1
 8002c1a:	f7ff fc7b 	bl	8002514 <LCD_WR_DATA>
	LCD_WR_DATA(0x3f);
 8002c1e:	203f      	movs	r0, #63	@ 0x3f
 8002c20:	f7ff fc78 	bl	8002514 <LCD_WR_DATA>
	LCD_WR_REG(0x2A);
 8002c24:	202a      	movs	r0, #42	@ 0x2a
 8002c26:	f7ff fc65 	bl	80024f4 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8002c2a:	2000      	movs	r0, #0
 8002c2c:	f7ff fc72 	bl	8002514 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8002c30:	2000      	movs	r0, #0
 8002c32:	f7ff fc6f 	bl	8002514 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8002c36:	2000      	movs	r0, #0
 8002c38:	f7ff fc6c 	bl	8002514 <LCD_WR_DATA>
	LCD_WR_DATA(0xef);
 8002c3c:	20ef      	movs	r0, #239	@ 0xef
 8002c3e:	f7ff fc69 	bl	8002514 <LCD_WR_DATA>
	LCD_WR_REG(0x11); //Exit Sleep
 8002c42:	2011      	movs	r0, #17
 8002c44:	f7ff fc56 	bl	80024f4 <LCD_WR_REG>
	HAL_Delay(120);
 8002c48:	2078      	movs	r0, #120	@ 0x78
 8002c4a:	f000 fcb3 	bl	80035b4 <HAL_Delay>
	LCD_WR_REG(0x29); //display on
 8002c4e:	2029      	movs	r0, #41	@ 0x29
 8002c50:	f7ff fc50 	bl	80024f4 <LCD_WR_REG>
	HAL_GPIO_WritePin(FSMC_BLK_GPIO_Port, FSMC_BLK_Pin, 1);
 8002c54:	2201      	movs	r2, #1
 8002c56:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002c5a:	4804      	ldr	r0, [pc, #16]	@ (8002c6c <lcd_init+0x2bc>)
 8002c5c:	f000 ff7c 	bl	8003b58 <HAL_GPIO_WritePin>
}
 8002c60:	bf00      	nop
 8002c62:	bd80      	pop	{r7, pc}
 8002c64:	40020800 	.word	0x40020800
 8002c68:	2000014c 	.word	0x2000014c
 8002c6c:	40020000 	.word	0x40020000

08002c70 <lcd_ShowStr>:
		}
	}
}

void lcd_ShowStr(uint16_t x, uint16_t y,uint8_t *str,uint16_t fc, uint16_t bc,uint8_t sizey,uint8_t mode)
{
 8002c70:	b590      	push	{r4, r7, lr}
 8002c72:	b08b      	sub	sp, #44	@ 0x2c
 8002c74:	af04      	add	r7, sp, #16
 8002c76:	60ba      	str	r2, [r7, #8]
 8002c78:	461a      	mov	r2, r3
 8002c7a:	4603      	mov	r3, r0
 8002c7c:	81fb      	strh	r3, [r7, #14]
 8002c7e:	460b      	mov	r3, r1
 8002c80:	81bb      	strh	r3, [r7, #12]
 8002c82:	4613      	mov	r3, r2
 8002c84:	80fb      	strh	r3, [r7, #6]
	uint16_t x0=x;
 8002c86:	89fb      	ldrh	r3, [r7, #14]
 8002c88:	82bb      	strh	r3, [r7, #20]
  uint8_t bHz=0;
 8002c8a:	2300      	movs	r3, #0
 8002c8c:	75fb      	strb	r3, [r7, #23]
	while(*str!=0)
 8002c8e:	e048      	b.n	8002d22 <lcd_ShowStr+0xb2>
	{
		if(!bHz)
 8002c90:	7dfb      	ldrb	r3, [r7, #23]
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d145      	bne.n	8002d22 <lcd_ShowStr+0xb2>
		{
			if(x>(lcddev.width-sizey/2)||y>(lcddev.height-sizey)) return;
 8002c96:	89fa      	ldrh	r2, [r7, #14]
 8002c98:	4b26      	ldr	r3, [pc, #152]	@ (8002d34 <lcd_ShowStr+0xc4>)
 8002c9a:	881b      	ldrh	r3, [r3, #0]
 8002c9c:	4619      	mov	r1, r3
 8002c9e:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8002ca2:	085b      	lsrs	r3, r3, #1
 8002ca4:	b2db      	uxtb	r3, r3
 8002ca6:	1acb      	subs	r3, r1, r3
 8002ca8:	429a      	cmp	r2, r3
 8002caa:	dc3f      	bgt.n	8002d2c <lcd_ShowStr+0xbc>
 8002cac:	89ba      	ldrh	r2, [r7, #12]
 8002cae:	4b21      	ldr	r3, [pc, #132]	@ (8002d34 <lcd_ShowStr+0xc4>)
 8002cb0:	885b      	ldrh	r3, [r3, #2]
 8002cb2:	4619      	mov	r1, r3
 8002cb4:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8002cb8:	1acb      	subs	r3, r1, r3
 8002cba:	429a      	cmp	r2, r3
 8002cbc:	dc36      	bgt.n	8002d2c <lcd_ShowStr+0xbc>
			if(*str>0x80)bHz=1;
 8002cbe:	68bb      	ldr	r3, [r7, #8]
 8002cc0:	781b      	ldrb	r3, [r3, #0]
 8002cc2:	2b80      	cmp	r3, #128	@ 0x80
 8002cc4:	d902      	bls.n	8002ccc <lcd_ShowStr+0x5c>
 8002cc6:	2301      	movs	r3, #1
 8002cc8:	75fb      	strb	r3, [r7, #23]
 8002cca:	e02a      	b.n	8002d22 <lcd_ShowStr+0xb2>
			else
			{
				if(*str==0x0D)
 8002ccc:	68bb      	ldr	r3, [r7, #8]
 8002cce:	781b      	ldrb	r3, [r3, #0]
 8002cd0:	2b0d      	cmp	r3, #13
 8002cd2:	d10b      	bne.n	8002cec <lcd_ShowStr+0x7c>
				{
					y+=sizey;
 8002cd4:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8002cd8:	b29a      	uxth	r2, r3
 8002cda:	89bb      	ldrh	r3, [r7, #12]
 8002cdc:	4413      	add	r3, r2
 8002cde:	81bb      	strh	r3, [r7, #12]
					x=x0;
 8002ce0:	8abb      	ldrh	r3, [r7, #20]
 8002ce2:	81fb      	strh	r3, [r7, #14]
					str++;
 8002ce4:	68bb      	ldr	r3, [r7, #8]
 8002ce6:	3301      	adds	r3, #1
 8002ce8:	60bb      	str	r3, [r7, #8]
 8002cea:	e017      	b.n	8002d1c <lcd_ShowStr+0xac>
				}else
				{
					lcd_ShowChar(x,y,*str,fc,bc,sizey,mode);
 8002cec:	68bb      	ldr	r3, [r7, #8]
 8002cee:	781a      	ldrb	r2, [r3, #0]
 8002cf0:	88fc      	ldrh	r4, [r7, #6]
 8002cf2:	89b9      	ldrh	r1, [r7, #12]
 8002cf4:	89f8      	ldrh	r0, [r7, #14]
 8002cf6:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8002cfa:	9302      	str	r3, [sp, #8]
 8002cfc:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8002d00:	9301      	str	r3, [sp, #4]
 8002d02:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8002d04:	9300      	str	r3, [sp, #0]
 8002d06:	4623      	mov	r3, r4
 8002d08:	f7ff fcc4 	bl	8002694 <lcd_ShowChar>
					x+=sizey/2;
 8002d0c:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8002d10:	085b      	lsrs	r3, r3, #1
 8002d12:	b2db      	uxtb	r3, r3
 8002d14:	461a      	mov	r2, r3
 8002d16:	89fb      	ldrh	r3, [r7, #14]
 8002d18:	4413      	add	r3, r2
 8002d1a:	81fb      	strh	r3, [r7, #14]
				}
			  str++;
 8002d1c:	68bb      	ldr	r3, [r7, #8]
 8002d1e:	3301      	adds	r3, #1
 8002d20:	60bb      	str	r3, [r7, #8]
	while(*str!=0)
 8002d22:	68bb      	ldr	r3, [r7, #8]
 8002d24:	781b      	ldrb	r3, [r3, #0]
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d1b2      	bne.n	8002c90 <lcd_ShowStr+0x20>
 8002d2a:	e000      	b.n	8002d2e <lcd_ShowStr+0xbe>
			if(x>(lcddev.width-sizey/2)||y>(lcddev.height-sizey)) return;
 8002d2c:	bf00      	nop
			}
		}
	}
}
 8002d2e:	371c      	adds	r7, #28
 8002d30:	46bd      	mov	sp, r7
 8002d32:	bd90      	pop	{r4, r7, pc}
 8002d34:	2000014c 	.word	0x2000014c

08002d38 <led7_init>:
uint8_t arrayOfNum[10] = {0x03, 0x9f, 0x25, 0x0d, 0x99, 0x49, 0x41, 0x1f, 0x01, 0x09};// 9 numbers
uint16_t spi_buffer = 0xffff;

int led7_index = 0;

void led7_init(){
 8002d38:	b580      	push	{r7, lr}
 8002d3a:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 1);
 8002d3c:	2201      	movs	r2, #1
 8002d3e:	2140      	movs	r1, #64	@ 0x40
 8002d40:	4802      	ldr	r0, [pc, #8]	@ (8002d4c <led7_init+0x14>)
 8002d42:	f000 ff09 	bl	8003b58 <HAL_GPIO_WritePin>
}
 8002d46:	bf00      	nop
 8002d48:	bd80      	pop	{r7, pc}
 8002d4a:	bf00      	nop
 8002d4c:	40021800 	.word	0x40021800

08002d50 <led7_Scan>:

void led7_Scan(){
 8002d50:	b580      	push	{r7, lr}
 8002d52:	af00      	add	r7, sp, #0
	spi_buffer &= 0x00ff;
 8002d54:	4b3f      	ldr	r3, [pc, #252]	@ (8002e54 <led7_Scan+0x104>)
 8002d56:	881b      	ldrh	r3, [r3, #0]
 8002d58:	b2db      	uxtb	r3, r3
 8002d5a:	b29a      	uxth	r2, r3
 8002d5c:	4b3d      	ldr	r3, [pc, #244]	@ (8002e54 <led7_Scan+0x104>)
 8002d5e:	801a      	strh	r2, [r3, #0]
	spi_buffer |= led7seg[led7_index] << 8;
 8002d60:	4b3d      	ldr	r3, [pc, #244]	@ (8002e58 <led7_Scan+0x108>)
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	4a3d      	ldr	r2, [pc, #244]	@ (8002e5c <led7_Scan+0x10c>)
 8002d66:	5cd3      	ldrb	r3, [r2, r3]
 8002d68:	021b      	lsls	r3, r3, #8
 8002d6a:	b21a      	sxth	r2, r3
 8002d6c:	4b39      	ldr	r3, [pc, #228]	@ (8002e54 <led7_Scan+0x104>)
 8002d6e:	881b      	ldrh	r3, [r3, #0]
 8002d70:	b21b      	sxth	r3, r3
 8002d72:	4313      	orrs	r3, r2
 8002d74:	b21b      	sxth	r3, r3
 8002d76:	b29a      	uxth	r2, r3
 8002d78:	4b36      	ldr	r3, [pc, #216]	@ (8002e54 <led7_Scan+0x104>)
 8002d7a:	801a      	strh	r2, [r3, #0]
	switch(led7_index){
 8002d7c:	4b36      	ldr	r3, [pc, #216]	@ (8002e58 <led7_Scan+0x108>)
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	2b03      	cmp	r3, #3
 8002d82:	d847      	bhi.n	8002e14 <led7_Scan+0xc4>
 8002d84:	a201      	add	r2, pc, #4	@ (adr r2, 8002d8c <led7_Scan+0x3c>)
 8002d86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d8a:	bf00      	nop
 8002d8c:	08002d9d 	.word	0x08002d9d
 8002d90:	08002dbb 	.word	0x08002dbb
 8002d94:	08002dd9 	.word	0x08002dd9
 8002d98:	08002df7 	.word	0x08002df7
	case 0:
		spi_buffer |= 0x00b0;
 8002d9c:	4b2d      	ldr	r3, [pc, #180]	@ (8002e54 <led7_Scan+0x104>)
 8002d9e:	881b      	ldrh	r3, [r3, #0]
 8002da0:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8002da4:	b29a      	uxth	r2, r3
 8002da6:	4b2b      	ldr	r3, [pc, #172]	@ (8002e54 <led7_Scan+0x104>)
 8002da8:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffbf;//1011
 8002daa:	4b2a      	ldr	r3, [pc, #168]	@ (8002e54 <led7_Scan+0x104>)
 8002dac:	881b      	ldrh	r3, [r3, #0]
 8002dae:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002db2:	b29a      	uxth	r2, r3
 8002db4:	4b27      	ldr	r3, [pc, #156]	@ (8002e54 <led7_Scan+0x104>)
 8002db6:	801a      	strh	r2, [r3, #0]
		break;
 8002db8:	e02d      	b.n	8002e16 <led7_Scan+0xc6>
	case 1:
		spi_buffer |= 0x00d0;
 8002dba:	4b26      	ldr	r3, [pc, #152]	@ (8002e54 <led7_Scan+0x104>)
 8002dbc:	881b      	ldrh	r3, [r3, #0]
 8002dbe:	f043 03d0 	orr.w	r3, r3, #208	@ 0xd0
 8002dc2:	b29a      	uxth	r2, r3
 8002dc4:	4b23      	ldr	r3, [pc, #140]	@ (8002e54 <led7_Scan+0x104>)
 8002dc6:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffdf;//1101
 8002dc8:	4b22      	ldr	r3, [pc, #136]	@ (8002e54 <led7_Scan+0x104>)
 8002dca:	881b      	ldrh	r3, [r3, #0]
 8002dcc:	f023 0320 	bic.w	r3, r3, #32
 8002dd0:	b29a      	uxth	r2, r3
 8002dd2:	4b20      	ldr	r3, [pc, #128]	@ (8002e54 <led7_Scan+0x104>)
 8002dd4:	801a      	strh	r2, [r3, #0]
		break;
 8002dd6:	e01e      	b.n	8002e16 <led7_Scan+0xc6>
	case 2:
		spi_buffer |= 0x00e0;
 8002dd8:	4b1e      	ldr	r3, [pc, #120]	@ (8002e54 <led7_Scan+0x104>)
 8002dda:	881b      	ldrh	r3, [r3, #0]
 8002ddc:	f043 03e0 	orr.w	r3, r3, #224	@ 0xe0
 8002de0:	b29a      	uxth	r2, r3
 8002de2:	4b1c      	ldr	r3, [pc, #112]	@ (8002e54 <led7_Scan+0x104>)
 8002de4:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffef;//1110
 8002de6:	4b1b      	ldr	r3, [pc, #108]	@ (8002e54 <led7_Scan+0x104>)
 8002de8:	881b      	ldrh	r3, [r3, #0]
 8002dea:	f023 0310 	bic.w	r3, r3, #16
 8002dee:	b29a      	uxth	r2, r3
 8002df0:	4b18      	ldr	r3, [pc, #96]	@ (8002e54 <led7_Scan+0x104>)
 8002df2:	801a      	strh	r2, [r3, #0]
		break;
 8002df4:	e00f      	b.n	8002e16 <led7_Scan+0xc6>
	case 3:
		spi_buffer |= 0x0070;
 8002df6:	4b17      	ldr	r3, [pc, #92]	@ (8002e54 <led7_Scan+0x104>)
 8002df8:	881b      	ldrh	r3, [r3, #0]
 8002dfa:	f043 0370 	orr.w	r3, r3, #112	@ 0x70
 8002dfe:	b29a      	uxth	r2, r3
 8002e00:	4b14      	ldr	r3, [pc, #80]	@ (8002e54 <led7_Scan+0x104>)
 8002e02:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xff7f;//0111
 8002e04:	4b13      	ldr	r3, [pc, #76]	@ (8002e54 <led7_Scan+0x104>)
 8002e06:	881b      	ldrh	r3, [r3, #0]
 8002e08:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002e0c:	b29a      	uxth	r2, r3
 8002e0e:	4b11      	ldr	r3, [pc, #68]	@ (8002e54 <led7_Scan+0x104>)
 8002e10:	801a      	strh	r2, [r3, #0]
		break;
 8002e12:	e000      	b.n	8002e16 <led7_Scan+0xc6>
	default:
		break;
 8002e14:	bf00      	nop
	}
	led7_index = (led7_index + 1)%4;
 8002e16:	4b10      	ldr	r3, [pc, #64]	@ (8002e58 <led7_Scan+0x108>)
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	3301      	adds	r3, #1
 8002e1c:	425a      	negs	r2, r3
 8002e1e:	f003 0303 	and.w	r3, r3, #3
 8002e22:	f002 0203 	and.w	r2, r2, #3
 8002e26:	bf58      	it	pl
 8002e28:	4253      	negpl	r3, r2
 8002e2a:	4a0b      	ldr	r2, [pc, #44]	@ (8002e58 <led7_Scan+0x108>)
 8002e2c:	6013      	str	r3, [r2, #0]
	HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 0);
 8002e2e:	2200      	movs	r2, #0
 8002e30:	2140      	movs	r1, #64	@ 0x40
 8002e32:	480b      	ldr	r0, [pc, #44]	@ (8002e60 <led7_Scan+0x110>)
 8002e34:	f000 fe90 	bl	8003b58 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, (void*)&spi_buffer, 2, 1);
 8002e38:	2301      	movs	r3, #1
 8002e3a:	2202      	movs	r2, #2
 8002e3c:	4905      	ldr	r1, [pc, #20]	@ (8002e54 <led7_Scan+0x104>)
 8002e3e:	4809      	ldr	r0, [pc, #36]	@ (8002e64 <led7_Scan+0x114>)
 8002e40:	f002 fc9f 	bl	8005782 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 1);
 8002e44:	2201      	movs	r2, #1
 8002e46:	2140      	movs	r1, #64	@ 0x40
 8002e48:	4805      	ldr	r0, [pc, #20]	@ (8002e60 <led7_Scan+0x110>)
 8002e4a:	f000 fe85 	bl	8003b58 <HAL_GPIO_WritePin>
}
 8002e4e:	bf00      	nop
 8002e50:	bd80      	pop	{r7, pc}
 8002e52:	bf00      	nop
 8002e54:	20000004 	.word	0x20000004
 8002e58:	20000154 	.word	0x20000154
 8002e5c:	20000000 	.word	0x20000000
 8002e60:	40021800 	.word	0x40021800
 8002e64:	2000016c 	.word	0x2000016c

08002e68 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002e68:	b580      	push	{r7, lr}
 8002e6a:	b084      	sub	sp, #16
 8002e6c:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002e6e:	f000 fb2f 	bl	80034d0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002e72:	f000 f82d 	bl	8002ed0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002e76:	f7ff f9cf 	bl	8002218 <MX_GPIO_Init>
  MX_TIM2_Init();
 8002e7a:	f000 fa4f 	bl	800331c <MX_TIM2_Init>
  MX_SPI1_Init();
 8002e7e:	f000 f95b 	bl	8003138 <MX_SPI1_Init>
  MX_FSMC_Init();
 8002e82:	f7ff f8f9 	bl	8002078 <MX_FSMC_Init>
  MX_I2C1_Init();
 8002e86:	f7ff fabf 	bl	8002408 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  system_init();
 8002e8a:	f000 f88b 	bl	8002fa4 <system_init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
 lcd_Clear(BLACK);
 8002e8e:	2000      	movs	r0, #0
 8002e90:	f7ff fbae 	bl	80025f0 <lcd_Clear>
 updateTime(18, 11, 24, 2, 10, 0, 0);
 8002e94:	2300      	movs	r3, #0
 8002e96:	9302      	str	r3, [sp, #8]
 8002e98:	2300      	movs	r3, #0
 8002e9a:	9301      	str	r3, [sp, #4]
 8002e9c:	230a      	movs	r3, #10
 8002e9e:	9300      	str	r3, [sp, #0]
 8002ea0:	2302      	movs	r3, #2
 8002ea2:	2218      	movs	r2, #24
 8002ea4:	210b      	movs	r1, #11
 8002ea6:	2012      	movs	r0, #18
 8002ea8:	f7fd fb7e 	bl	80005a8 <updateTime>
  while (1)
  {
	  while(!flag_timer2);
 8002eac:	bf00      	nop
 8002eae:	4b07      	ldr	r3, [pc, #28]	@ (8002ecc <main+0x64>)
 8002eb0:	881b      	ldrh	r3, [r3, #0]
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d0fb      	beq.n	8002eae <main+0x46>
	  flag_timer2 = 0;
 8002eb6:	4b05      	ldr	r3, [pc, #20]	@ (8002ecc <main+0x64>)
 8002eb8:	2200      	movs	r2, #0
 8002eba:	801a      	strh	r2, [r3, #0]
	  button_Scan();
 8002ebc:	f7fd fb08 	bl	80004d0 <button_Scan>
	  ds3231_ReadTime();
 8002ec0:	f7ff f876 	bl	8001fb0 <ds3231_ReadTime>
	  clock_fsm();
 8002ec4:	f7fd fc7a 	bl	80007bc <clock_fsm>
  {
 8002ec8:	e7f0      	b.n	8002eac <main+0x44>
 8002eca:	bf00      	nop
 8002ecc:	20000158 	.word	0x20000158

08002ed0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	b094      	sub	sp, #80	@ 0x50
 8002ed4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002ed6:	f107 0320 	add.w	r3, r7, #32
 8002eda:	2230      	movs	r2, #48	@ 0x30
 8002edc:	2100      	movs	r1, #0
 8002ede:	4618      	mov	r0, r3
 8002ee0:	f003 ff04 	bl	8006cec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002ee4:	f107 030c 	add.w	r3, r7, #12
 8002ee8:	2200      	movs	r2, #0
 8002eea:	601a      	str	r2, [r3, #0]
 8002eec:	605a      	str	r2, [r3, #4]
 8002eee:	609a      	str	r2, [r3, #8]
 8002ef0:	60da      	str	r2, [r3, #12]
 8002ef2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002ef4:	2300      	movs	r3, #0
 8002ef6:	60bb      	str	r3, [r7, #8]
 8002ef8:	4b28      	ldr	r3, [pc, #160]	@ (8002f9c <SystemClock_Config+0xcc>)
 8002efa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002efc:	4a27      	ldr	r2, [pc, #156]	@ (8002f9c <SystemClock_Config+0xcc>)
 8002efe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002f02:	6413      	str	r3, [r2, #64]	@ 0x40
 8002f04:	4b25      	ldr	r3, [pc, #148]	@ (8002f9c <SystemClock_Config+0xcc>)
 8002f06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f08:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002f0c:	60bb      	str	r3, [r7, #8]
 8002f0e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002f10:	2300      	movs	r3, #0
 8002f12:	607b      	str	r3, [r7, #4]
 8002f14:	4b22      	ldr	r3, [pc, #136]	@ (8002fa0 <SystemClock_Config+0xd0>)
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	4a21      	ldr	r2, [pc, #132]	@ (8002fa0 <SystemClock_Config+0xd0>)
 8002f1a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002f1e:	6013      	str	r3, [r2, #0]
 8002f20:	4b1f      	ldr	r3, [pc, #124]	@ (8002fa0 <SystemClock_Config+0xd0>)
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002f28:	607b      	str	r3, [r7, #4]
 8002f2a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002f2c:	2302      	movs	r3, #2
 8002f2e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002f30:	2301      	movs	r3, #1
 8002f32:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002f34:	2310      	movs	r3, #16
 8002f36:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002f38:	2302      	movs	r3, #2
 8002f3a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002f3c:	2300      	movs	r3, #0
 8002f3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8002f40:	2308      	movs	r3, #8
 8002f42:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8002f44:	23a8      	movs	r3, #168	@ 0xa8
 8002f46:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002f48:	2302      	movs	r3, #2
 8002f4a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8002f4c:	2304      	movs	r3, #4
 8002f4e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002f50:	f107 0320 	add.w	r3, r7, #32
 8002f54:	4618      	mov	r0, r3
 8002f56:	f001 ff07 	bl	8004d68 <HAL_RCC_OscConfig>
 8002f5a:	4603      	mov	r3, r0
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d001      	beq.n	8002f64 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8002f60:	f000 f842 	bl	8002fe8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002f64:	230f      	movs	r3, #15
 8002f66:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002f68:	2302      	movs	r3, #2
 8002f6a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002f6c:	2300      	movs	r3, #0
 8002f6e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002f70:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8002f74:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8002f76:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8002f7a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002f7c:	f107 030c 	add.w	r3, r7, #12
 8002f80:	2105      	movs	r1, #5
 8002f82:	4618      	mov	r0, r3
 8002f84:	f002 f968 	bl	8005258 <HAL_RCC_ClockConfig>
 8002f88:	4603      	mov	r3, r0
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d001      	beq.n	8002f92 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8002f8e:	f000 f82b 	bl	8002fe8 <Error_Handler>
  }
}
 8002f92:	bf00      	nop
 8002f94:	3750      	adds	r7, #80	@ 0x50
 8002f96:	46bd      	mov	sp, r7
 8002f98:	bd80      	pop	{r7, pc}
 8002f9a:	bf00      	nop
 8002f9c:	40023800 	.word	0x40023800
 8002fa0:	40007000 	.word	0x40007000

08002fa4 <system_init>:

/* USER CODE BEGIN 4 */
void system_init(){
 8002fa4:	b580      	push	{r7, lr}
 8002fa6:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(OUTPUT_Y0_GPIO_Port, OUTPUT_Y0_Pin, 0);
 8002fa8:	2200      	movs	r2, #0
 8002faa:	2120      	movs	r1, #32
 8002fac:	480d      	ldr	r0, [pc, #52]	@ (8002fe4 <system_init+0x40>)
 8002fae:	f000 fdd3 	bl	8003b58 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(OUTPUT_Y1_GPIO_Port, OUTPUT_Y1_Pin, 0);
 8002fb2:	2200      	movs	r2, #0
 8002fb4:	2140      	movs	r1, #64	@ 0x40
 8002fb6:	480b      	ldr	r0, [pc, #44]	@ (8002fe4 <system_init+0x40>)
 8002fb8:	f000 fdce 	bl	8003b58 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(DEBUG_LED_GPIO_Port, DEBUG_LED_Pin, 0);
 8002fbc:	2200      	movs	r2, #0
 8002fbe:	2110      	movs	r1, #16
 8002fc0:	4808      	ldr	r0, [pc, #32]	@ (8002fe4 <system_init+0x40>)
 8002fc2:	f000 fdc9 	bl	8003b58 <HAL_GPIO_WritePin>
	  timer_init();
 8002fc6:	f000 f815 	bl	8002ff4 <timer_init>
	  led7_init();
 8002fca:	f7ff feb5 	bl	8002d38 <led7_init>
	  button_init();
 8002fce:	f7fd fa73 	bl	80004b8 <button_init>
	  lcd_init();
 8002fd2:	f7ff fced 	bl	80029b0 <lcd_init>
	  ds3231_init();
 8002fd6:	f7fe ff85 	bl	8001ee4 <ds3231_init>
	  setTimer2(50);
 8002fda:	2032      	movs	r0, #50	@ 0x32
 8002fdc:	f000 f814 	bl	8003008 <setTimer2>
}
 8002fe0:	bf00      	nop
 8002fe2:	bd80      	pop	{r7, pc}
 8002fe4:	40021000 	.word	0x40021000

08002fe8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002fe8:	b480      	push	{r7}
 8002fea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002fec:	b672      	cpsid	i
}
 8002fee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002ff0:	bf00      	nop
 8002ff2:	e7fd      	b.n	8002ff0 <Error_Handler+0x8>

08002ff4 <timer_init>:
/**
  * @brief  Init timer interrupt
  * @param  None
  * @retval None
  */
void timer_init(){
 8002ff4:	b580      	push	{r7, lr}
 8002ff6:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(&htim2);
 8002ff8:	4802      	ldr	r0, [pc, #8]	@ (8003004 <timer_init+0x10>)
 8002ffa:	f003 f975 	bl	80062e8 <HAL_TIM_Base_Start_IT>
}
 8002ffe:	bf00      	nop
 8003000:	bd80      	pop	{r7, pc}
 8003002:	bf00      	nop
 8003004:	200001c4 	.word	0x200001c4

08003008 <setTimer2>:
/**
  * @brief  Set duration of software timer interrupt
  * @param  duration Duration of software timer interrupt
  * @retval None
  */
void setTimer2(uint16_t duration){
 8003008:	b480      	push	{r7}
 800300a:	b083      	sub	sp, #12
 800300c:	af00      	add	r7, sp, #0
 800300e:	4603      	mov	r3, r0
 8003010:	80fb      	strh	r3, [r7, #6]
	timer2_MUL = duration/TIMER_CYCLE_2;
 8003012:	4a08      	ldr	r2, [pc, #32]	@ (8003034 <setTimer2+0x2c>)
 8003014:	88fb      	ldrh	r3, [r7, #6]
 8003016:	8013      	strh	r3, [r2, #0]
	timer2_counter = timer2_MUL;
 8003018:	4b06      	ldr	r3, [pc, #24]	@ (8003034 <setTimer2+0x2c>)
 800301a:	881a      	ldrh	r2, [r3, #0]
 800301c:	4b06      	ldr	r3, [pc, #24]	@ (8003038 <setTimer2+0x30>)
 800301e:	801a      	strh	r2, [r3, #0]
	flag_timer2 = 0;
 8003020:	4b06      	ldr	r3, [pc, #24]	@ (800303c <setTimer2+0x34>)
 8003022:	2200      	movs	r2, #0
 8003024:	801a      	strh	r2, [r3, #0]
}
 8003026:	bf00      	nop
 8003028:	370c      	adds	r7, #12
 800302a:	46bd      	mov	sp, r7
 800302c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003030:	4770      	bx	lr
 8003032:	bf00      	nop
 8003034:	2000015c 	.word	0x2000015c
 8003038:	2000015a 	.word	0x2000015a
 800303c:	20000158 	.word	0x20000158

08003040 <setTimer3>:

void setTimer3(uint16_t duration){
 8003040:	b480      	push	{r7}
 8003042:	b083      	sub	sp, #12
 8003044:	af00      	add	r7, sp, #0
 8003046:	4603      	mov	r3, r0
 8003048:	80fb      	strh	r3, [r7, #6]
	timer3_MUL = duration/TIMER_CYCLE_3;
 800304a:	4a08      	ldr	r2, [pc, #32]	@ (800306c <setTimer3+0x2c>)
 800304c:	88fb      	ldrh	r3, [r7, #6]
 800304e:	8013      	strh	r3, [r2, #0]
	timer3_counter = timer3_MUL;
 8003050:	4b06      	ldr	r3, [pc, #24]	@ (800306c <setTimer3+0x2c>)
 8003052:	881a      	ldrh	r2, [r3, #0]
 8003054:	4b06      	ldr	r3, [pc, #24]	@ (8003070 <setTimer3+0x30>)
 8003056:	801a      	strh	r2, [r3, #0]
	flag_timer3 = 0;
 8003058:	4b06      	ldr	r3, [pc, #24]	@ (8003074 <setTimer3+0x34>)
 800305a:	2200      	movs	r2, #0
 800305c:	801a      	strh	r2, [r3, #0]
}
 800305e:	bf00      	nop
 8003060:	370c      	adds	r7, #12
 8003062:	46bd      	mov	sp, r7
 8003064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003068:	4770      	bx	lr
 800306a:	bf00      	nop
 800306c:	20000162 	.word	0x20000162
 8003070:	20000160 	.word	0x20000160
 8003074:	2000015e 	.word	0x2000015e

08003078 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Timer interrupt routine
  * @param  htim TIM Base handle
  * @note	This callback function is called by system
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8003078:	b580      	push	{r7, lr}
 800307a:	b082      	sub	sp, #8
 800307c:	af00      	add	r7, sp, #0
 800307e:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM2){
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003088:	d140      	bne.n	800310c <HAL_TIM_PeriodElapsedCallback+0x94>
		if(timer2_counter > 0){
 800308a:	4b22      	ldr	r3, [pc, #136]	@ (8003114 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 800308c:	881b      	ldrh	r3, [r3, #0]
 800308e:	2b00      	cmp	r3, #0
 8003090:	d010      	beq.n	80030b4 <HAL_TIM_PeriodElapsedCallback+0x3c>
			timer2_counter--;
 8003092:	4b20      	ldr	r3, [pc, #128]	@ (8003114 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8003094:	881b      	ldrh	r3, [r3, #0]
 8003096:	3b01      	subs	r3, #1
 8003098:	b29a      	uxth	r2, r3
 800309a:	4b1e      	ldr	r3, [pc, #120]	@ (8003114 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 800309c:	801a      	strh	r2, [r3, #0]
			if(timer2_counter == 0) {
 800309e:	4b1d      	ldr	r3, [pc, #116]	@ (8003114 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 80030a0:	881b      	ldrh	r3, [r3, #0]
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d106      	bne.n	80030b4 <HAL_TIM_PeriodElapsedCallback+0x3c>
				flag_timer2 = 1;
 80030a6:	4b1c      	ldr	r3, [pc, #112]	@ (8003118 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 80030a8:	2201      	movs	r2, #1
 80030aa:	801a      	strh	r2, [r3, #0]
				timer2_counter = timer2_MUL;
 80030ac:	4b1b      	ldr	r3, [pc, #108]	@ (800311c <HAL_TIM_PeriodElapsedCallback+0xa4>)
 80030ae:	881a      	ldrh	r2, [r3, #0]
 80030b0:	4b18      	ldr	r3, [pc, #96]	@ (8003114 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 80030b2:	801a      	strh	r2, [r3, #0]
			}
		}
		if(timer3_counter > 0){
 80030b4:	4b1a      	ldr	r3, [pc, #104]	@ (8003120 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 80030b6:	881b      	ldrh	r3, [r3, #0]
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d010      	beq.n	80030de <HAL_TIM_PeriodElapsedCallback+0x66>
			timer3_counter--;
 80030bc:	4b18      	ldr	r3, [pc, #96]	@ (8003120 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 80030be:	881b      	ldrh	r3, [r3, #0]
 80030c0:	3b01      	subs	r3, #1
 80030c2:	b29a      	uxth	r2, r3
 80030c4:	4b16      	ldr	r3, [pc, #88]	@ (8003120 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 80030c6:	801a      	strh	r2, [r3, #0]
			if(timer3_counter == 0) {
 80030c8:	4b15      	ldr	r3, [pc, #84]	@ (8003120 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 80030ca:	881b      	ldrh	r3, [r3, #0]
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d106      	bne.n	80030de <HAL_TIM_PeriodElapsedCallback+0x66>
				flag_timer3 = 1;
 80030d0:	4b14      	ldr	r3, [pc, #80]	@ (8003124 <HAL_TIM_PeriodElapsedCallback+0xac>)
 80030d2:	2201      	movs	r2, #1
 80030d4:	801a      	strh	r2, [r3, #0]
				timer3_counter = timer3_MUL;
 80030d6:	4b14      	ldr	r3, [pc, #80]	@ (8003128 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 80030d8:	881a      	ldrh	r2, [r3, #0]
 80030da:	4b11      	ldr	r3, [pc, #68]	@ (8003120 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 80030dc:	801a      	strh	r2, [r3, #0]
			}
		}
		if(timer4_counter > 0){
 80030de:	4b13      	ldr	r3, [pc, #76]	@ (800312c <HAL_TIM_PeriodElapsedCallback+0xb4>)
 80030e0:	881b      	ldrh	r3, [r3, #0]
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d010      	beq.n	8003108 <HAL_TIM_PeriodElapsedCallback+0x90>
			timer4_counter--;
 80030e6:	4b11      	ldr	r3, [pc, #68]	@ (800312c <HAL_TIM_PeriodElapsedCallback+0xb4>)
 80030e8:	881b      	ldrh	r3, [r3, #0]
 80030ea:	3b01      	subs	r3, #1
 80030ec:	b29a      	uxth	r2, r3
 80030ee:	4b0f      	ldr	r3, [pc, #60]	@ (800312c <HAL_TIM_PeriodElapsedCallback+0xb4>)
 80030f0:	801a      	strh	r2, [r3, #0]
			if(timer4_counter == 0) {
 80030f2:	4b0e      	ldr	r3, [pc, #56]	@ (800312c <HAL_TIM_PeriodElapsedCallback+0xb4>)
 80030f4:	881b      	ldrh	r3, [r3, #0]
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d106      	bne.n	8003108 <HAL_TIM_PeriodElapsedCallback+0x90>
				flag_timer4 = 1;
 80030fa:	4b0d      	ldr	r3, [pc, #52]	@ (8003130 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 80030fc:	2201      	movs	r2, #1
 80030fe:	801a      	strh	r2, [r3, #0]
				timer4_counter = timer4_MUL;
 8003100:	4b0c      	ldr	r3, [pc, #48]	@ (8003134 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8003102:	881a      	ldrh	r2, [r3, #0]
 8003104:	4b09      	ldr	r3, [pc, #36]	@ (800312c <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8003106:	801a      	strh	r2, [r3, #0]
			}
		}
		// 1ms interrupt here
		led7_Scan();
 8003108:	f7ff fe22 	bl	8002d50 <led7_Scan>
	}
}
 800310c:	bf00      	nop
 800310e:	3708      	adds	r7, #8
 8003110:	46bd      	mov	sp, r7
 8003112:	bd80      	pop	{r7, pc}
 8003114:	2000015a 	.word	0x2000015a
 8003118:	20000158 	.word	0x20000158
 800311c:	2000015c 	.word	0x2000015c
 8003120:	20000160 	.word	0x20000160
 8003124:	2000015e 	.word	0x2000015e
 8003128:	20000162 	.word	0x20000162
 800312c:	20000166 	.word	0x20000166
 8003130:	20000164 	.word	0x20000164
 8003134:	20000168 	.word	0x20000168

08003138 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8003138:	b580      	push	{r7, lr}
 800313a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 800313c:	4b17      	ldr	r3, [pc, #92]	@ (800319c <MX_SPI1_Init+0x64>)
 800313e:	4a18      	ldr	r2, [pc, #96]	@ (80031a0 <MX_SPI1_Init+0x68>)
 8003140:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8003142:	4b16      	ldr	r3, [pc, #88]	@ (800319c <MX_SPI1_Init+0x64>)
 8003144:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8003148:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800314a:	4b14      	ldr	r3, [pc, #80]	@ (800319c <MX_SPI1_Init+0x64>)
 800314c:	2200      	movs	r2, #0
 800314e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8003150:	4b12      	ldr	r3, [pc, #72]	@ (800319c <MX_SPI1_Init+0x64>)
 8003152:	2200      	movs	r2, #0
 8003154:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003156:	4b11      	ldr	r3, [pc, #68]	@ (800319c <MX_SPI1_Init+0x64>)
 8003158:	2200      	movs	r2, #0
 800315a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800315c:	4b0f      	ldr	r3, [pc, #60]	@ (800319c <MX_SPI1_Init+0x64>)
 800315e:	2200      	movs	r2, #0
 8003160:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8003162:	4b0e      	ldr	r3, [pc, #56]	@ (800319c <MX_SPI1_Init+0x64>)
 8003164:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003168:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800316a:	4b0c      	ldr	r3, [pc, #48]	@ (800319c <MX_SPI1_Init+0x64>)
 800316c:	2200      	movs	r2, #0
 800316e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003170:	4b0a      	ldr	r3, [pc, #40]	@ (800319c <MX_SPI1_Init+0x64>)
 8003172:	2200      	movs	r2, #0
 8003174:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8003176:	4b09      	ldr	r3, [pc, #36]	@ (800319c <MX_SPI1_Init+0x64>)
 8003178:	2200      	movs	r2, #0
 800317a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800317c:	4b07      	ldr	r3, [pc, #28]	@ (800319c <MX_SPI1_Init+0x64>)
 800317e:	2200      	movs	r2, #0
 8003180:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8003182:	4b06      	ldr	r3, [pc, #24]	@ (800319c <MX_SPI1_Init+0x64>)
 8003184:	220a      	movs	r2, #10
 8003186:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8003188:	4804      	ldr	r0, [pc, #16]	@ (800319c <MX_SPI1_Init+0x64>)
 800318a:	f002 fa71 	bl	8005670 <HAL_SPI_Init>
 800318e:	4603      	mov	r3, r0
 8003190:	2b00      	cmp	r3, #0
 8003192:	d001      	beq.n	8003198 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8003194:	f7ff ff28 	bl	8002fe8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8003198:	bf00      	nop
 800319a:	bd80      	pop	{r7, pc}
 800319c:	2000016c 	.word	0x2000016c
 80031a0:	40013000 	.word	0x40013000

080031a4 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80031a4:	b580      	push	{r7, lr}
 80031a6:	b08a      	sub	sp, #40	@ 0x28
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80031ac:	f107 0314 	add.w	r3, r7, #20
 80031b0:	2200      	movs	r2, #0
 80031b2:	601a      	str	r2, [r3, #0]
 80031b4:	605a      	str	r2, [r3, #4]
 80031b6:	609a      	str	r2, [r3, #8]
 80031b8:	60da      	str	r2, [r3, #12]
 80031ba:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	4a19      	ldr	r2, [pc, #100]	@ (8003228 <HAL_SPI_MspInit+0x84>)
 80031c2:	4293      	cmp	r3, r2
 80031c4:	d12b      	bne.n	800321e <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80031c6:	2300      	movs	r3, #0
 80031c8:	613b      	str	r3, [r7, #16]
 80031ca:	4b18      	ldr	r3, [pc, #96]	@ (800322c <HAL_SPI_MspInit+0x88>)
 80031cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031ce:	4a17      	ldr	r2, [pc, #92]	@ (800322c <HAL_SPI_MspInit+0x88>)
 80031d0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80031d4:	6453      	str	r3, [r2, #68]	@ 0x44
 80031d6:	4b15      	ldr	r3, [pc, #84]	@ (800322c <HAL_SPI_MspInit+0x88>)
 80031d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031da:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80031de:	613b      	str	r3, [r7, #16]
 80031e0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80031e2:	2300      	movs	r3, #0
 80031e4:	60fb      	str	r3, [r7, #12]
 80031e6:	4b11      	ldr	r3, [pc, #68]	@ (800322c <HAL_SPI_MspInit+0x88>)
 80031e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031ea:	4a10      	ldr	r2, [pc, #64]	@ (800322c <HAL_SPI_MspInit+0x88>)
 80031ec:	f043 0302 	orr.w	r3, r3, #2
 80031f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80031f2:	4b0e      	ldr	r3, [pc, #56]	@ (800322c <HAL_SPI_MspInit+0x88>)
 80031f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031f6:	f003 0302 	and.w	r3, r3, #2
 80031fa:	60fb      	str	r3, [r7, #12]
 80031fc:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 80031fe:	2338      	movs	r3, #56	@ 0x38
 8003200:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003202:	2302      	movs	r3, #2
 8003204:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003206:	2300      	movs	r3, #0
 8003208:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800320a:	2303      	movs	r3, #3
 800320c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800320e:	2305      	movs	r3, #5
 8003210:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003212:	f107 0314 	add.w	r3, r7, #20
 8003216:	4619      	mov	r1, r3
 8003218:	4805      	ldr	r0, [pc, #20]	@ (8003230 <HAL_SPI_MspInit+0x8c>)
 800321a:	f000 fb01 	bl	8003820 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 800321e:	bf00      	nop
 8003220:	3728      	adds	r7, #40	@ 0x28
 8003222:	46bd      	mov	sp, r7
 8003224:	bd80      	pop	{r7, pc}
 8003226:	bf00      	nop
 8003228:	40013000 	.word	0x40013000
 800322c:	40023800 	.word	0x40023800
 8003230:	40020400 	.word	0x40020400

08003234 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003234:	b480      	push	{r7}
 8003236:	b083      	sub	sp, #12
 8003238:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800323a:	2300      	movs	r3, #0
 800323c:	607b      	str	r3, [r7, #4]
 800323e:	4b10      	ldr	r3, [pc, #64]	@ (8003280 <HAL_MspInit+0x4c>)
 8003240:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003242:	4a0f      	ldr	r2, [pc, #60]	@ (8003280 <HAL_MspInit+0x4c>)
 8003244:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003248:	6453      	str	r3, [r2, #68]	@ 0x44
 800324a:	4b0d      	ldr	r3, [pc, #52]	@ (8003280 <HAL_MspInit+0x4c>)
 800324c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800324e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003252:	607b      	str	r3, [r7, #4]
 8003254:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003256:	2300      	movs	r3, #0
 8003258:	603b      	str	r3, [r7, #0]
 800325a:	4b09      	ldr	r3, [pc, #36]	@ (8003280 <HAL_MspInit+0x4c>)
 800325c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800325e:	4a08      	ldr	r2, [pc, #32]	@ (8003280 <HAL_MspInit+0x4c>)
 8003260:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003264:	6413      	str	r3, [r2, #64]	@ 0x40
 8003266:	4b06      	ldr	r3, [pc, #24]	@ (8003280 <HAL_MspInit+0x4c>)
 8003268:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800326a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800326e:	603b      	str	r3, [r7, #0]
 8003270:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003272:	bf00      	nop
 8003274:	370c      	adds	r7, #12
 8003276:	46bd      	mov	sp, r7
 8003278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800327c:	4770      	bx	lr
 800327e:	bf00      	nop
 8003280:	40023800 	.word	0x40023800

08003284 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003284:	b480      	push	{r7}
 8003286:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003288:	bf00      	nop
 800328a:	e7fd      	b.n	8003288 <NMI_Handler+0x4>

0800328c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800328c:	b480      	push	{r7}
 800328e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003290:	bf00      	nop
 8003292:	e7fd      	b.n	8003290 <HardFault_Handler+0x4>

08003294 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003294:	b480      	push	{r7}
 8003296:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003298:	bf00      	nop
 800329a:	e7fd      	b.n	8003298 <MemManage_Handler+0x4>

0800329c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800329c:	b480      	push	{r7}
 800329e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80032a0:	bf00      	nop
 80032a2:	e7fd      	b.n	80032a0 <BusFault_Handler+0x4>

080032a4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80032a4:	b480      	push	{r7}
 80032a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80032a8:	bf00      	nop
 80032aa:	e7fd      	b.n	80032a8 <UsageFault_Handler+0x4>

080032ac <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80032ac:	b480      	push	{r7}
 80032ae:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80032b0:	bf00      	nop
 80032b2:	46bd      	mov	sp, r7
 80032b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b8:	4770      	bx	lr

080032ba <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80032ba:	b480      	push	{r7}
 80032bc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80032be:	bf00      	nop
 80032c0:	46bd      	mov	sp, r7
 80032c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c6:	4770      	bx	lr

080032c8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80032c8:	b480      	push	{r7}
 80032ca:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80032cc:	bf00      	nop
 80032ce:	46bd      	mov	sp, r7
 80032d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d4:	4770      	bx	lr

080032d6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80032d6:	b580      	push	{r7, lr}
 80032d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80032da:	f000 f94b 	bl	8003574 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80032de:	bf00      	nop
 80032e0:	bd80      	pop	{r7, pc}
	...

080032e4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80032e4:	b580      	push	{r7, lr}
 80032e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80032e8:	4802      	ldr	r0, [pc, #8]	@ (80032f4 <TIM2_IRQHandler+0x10>)
 80032ea:	f003 f86d 	bl	80063c8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80032ee:	bf00      	nop
 80032f0:	bd80      	pop	{r7, pc}
 80032f2:	bf00      	nop
 80032f4:	200001c4 	.word	0x200001c4

080032f8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80032f8:	b480      	push	{r7}
 80032fa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80032fc:	4b06      	ldr	r3, [pc, #24]	@ (8003318 <SystemInit+0x20>)
 80032fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003302:	4a05      	ldr	r2, [pc, #20]	@ (8003318 <SystemInit+0x20>)
 8003304:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003308:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800330c:	bf00      	nop
 800330e:	46bd      	mov	sp, r7
 8003310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003314:	4770      	bx	lr
 8003316:	bf00      	nop
 8003318:	e000ed00 	.word	0xe000ed00

0800331c <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800331c:	b580      	push	{r7, lr}
 800331e:	b086      	sub	sp, #24
 8003320:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003322:	f107 0308 	add.w	r3, r7, #8
 8003326:	2200      	movs	r2, #0
 8003328:	601a      	str	r2, [r3, #0]
 800332a:	605a      	str	r2, [r3, #4]
 800332c:	609a      	str	r2, [r3, #8]
 800332e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003330:	463b      	mov	r3, r7
 8003332:	2200      	movs	r2, #0
 8003334:	601a      	str	r2, [r3, #0]
 8003336:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8003338:	4b1d      	ldr	r3, [pc, #116]	@ (80033b0 <MX_TIM2_Init+0x94>)
 800333a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800333e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 840-1;
 8003340:	4b1b      	ldr	r3, [pc, #108]	@ (80033b0 <MX_TIM2_Init+0x94>)
 8003342:	f240 3247 	movw	r2, #839	@ 0x347
 8003346:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003348:	4b19      	ldr	r3, [pc, #100]	@ (80033b0 <MX_TIM2_Init+0x94>)
 800334a:	2200      	movs	r2, #0
 800334c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100-1;
 800334e:	4b18      	ldr	r3, [pc, #96]	@ (80033b0 <MX_TIM2_Init+0x94>)
 8003350:	2263      	movs	r2, #99	@ 0x63
 8003352:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003354:	4b16      	ldr	r3, [pc, #88]	@ (80033b0 <MX_TIM2_Init+0x94>)
 8003356:	2200      	movs	r2, #0
 8003358:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800335a:	4b15      	ldr	r3, [pc, #84]	@ (80033b0 <MX_TIM2_Init+0x94>)
 800335c:	2200      	movs	r2, #0
 800335e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8003360:	4813      	ldr	r0, [pc, #76]	@ (80033b0 <MX_TIM2_Init+0x94>)
 8003362:	f002 ff71 	bl	8006248 <HAL_TIM_Base_Init>
 8003366:	4603      	mov	r3, r0
 8003368:	2b00      	cmp	r3, #0
 800336a:	d001      	beq.n	8003370 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 800336c:	f7ff fe3c 	bl	8002fe8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003370:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003374:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8003376:	f107 0308 	add.w	r3, r7, #8
 800337a:	4619      	mov	r1, r3
 800337c:	480c      	ldr	r0, [pc, #48]	@ (80033b0 <MX_TIM2_Init+0x94>)
 800337e:	f003 f92b 	bl	80065d8 <HAL_TIM_ConfigClockSource>
 8003382:	4603      	mov	r3, r0
 8003384:	2b00      	cmp	r3, #0
 8003386:	d001      	beq.n	800338c <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8003388:	f7ff fe2e 	bl	8002fe8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800338c:	2300      	movs	r3, #0
 800338e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003390:	2300      	movs	r3, #0
 8003392:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003394:	463b      	mov	r3, r7
 8003396:	4619      	mov	r1, r3
 8003398:	4805      	ldr	r0, [pc, #20]	@ (80033b0 <MX_TIM2_Init+0x94>)
 800339a:	f003 fb47 	bl	8006a2c <HAL_TIMEx_MasterConfigSynchronization>
 800339e:	4603      	mov	r3, r0
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d001      	beq.n	80033a8 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80033a4:	f7ff fe20 	bl	8002fe8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80033a8:	bf00      	nop
 80033aa:	3718      	adds	r7, #24
 80033ac:	46bd      	mov	sp, r7
 80033ae:	bd80      	pop	{r7, pc}
 80033b0:	200001c4 	.word	0x200001c4

080033b4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80033b4:	b580      	push	{r7, lr}
 80033b6:	b084      	sub	sp, #16
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80033c4:	d115      	bne.n	80033f2 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80033c6:	2300      	movs	r3, #0
 80033c8:	60fb      	str	r3, [r7, #12]
 80033ca:	4b0c      	ldr	r3, [pc, #48]	@ (80033fc <HAL_TIM_Base_MspInit+0x48>)
 80033cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033ce:	4a0b      	ldr	r2, [pc, #44]	@ (80033fc <HAL_TIM_Base_MspInit+0x48>)
 80033d0:	f043 0301 	orr.w	r3, r3, #1
 80033d4:	6413      	str	r3, [r2, #64]	@ 0x40
 80033d6:	4b09      	ldr	r3, [pc, #36]	@ (80033fc <HAL_TIM_Base_MspInit+0x48>)
 80033d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033da:	f003 0301 	and.w	r3, r3, #1
 80033de:	60fb      	str	r3, [r7, #12]
 80033e0:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80033e2:	2200      	movs	r2, #0
 80033e4:	2100      	movs	r1, #0
 80033e6:	201c      	movs	r0, #28
 80033e8:	f000 f9e3 	bl	80037b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80033ec:	201c      	movs	r0, #28
 80033ee:	f000 f9fc 	bl	80037ea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 80033f2:	bf00      	nop
 80033f4:	3710      	adds	r7, #16
 80033f6:	46bd      	mov	sp, r7
 80033f8:	bd80      	pop	{r7, pc}
 80033fa:	bf00      	nop
 80033fc:	40023800 	.word	0x40023800

08003400 <BCD2DEC>:
 *  Created on: Sep 26, 2023
 *      Author: HaHuyen
 */
#include "utils.h"

uint8_t BCD2DEC(uint8_t data) {
 8003400:	b480      	push	{r7}
 8003402:	b083      	sub	sp, #12
 8003404:	af00      	add	r7, sp, #0
 8003406:	4603      	mov	r3, r0
 8003408:	71fb      	strb	r3, [r7, #7]
	return (data >> 4) * 10 + (data & 0x0f);
 800340a:	79fb      	ldrb	r3, [r7, #7]
 800340c:	091b      	lsrs	r3, r3, #4
 800340e:	b2db      	uxtb	r3, r3
 8003410:	461a      	mov	r2, r3
 8003412:	0092      	lsls	r2, r2, #2
 8003414:	4413      	add	r3, r2
 8003416:	005b      	lsls	r3, r3, #1
 8003418:	b2da      	uxtb	r2, r3
 800341a:	79fb      	ldrb	r3, [r7, #7]
 800341c:	f003 030f 	and.w	r3, r3, #15
 8003420:	b2db      	uxtb	r3, r3
 8003422:	4413      	add	r3, r2
 8003424:	b2db      	uxtb	r3, r3
}
 8003426:	4618      	mov	r0, r3
 8003428:	370c      	adds	r7, #12
 800342a:	46bd      	mov	sp, r7
 800342c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003430:	4770      	bx	lr
	...

08003434 <DEC2BCD>:

uint8_t DEC2BCD(uint8_t data) {
 8003434:	b480      	push	{r7}
 8003436:	b083      	sub	sp, #12
 8003438:	af00      	add	r7, sp, #0
 800343a:	4603      	mov	r3, r0
 800343c:	71fb      	strb	r3, [r7, #7]
	return (data / 10) << 4 | (data % 10);
 800343e:	79fb      	ldrb	r3, [r7, #7]
 8003440:	4a0d      	ldr	r2, [pc, #52]	@ (8003478 <DEC2BCD+0x44>)
 8003442:	fba2 2303 	umull	r2, r3, r2, r3
 8003446:	08db      	lsrs	r3, r3, #3
 8003448:	b2db      	uxtb	r3, r3
 800344a:	011b      	lsls	r3, r3, #4
 800344c:	b258      	sxtb	r0, r3
 800344e:	79fa      	ldrb	r2, [r7, #7]
 8003450:	4b09      	ldr	r3, [pc, #36]	@ (8003478 <DEC2BCD+0x44>)
 8003452:	fba3 1302 	umull	r1, r3, r3, r2
 8003456:	08d9      	lsrs	r1, r3, #3
 8003458:	460b      	mov	r3, r1
 800345a:	009b      	lsls	r3, r3, #2
 800345c:	440b      	add	r3, r1
 800345e:	005b      	lsls	r3, r3, #1
 8003460:	1ad3      	subs	r3, r2, r3
 8003462:	b2db      	uxtb	r3, r3
 8003464:	b25b      	sxtb	r3, r3
 8003466:	4303      	orrs	r3, r0
 8003468:	b25b      	sxtb	r3, r3
 800346a:	b2db      	uxtb	r3, r3
}
 800346c:	4618      	mov	r0, r3
 800346e:	370c      	adds	r7, #12
 8003470:	46bd      	mov	sp, r7
 8003472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003476:	4770      	bx	lr
 8003478:	cccccccd 	.word	0xcccccccd

0800347c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800347c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80034b4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003480:	480d      	ldr	r0, [pc, #52]	@ (80034b8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8003482:	490e      	ldr	r1, [pc, #56]	@ (80034bc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003484:	4a0e      	ldr	r2, [pc, #56]	@ (80034c0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003486:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003488:	e002      	b.n	8003490 <LoopCopyDataInit>

0800348a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800348a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800348c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800348e:	3304      	adds	r3, #4

08003490 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003490:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003492:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003494:	d3f9      	bcc.n	800348a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003496:	4a0b      	ldr	r2, [pc, #44]	@ (80034c4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003498:	4c0b      	ldr	r4, [pc, #44]	@ (80034c8 <LoopFillZerobss+0x26>)
  movs r3, #0
 800349a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800349c:	e001      	b.n	80034a2 <LoopFillZerobss>

0800349e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800349e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80034a0:	3204      	adds	r2, #4

080034a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80034a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80034a4:	d3fb      	bcc.n	800349e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80034a6:	f7ff ff27 	bl	80032f8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80034aa:	f003 fc27 	bl	8006cfc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80034ae:	f7ff fcdb 	bl	8002e68 <main>
  bx  lr    
 80034b2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80034b4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80034b8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80034bc:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 80034c0:	08009d2c 	.word	0x08009d2c
  ldr r2, =_sbss
 80034c4:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 80034c8:	20000210 	.word	0x20000210

080034cc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80034cc:	e7fe      	b.n	80034cc <ADC_IRQHandler>
	...

080034d0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80034d0:	b580      	push	{r7, lr}
 80034d2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80034d4:	4b0e      	ldr	r3, [pc, #56]	@ (8003510 <HAL_Init+0x40>)
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	4a0d      	ldr	r2, [pc, #52]	@ (8003510 <HAL_Init+0x40>)
 80034da:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80034de:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80034e0:	4b0b      	ldr	r3, [pc, #44]	@ (8003510 <HAL_Init+0x40>)
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	4a0a      	ldr	r2, [pc, #40]	@ (8003510 <HAL_Init+0x40>)
 80034e6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80034ea:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80034ec:	4b08      	ldr	r3, [pc, #32]	@ (8003510 <HAL_Init+0x40>)
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	4a07      	ldr	r2, [pc, #28]	@ (8003510 <HAL_Init+0x40>)
 80034f2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80034f6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80034f8:	2003      	movs	r0, #3
 80034fa:	f000 f94f 	bl	800379c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80034fe:	200f      	movs	r0, #15
 8003500:	f000 f808 	bl	8003514 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003504:	f7ff fe96 	bl	8003234 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003508:	2300      	movs	r3, #0
}
 800350a:	4618      	mov	r0, r3
 800350c:	bd80      	pop	{r7, pc}
 800350e:	bf00      	nop
 8003510:	40023c00 	.word	0x40023c00

08003514 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003514:	b580      	push	{r7, lr}
 8003516:	b082      	sub	sp, #8
 8003518:	af00      	add	r7, sp, #0
 800351a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800351c:	4b12      	ldr	r3, [pc, #72]	@ (8003568 <HAL_InitTick+0x54>)
 800351e:	681a      	ldr	r2, [r3, #0]
 8003520:	4b12      	ldr	r3, [pc, #72]	@ (800356c <HAL_InitTick+0x58>)
 8003522:	781b      	ldrb	r3, [r3, #0]
 8003524:	4619      	mov	r1, r3
 8003526:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800352a:	fbb3 f3f1 	udiv	r3, r3, r1
 800352e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003532:	4618      	mov	r0, r3
 8003534:	f000 f967 	bl	8003806 <HAL_SYSTICK_Config>
 8003538:	4603      	mov	r3, r0
 800353a:	2b00      	cmp	r3, #0
 800353c:	d001      	beq.n	8003542 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800353e:	2301      	movs	r3, #1
 8003540:	e00e      	b.n	8003560 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	2b0f      	cmp	r3, #15
 8003546:	d80a      	bhi.n	800355e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003548:	2200      	movs	r2, #0
 800354a:	6879      	ldr	r1, [r7, #4]
 800354c:	f04f 30ff 	mov.w	r0, #4294967295
 8003550:	f000 f92f 	bl	80037b2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003554:	4a06      	ldr	r2, [pc, #24]	@ (8003570 <HAL_InitTick+0x5c>)
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800355a:	2300      	movs	r3, #0
 800355c:	e000      	b.n	8003560 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800355e:	2301      	movs	r3, #1
}
 8003560:	4618      	mov	r0, r3
 8003562:	3708      	adds	r7, #8
 8003564:	46bd      	mov	sp, r7
 8003566:	bd80      	pop	{r7, pc}
 8003568:	20000008 	.word	0x20000008
 800356c:	20000010 	.word	0x20000010
 8003570:	2000000c 	.word	0x2000000c

08003574 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003574:	b480      	push	{r7}
 8003576:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003578:	4b06      	ldr	r3, [pc, #24]	@ (8003594 <HAL_IncTick+0x20>)
 800357a:	781b      	ldrb	r3, [r3, #0]
 800357c:	461a      	mov	r2, r3
 800357e:	4b06      	ldr	r3, [pc, #24]	@ (8003598 <HAL_IncTick+0x24>)
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	4413      	add	r3, r2
 8003584:	4a04      	ldr	r2, [pc, #16]	@ (8003598 <HAL_IncTick+0x24>)
 8003586:	6013      	str	r3, [r2, #0]
}
 8003588:	bf00      	nop
 800358a:	46bd      	mov	sp, r7
 800358c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003590:	4770      	bx	lr
 8003592:	bf00      	nop
 8003594:	20000010 	.word	0x20000010
 8003598:	2000020c 	.word	0x2000020c

0800359c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800359c:	b480      	push	{r7}
 800359e:	af00      	add	r7, sp, #0
  return uwTick;
 80035a0:	4b03      	ldr	r3, [pc, #12]	@ (80035b0 <HAL_GetTick+0x14>)
 80035a2:	681b      	ldr	r3, [r3, #0]
}
 80035a4:	4618      	mov	r0, r3
 80035a6:	46bd      	mov	sp, r7
 80035a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ac:	4770      	bx	lr
 80035ae:	bf00      	nop
 80035b0:	2000020c 	.word	0x2000020c

080035b4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80035b4:	b580      	push	{r7, lr}
 80035b6:	b084      	sub	sp, #16
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80035bc:	f7ff ffee 	bl	800359c <HAL_GetTick>
 80035c0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035cc:	d005      	beq.n	80035da <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80035ce:	4b0a      	ldr	r3, [pc, #40]	@ (80035f8 <HAL_Delay+0x44>)
 80035d0:	781b      	ldrb	r3, [r3, #0]
 80035d2:	461a      	mov	r2, r3
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	4413      	add	r3, r2
 80035d8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80035da:	bf00      	nop
 80035dc:	f7ff ffde 	bl	800359c <HAL_GetTick>
 80035e0:	4602      	mov	r2, r0
 80035e2:	68bb      	ldr	r3, [r7, #8]
 80035e4:	1ad3      	subs	r3, r2, r3
 80035e6:	68fa      	ldr	r2, [r7, #12]
 80035e8:	429a      	cmp	r2, r3
 80035ea:	d8f7      	bhi.n	80035dc <HAL_Delay+0x28>
  {
  }
}
 80035ec:	bf00      	nop
 80035ee:	bf00      	nop
 80035f0:	3710      	adds	r7, #16
 80035f2:	46bd      	mov	sp, r7
 80035f4:	bd80      	pop	{r7, pc}
 80035f6:	bf00      	nop
 80035f8:	20000010 	.word	0x20000010

080035fc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80035fc:	b480      	push	{r7}
 80035fe:	b085      	sub	sp, #20
 8003600:	af00      	add	r7, sp, #0
 8003602:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	f003 0307 	and.w	r3, r3, #7
 800360a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800360c:	4b0c      	ldr	r3, [pc, #48]	@ (8003640 <__NVIC_SetPriorityGrouping+0x44>)
 800360e:	68db      	ldr	r3, [r3, #12]
 8003610:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003612:	68ba      	ldr	r2, [r7, #8]
 8003614:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003618:	4013      	ands	r3, r2
 800361a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003620:	68bb      	ldr	r3, [r7, #8]
 8003622:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003624:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003628:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800362c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800362e:	4a04      	ldr	r2, [pc, #16]	@ (8003640 <__NVIC_SetPriorityGrouping+0x44>)
 8003630:	68bb      	ldr	r3, [r7, #8]
 8003632:	60d3      	str	r3, [r2, #12]
}
 8003634:	bf00      	nop
 8003636:	3714      	adds	r7, #20
 8003638:	46bd      	mov	sp, r7
 800363a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800363e:	4770      	bx	lr
 8003640:	e000ed00 	.word	0xe000ed00

08003644 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003644:	b480      	push	{r7}
 8003646:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003648:	4b04      	ldr	r3, [pc, #16]	@ (800365c <__NVIC_GetPriorityGrouping+0x18>)
 800364a:	68db      	ldr	r3, [r3, #12]
 800364c:	0a1b      	lsrs	r3, r3, #8
 800364e:	f003 0307 	and.w	r3, r3, #7
}
 8003652:	4618      	mov	r0, r3
 8003654:	46bd      	mov	sp, r7
 8003656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800365a:	4770      	bx	lr
 800365c:	e000ed00 	.word	0xe000ed00

08003660 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003660:	b480      	push	{r7}
 8003662:	b083      	sub	sp, #12
 8003664:	af00      	add	r7, sp, #0
 8003666:	4603      	mov	r3, r0
 8003668:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800366a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800366e:	2b00      	cmp	r3, #0
 8003670:	db0b      	blt.n	800368a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003672:	79fb      	ldrb	r3, [r7, #7]
 8003674:	f003 021f 	and.w	r2, r3, #31
 8003678:	4907      	ldr	r1, [pc, #28]	@ (8003698 <__NVIC_EnableIRQ+0x38>)
 800367a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800367e:	095b      	lsrs	r3, r3, #5
 8003680:	2001      	movs	r0, #1
 8003682:	fa00 f202 	lsl.w	r2, r0, r2
 8003686:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800368a:	bf00      	nop
 800368c:	370c      	adds	r7, #12
 800368e:	46bd      	mov	sp, r7
 8003690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003694:	4770      	bx	lr
 8003696:	bf00      	nop
 8003698:	e000e100 	.word	0xe000e100

0800369c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800369c:	b480      	push	{r7}
 800369e:	b083      	sub	sp, #12
 80036a0:	af00      	add	r7, sp, #0
 80036a2:	4603      	mov	r3, r0
 80036a4:	6039      	str	r1, [r7, #0]
 80036a6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80036a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	db0a      	blt.n	80036c6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80036b0:	683b      	ldr	r3, [r7, #0]
 80036b2:	b2da      	uxtb	r2, r3
 80036b4:	490c      	ldr	r1, [pc, #48]	@ (80036e8 <__NVIC_SetPriority+0x4c>)
 80036b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036ba:	0112      	lsls	r2, r2, #4
 80036bc:	b2d2      	uxtb	r2, r2
 80036be:	440b      	add	r3, r1
 80036c0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80036c4:	e00a      	b.n	80036dc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80036c6:	683b      	ldr	r3, [r7, #0]
 80036c8:	b2da      	uxtb	r2, r3
 80036ca:	4908      	ldr	r1, [pc, #32]	@ (80036ec <__NVIC_SetPriority+0x50>)
 80036cc:	79fb      	ldrb	r3, [r7, #7]
 80036ce:	f003 030f 	and.w	r3, r3, #15
 80036d2:	3b04      	subs	r3, #4
 80036d4:	0112      	lsls	r2, r2, #4
 80036d6:	b2d2      	uxtb	r2, r2
 80036d8:	440b      	add	r3, r1
 80036da:	761a      	strb	r2, [r3, #24]
}
 80036dc:	bf00      	nop
 80036de:	370c      	adds	r7, #12
 80036e0:	46bd      	mov	sp, r7
 80036e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e6:	4770      	bx	lr
 80036e8:	e000e100 	.word	0xe000e100
 80036ec:	e000ed00 	.word	0xe000ed00

080036f0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80036f0:	b480      	push	{r7}
 80036f2:	b089      	sub	sp, #36	@ 0x24
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	60f8      	str	r0, [r7, #12]
 80036f8:	60b9      	str	r1, [r7, #8]
 80036fa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	f003 0307 	and.w	r3, r3, #7
 8003702:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003704:	69fb      	ldr	r3, [r7, #28]
 8003706:	f1c3 0307 	rsb	r3, r3, #7
 800370a:	2b04      	cmp	r3, #4
 800370c:	bf28      	it	cs
 800370e:	2304      	movcs	r3, #4
 8003710:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003712:	69fb      	ldr	r3, [r7, #28]
 8003714:	3304      	adds	r3, #4
 8003716:	2b06      	cmp	r3, #6
 8003718:	d902      	bls.n	8003720 <NVIC_EncodePriority+0x30>
 800371a:	69fb      	ldr	r3, [r7, #28]
 800371c:	3b03      	subs	r3, #3
 800371e:	e000      	b.n	8003722 <NVIC_EncodePriority+0x32>
 8003720:	2300      	movs	r3, #0
 8003722:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003724:	f04f 32ff 	mov.w	r2, #4294967295
 8003728:	69bb      	ldr	r3, [r7, #24]
 800372a:	fa02 f303 	lsl.w	r3, r2, r3
 800372e:	43da      	mvns	r2, r3
 8003730:	68bb      	ldr	r3, [r7, #8]
 8003732:	401a      	ands	r2, r3
 8003734:	697b      	ldr	r3, [r7, #20]
 8003736:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003738:	f04f 31ff 	mov.w	r1, #4294967295
 800373c:	697b      	ldr	r3, [r7, #20]
 800373e:	fa01 f303 	lsl.w	r3, r1, r3
 8003742:	43d9      	mvns	r1, r3
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003748:	4313      	orrs	r3, r2
         );
}
 800374a:	4618      	mov	r0, r3
 800374c:	3724      	adds	r7, #36	@ 0x24
 800374e:	46bd      	mov	sp, r7
 8003750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003754:	4770      	bx	lr
	...

08003758 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003758:	b580      	push	{r7, lr}
 800375a:	b082      	sub	sp, #8
 800375c:	af00      	add	r7, sp, #0
 800375e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	3b01      	subs	r3, #1
 8003764:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003768:	d301      	bcc.n	800376e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800376a:	2301      	movs	r3, #1
 800376c:	e00f      	b.n	800378e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800376e:	4a0a      	ldr	r2, [pc, #40]	@ (8003798 <SysTick_Config+0x40>)
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	3b01      	subs	r3, #1
 8003774:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003776:	210f      	movs	r1, #15
 8003778:	f04f 30ff 	mov.w	r0, #4294967295
 800377c:	f7ff ff8e 	bl	800369c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003780:	4b05      	ldr	r3, [pc, #20]	@ (8003798 <SysTick_Config+0x40>)
 8003782:	2200      	movs	r2, #0
 8003784:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003786:	4b04      	ldr	r3, [pc, #16]	@ (8003798 <SysTick_Config+0x40>)
 8003788:	2207      	movs	r2, #7
 800378a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800378c:	2300      	movs	r3, #0
}
 800378e:	4618      	mov	r0, r3
 8003790:	3708      	adds	r7, #8
 8003792:	46bd      	mov	sp, r7
 8003794:	bd80      	pop	{r7, pc}
 8003796:	bf00      	nop
 8003798:	e000e010 	.word	0xe000e010

0800379c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800379c:	b580      	push	{r7, lr}
 800379e:	b082      	sub	sp, #8
 80037a0:	af00      	add	r7, sp, #0
 80037a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80037a4:	6878      	ldr	r0, [r7, #4]
 80037a6:	f7ff ff29 	bl	80035fc <__NVIC_SetPriorityGrouping>
}
 80037aa:	bf00      	nop
 80037ac:	3708      	adds	r7, #8
 80037ae:	46bd      	mov	sp, r7
 80037b0:	bd80      	pop	{r7, pc}

080037b2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80037b2:	b580      	push	{r7, lr}
 80037b4:	b086      	sub	sp, #24
 80037b6:	af00      	add	r7, sp, #0
 80037b8:	4603      	mov	r3, r0
 80037ba:	60b9      	str	r1, [r7, #8]
 80037bc:	607a      	str	r2, [r7, #4]
 80037be:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80037c0:	2300      	movs	r3, #0
 80037c2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80037c4:	f7ff ff3e 	bl	8003644 <__NVIC_GetPriorityGrouping>
 80037c8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80037ca:	687a      	ldr	r2, [r7, #4]
 80037cc:	68b9      	ldr	r1, [r7, #8]
 80037ce:	6978      	ldr	r0, [r7, #20]
 80037d0:	f7ff ff8e 	bl	80036f0 <NVIC_EncodePriority>
 80037d4:	4602      	mov	r2, r0
 80037d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80037da:	4611      	mov	r1, r2
 80037dc:	4618      	mov	r0, r3
 80037de:	f7ff ff5d 	bl	800369c <__NVIC_SetPriority>
}
 80037e2:	bf00      	nop
 80037e4:	3718      	adds	r7, #24
 80037e6:	46bd      	mov	sp, r7
 80037e8:	bd80      	pop	{r7, pc}

080037ea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80037ea:	b580      	push	{r7, lr}
 80037ec:	b082      	sub	sp, #8
 80037ee:	af00      	add	r7, sp, #0
 80037f0:	4603      	mov	r3, r0
 80037f2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80037f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037f8:	4618      	mov	r0, r3
 80037fa:	f7ff ff31 	bl	8003660 <__NVIC_EnableIRQ>
}
 80037fe:	bf00      	nop
 8003800:	3708      	adds	r7, #8
 8003802:	46bd      	mov	sp, r7
 8003804:	bd80      	pop	{r7, pc}

08003806 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003806:	b580      	push	{r7, lr}
 8003808:	b082      	sub	sp, #8
 800380a:	af00      	add	r7, sp, #0
 800380c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800380e:	6878      	ldr	r0, [r7, #4]
 8003810:	f7ff ffa2 	bl	8003758 <SysTick_Config>
 8003814:	4603      	mov	r3, r0
}
 8003816:	4618      	mov	r0, r3
 8003818:	3708      	adds	r7, #8
 800381a:	46bd      	mov	sp, r7
 800381c:	bd80      	pop	{r7, pc}
	...

08003820 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003820:	b480      	push	{r7}
 8003822:	b089      	sub	sp, #36	@ 0x24
 8003824:	af00      	add	r7, sp, #0
 8003826:	6078      	str	r0, [r7, #4]
 8003828:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800382a:	2300      	movs	r3, #0
 800382c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800382e:	2300      	movs	r3, #0
 8003830:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003832:	2300      	movs	r3, #0
 8003834:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003836:	2300      	movs	r3, #0
 8003838:	61fb      	str	r3, [r7, #28]
 800383a:	e16b      	b.n	8003b14 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800383c:	2201      	movs	r2, #1
 800383e:	69fb      	ldr	r3, [r7, #28]
 8003840:	fa02 f303 	lsl.w	r3, r2, r3
 8003844:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003846:	683b      	ldr	r3, [r7, #0]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	697a      	ldr	r2, [r7, #20]
 800384c:	4013      	ands	r3, r2
 800384e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003850:	693a      	ldr	r2, [r7, #16]
 8003852:	697b      	ldr	r3, [r7, #20]
 8003854:	429a      	cmp	r2, r3
 8003856:	f040 815a 	bne.w	8003b0e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800385a:	683b      	ldr	r3, [r7, #0]
 800385c:	685b      	ldr	r3, [r3, #4]
 800385e:	f003 0303 	and.w	r3, r3, #3
 8003862:	2b01      	cmp	r3, #1
 8003864:	d005      	beq.n	8003872 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003866:	683b      	ldr	r3, [r7, #0]
 8003868:	685b      	ldr	r3, [r3, #4]
 800386a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800386e:	2b02      	cmp	r3, #2
 8003870:	d130      	bne.n	80038d4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	689b      	ldr	r3, [r3, #8]
 8003876:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003878:	69fb      	ldr	r3, [r7, #28]
 800387a:	005b      	lsls	r3, r3, #1
 800387c:	2203      	movs	r2, #3
 800387e:	fa02 f303 	lsl.w	r3, r2, r3
 8003882:	43db      	mvns	r3, r3
 8003884:	69ba      	ldr	r2, [r7, #24]
 8003886:	4013      	ands	r3, r2
 8003888:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800388a:	683b      	ldr	r3, [r7, #0]
 800388c:	68da      	ldr	r2, [r3, #12]
 800388e:	69fb      	ldr	r3, [r7, #28]
 8003890:	005b      	lsls	r3, r3, #1
 8003892:	fa02 f303 	lsl.w	r3, r2, r3
 8003896:	69ba      	ldr	r2, [r7, #24]
 8003898:	4313      	orrs	r3, r2
 800389a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	69ba      	ldr	r2, [r7, #24]
 80038a0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	685b      	ldr	r3, [r3, #4]
 80038a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80038a8:	2201      	movs	r2, #1
 80038aa:	69fb      	ldr	r3, [r7, #28]
 80038ac:	fa02 f303 	lsl.w	r3, r2, r3
 80038b0:	43db      	mvns	r3, r3
 80038b2:	69ba      	ldr	r2, [r7, #24]
 80038b4:	4013      	ands	r3, r2
 80038b6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80038b8:	683b      	ldr	r3, [r7, #0]
 80038ba:	685b      	ldr	r3, [r3, #4]
 80038bc:	091b      	lsrs	r3, r3, #4
 80038be:	f003 0201 	and.w	r2, r3, #1
 80038c2:	69fb      	ldr	r3, [r7, #28]
 80038c4:	fa02 f303 	lsl.w	r3, r2, r3
 80038c8:	69ba      	ldr	r2, [r7, #24]
 80038ca:	4313      	orrs	r3, r2
 80038cc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	69ba      	ldr	r2, [r7, #24]
 80038d2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80038d4:	683b      	ldr	r3, [r7, #0]
 80038d6:	685b      	ldr	r3, [r3, #4]
 80038d8:	f003 0303 	and.w	r3, r3, #3
 80038dc:	2b03      	cmp	r3, #3
 80038de:	d017      	beq.n	8003910 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	68db      	ldr	r3, [r3, #12]
 80038e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80038e6:	69fb      	ldr	r3, [r7, #28]
 80038e8:	005b      	lsls	r3, r3, #1
 80038ea:	2203      	movs	r2, #3
 80038ec:	fa02 f303 	lsl.w	r3, r2, r3
 80038f0:	43db      	mvns	r3, r3
 80038f2:	69ba      	ldr	r2, [r7, #24]
 80038f4:	4013      	ands	r3, r2
 80038f6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80038f8:	683b      	ldr	r3, [r7, #0]
 80038fa:	689a      	ldr	r2, [r3, #8]
 80038fc:	69fb      	ldr	r3, [r7, #28]
 80038fe:	005b      	lsls	r3, r3, #1
 8003900:	fa02 f303 	lsl.w	r3, r2, r3
 8003904:	69ba      	ldr	r2, [r7, #24]
 8003906:	4313      	orrs	r3, r2
 8003908:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	69ba      	ldr	r2, [r7, #24]
 800390e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003910:	683b      	ldr	r3, [r7, #0]
 8003912:	685b      	ldr	r3, [r3, #4]
 8003914:	f003 0303 	and.w	r3, r3, #3
 8003918:	2b02      	cmp	r3, #2
 800391a:	d123      	bne.n	8003964 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800391c:	69fb      	ldr	r3, [r7, #28]
 800391e:	08da      	lsrs	r2, r3, #3
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	3208      	adds	r2, #8
 8003924:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003928:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800392a:	69fb      	ldr	r3, [r7, #28]
 800392c:	f003 0307 	and.w	r3, r3, #7
 8003930:	009b      	lsls	r3, r3, #2
 8003932:	220f      	movs	r2, #15
 8003934:	fa02 f303 	lsl.w	r3, r2, r3
 8003938:	43db      	mvns	r3, r3
 800393a:	69ba      	ldr	r2, [r7, #24]
 800393c:	4013      	ands	r3, r2
 800393e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003940:	683b      	ldr	r3, [r7, #0]
 8003942:	691a      	ldr	r2, [r3, #16]
 8003944:	69fb      	ldr	r3, [r7, #28]
 8003946:	f003 0307 	and.w	r3, r3, #7
 800394a:	009b      	lsls	r3, r3, #2
 800394c:	fa02 f303 	lsl.w	r3, r2, r3
 8003950:	69ba      	ldr	r2, [r7, #24]
 8003952:	4313      	orrs	r3, r2
 8003954:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003956:	69fb      	ldr	r3, [r7, #28]
 8003958:	08da      	lsrs	r2, r3, #3
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	3208      	adds	r2, #8
 800395e:	69b9      	ldr	r1, [r7, #24]
 8003960:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800396a:	69fb      	ldr	r3, [r7, #28]
 800396c:	005b      	lsls	r3, r3, #1
 800396e:	2203      	movs	r2, #3
 8003970:	fa02 f303 	lsl.w	r3, r2, r3
 8003974:	43db      	mvns	r3, r3
 8003976:	69ba      	ldr	r2, [r7, #24]
 8003978:	4013      	ands	r3, r2
 800397a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800397c:	683b      	ldr	r3, [r7, #0]
 800397e:	685b      	ldr	r3, [r3, #4]
 8003980:	f003 0203 	and.w	r2, r3, #3
 8003984:	69fb      	ldr	r3, [r7, #28]
 8003986:	005b      	lsls	r3, r3, #1
 8003988:	fa02 f303 	lsl.w	r3, r2, r3
 800398c:	69ba      	ldr	r2, [r7, #24]
 800398e:	4313      	orrs	r3, r2
 8003990:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	69ba      	ldr	r2, [r7, #24]
 8003996:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003998:	683b      	ldr	r3, [r7, #0]
 800399a:	685b      	ldr	r3, [r3, #4]
 800399c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	f000 80b4 	beq.w	8003b0e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80039a6:	2300      	movs	r3, #0
 80039a8:	60fb      	str	r3, [r7, #12]
 80039aa:	4b60      	ldr	r3, [pc, #384]	@ (8003b2c <HAL_GPIO_Init+0x30c>)
 80039ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80039ae:	4a5f      	ldr	r2, [pc, #380]	@ (8003b2c <HAL_GPIO_Init+0x30c>)
 80039b0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80039b4:	6453      	str	r3, [r2, #68]	@ 0x44
 80039b6:	4b5d      	ldr	r3, [pc, #372]	@ (8003b2c <HAL_GPIO_Init+0x30c>)
 80039b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80039ba:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80039be:	60fb      	str	r3, [r7, #12]
 80039c0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80039c2:	4a5b      	ldr	r2, [pc, #364]	@ (8003b30 <HAL_GPIO_Init+0x310>)
 80039c4:	69fb      	ldr	r3, [r7, #28]
 80039c6:	089b      	lsrs	r3, r3, #2
 80039c8:	3302      	adds	r3, #2
 80039ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80039ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80039d0:	69fb      	ldr	r3, [r7, #28]
 80039d2:	f003 0303 	and.w	r3, r3, #3
 80039d6:	009b      	lsls	r3, r3, #2
 80039d8:	220f      	movs	r2, #15
 80039da:	fa02 f303 	lsl.w	r3, r2, r3
 80039de:	43db      	mvns	r3, r3
 80039e0:	69ba      	ldr	r2, [r7, #24]
 80039e2:	4013      	ands	r3, r2
 80039e4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	4a52      	ldr	r2, [pc, #328]	@ (8003b34 <HAL_GPIO_Init+0x314>)
 80039ea:	4293      	cmp	r3, r2
 80039ec:	d02b      	beq.n	8003a46 <HAL_GPIO_Init+0x226>
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	4a51      	ldr	r2, [pc, #324]	@ (8003b38 <HAL_GPIO_Init+0x318>)
 80039f2:	4293      	cmp	r3, r2
 80039f4:	d025      	beq.n	8003a42 <HAL_GPIO_Init+0x222>
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	4a50      	ldr	r2, [pc, #320]	@ (8003b3c <HAL_GPIO_Init+0x31c>)
 80039fa:	4293      	cmp	r3, r2
 80039fc:	d01f      	beq.n	8003a3e <HAL_GPIO_Init+0x21e>
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	4a4f      	ldr	r2, [pc, #316]	@ (8003b40 <HAL_GPIO_Init+0x320>)
 8003a02:	4293      	cmp	r3, r2
 8003a04:	d019      	beq.n	8003a3a <HAL_GPIO_Init+0x21a>
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	4a4e      	ldr	r2, [pc, #312]	@ (8003b44 <HAL_GPIO_Init+0x324>)
 8003a0a:	4293      	cmp	r3, r2
 8003a0c:	d013      	beq.n	8003a36 <HAL_GPIO_Init+0x216>
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	4a4d      	ldr	r2, [pc, #308]	@ (8003b48 <HAL_GPIO_Init+0x328>)
 8003a12:	4293      	cmp	r3, r2
 8003a14:	d00d      	beq.n	8003a32 <HAL_GPIO_Init+0x212>
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	4a4c      	ldr	r2, [pc, #304]	@ (8003b4c <HAL_GPIO_Init+0x32c>)
 8003a1a:	4293      	cmp	r3, r2
 8003a1c:	d007      	beq.n	8003a2e <HAL_GPIO_Init+0x20e>
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	4a4b      	ldr	r2, [pc, #300]	@ (8003b50 <HAL_GPIO_Init+0x330>)
 8003a22:	4293      	cmp	r3, r2
 8003a24:	d101      	bne.n	8003a2a <HAL_GPIO_Init+0x20a>
 8003a26:	2307      	movs	r3, #7
 8003a28:	e00e      	b.n	8003a48 <HAL_GPIO_Init+0x228>
 8003a2a:	2308      	movs	r3, #8
 8003a2c:	e00c      	b.n	8003a48 <HAL_GPIO_Init+0x228>
 8003a2e:	2306      	movs	r3, #6
 8003a30:	e00a      	b.n	8003a48 <HAL_GPIO_Init+0x228>
 8003a32:	2305      	movs	r3, #5
 8003a34:	e008      	b.n	8003a48 <HAL_GPIO_Init+0x228>
 8003a36:	2304      	movs	r3, #4
 8003a38:	e006      	b.n	8003a48 <HAL_GPIO_Init+0x228>
 8003a3a:	2303      	movs	r3, #3
 8003a3c:	e004      	b.n	8003a48 <HAL_GPIO_Init+0x228>
 8003a3e:	2302      	movs	r3, #2
 8003a40:	e002      	b.n	8003a48 <HAL_GPIO_Init+0x228>
 8003a42:	2301      	movs	r3, #1
 8003a44:	e000      	b.n	8003a48 <HAL_GPIO_Init+0x228>
 8003a46:	2300      	movs	r3, #0
 8003a48:	69fa      	ldr	r2, [r7, #28]
 8003a4a:	f002 0203 	and.w	r2, r2, #3
 8003a4e:	0092      	lsls	r2, r2, #2
 8003a50:	4093      	lsls	r3, r2
 8003a52:	69ba      	ldr	r2, [r7, #24]
 8003a54:	4313      	orrs	r3, r2
 8003a56:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003a58:	4935      	ldr	r1, [pc, #212]	@ (8003b30 <HAL_GPIO_Init+0x310>)
 8003a5a:	69fb      	ldr	r3, [r7, #28]
 8003a5c:	089b      	lsrs	r3, r3, #2
 8003a5e:	3302      	adds	r3, #2
 8003a60:	69ba      	ldr	r2, [r7, #24]
 8003a62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003a66:	4b3b      	ldr	r3, [pc, #236]	@ (8003b54 <HAL_GPIO_Init+0x334>)
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a6c:	693b      	ldr	r3, [r7, #16]
 8003a6e:	43db      	mvns	r3, r3
 8003a70:	69ba      	ldr	r2, [r7, #24]
 8003a72:	4013      	ands	r3, r2
 8003a74:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003a76:	683b      	ldr	r3, [r7, #0]
 8003a78:	685b      	ldr	r3, [r3, #4]
 8003a7a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d003      	beq.n	8003a8a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003a82:	69ba      	ldr	r2, [r7, #24]
 8003a84:	693b      	ldr	r3, [r7, #16]
 8003a86:	4313      	orrs	r3, r2
 8003a88:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003a8a:	4a32      	ldr	r2, [pc, #200]	@ (8003b54 <HAL_GPIO_Init+0x334>)
 8003a8c:	69bb      	ldr	r3, [r7, #24]
 8003a8e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003a90:	4b30      	ldr	r3, [pc, #192]	@ (8003b54 <HAL_GPIO_Init+0x334>)
 8003a92:	685b      	ldr	r3, [r3, #4]
 8003a94:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a96:	693b      	ldr	r3, [r7, #16]
 8003a98:	43db      	mvns	r3, r3
 8003a9a:	69ba      	ldr	r2, [r7, #24]
 8003a9c:	4013      	ands	r3, r2
 8003a9e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003aa0:	683b      	ldr	r3, [r7, #0]
 8003aa2:	685b      	ldr	r3, [r3, #4]
 8003aa4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d003      	beq.n	8003ab4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003aac:	69ba      	ldr	r2, [r7, #24]
 8003aae:	693b      	ldr	r3, [r7, #16]
 8003ab0:	4313      	orrs	r3, r2
 8003ab2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003ab4:	4a27      	ldr	r2, [pc, #156]	@ (8003b54 <HAL_GPIO_Init+0x334>)
 8003ab6:	69bb      	ldr	r3, [r7, #24]
 8003ab8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003aba:	4b26      	ldr	r3, [pc, #152]	@ (8003b54 <HAL_GPIO_Init+0x334>)
 8003abc:	689b      	ldr	r3, [r3, #8]
 8003abe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003ac0:	693b      	ldr	r3, [r7, #16]
 8003ac2:	43db      	mvns	r3, r3
 8003ac4:	69ba      	ldr	r2, [r7, #24]
 8003ac6:	4013      	ands	r3, r2
 8003ac8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003aca:	683b      	ldr	r3, [r7, #0]
 8003acc:	685b      	ldr	r3, [r3, #4]
 8003ace:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d003      	beq.n	8003ade <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8003ad6:	69ba      	ldr	r2, [r7, #24]
 8003ad8:	693b      	ldr	r3, [r7, #16]
 8003ada:	4313      	orrs	r3, r2
 8003adc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003ade:	4a1d      	ldr	r2, [pc, #116]	@ (8003b54 <HAL_GPIO_Init+0x334>)
 8003ae0:	69bb      	ldr	r3, [r7, #24]
 8003ae2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003ae4:	4b1b      	ldr	r3, [pc, #108]	@ (8003b54 <HAL_GPIO_Init+0x334>)
 8003ae6:	68db      	ldr	r3, [r3, #12]
 8003ae8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003aea:	693b      	ldr	r3, [r7, #16]
 8003aec:	43db      	mvns	r3, r3
 8003aee:	69ba      	ldr	r2, [r7, #24]
 8003af0:	4013      	ands	r3, r2
 8003af2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003af4:	683b      	ldr	r3, [r7, #0]
 8003af6:	685b      	ldr	r3, [r3, #4]
 8003af8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d003      	beq.n	8003b08 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003b00:	69ba      	ldr	r2, [r7, #24]
 8003b02:	693b      	ldr	r3, [r7, #16]
 8003b04:	4313      	orrs	r3, r2
 8003b06:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003b08:	4a12      	ldr	r2, [pc, #72]	@ (8003b54 <HAL_GPIO_Init+0x334>)
 8003b0a:	69bb      	ldr	r3, [r7, #24]
 8003b0c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003b0e:	69fb      	ldr	r3, [r7, #28]
 8003b10:	3301      	adds	r3, #1
 8003b12:	61fb      	str	r3, [r7, #28]
 8003b14:	69fb      	ldr	r3, [r7, #28]
 8003b16:	2b0f      	cmp	r3, #15
 8003b18:	f67f ae90 	bls.w	800383c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003b1c:	bf00      	nop
 8003b1e:	bf00      	nop
 8003b20:	3724      	adds	r7, #36	@ 0x24
 8003b22:	46bd      	mov	sp, r7
 8003b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b28:	4770      	bx	lr
 8003b2a:	bf00      	nop
 8003b2c:	40023800 	.word	0x40023800
 8003b30:	40013800 	.word	0x40013800
 8003b34:	40020000 	.word	0x40020000
 8003b38:	40020400 	.word	0x40020400
 8003b3c:	40020800 	.word	0x40020800
 8003b40:	40020c00 	.word	0x40020c00
 8003b44:	40021000 	.word	0x40021000
 8003b48:	40021400 	.word	0x40021400
 8003b4c:	40021800 	.word	0x40021800
 8003b50:	40021c00 	.word	0x40021c00
 8003b54:	40013c00 	.word	0x40013c00

08003b58 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003b58:	b480      	push	{r7}
 8003b5a:	b083      	sub	sp, #12
 8003b5c:	af00      	add	r7, sp, #0
 8003b5e:	6078      	str	r0, [r7, #4]
 8003b60:	460b      	mov	r3, r1
 8003b62:	807b      	strh	r3, [r7, #2]
 8003b64:	4613      	mov	r3, r2
 8003b66:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003b68:	787b      	ldrb	r3, [r7, #1]
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d003      	beq.n	8003b76 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003b6e:	887a      	ldrh	r2, [r7, #2]
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003b74:	e003      	b.n	8003b7e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003b76:	887b      	ldrh	r3, [r7, #2]
 8003b78:	041a      	lsls	r2, r3, #16
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	619a      	str	r2, [r3, #24]
}
 8003b7e:	bf00      	nop
 8003b80:	370c      	adds	r7, #12
 8003b82:	46bd      	mov	sp, r7
 8003b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b88:	4770      	bx	lr
	...

08003b8c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003b8c:	b580      	push	{r7, lr}
 8003b8e:	b084      	sub	sp, #16
 8003b90:	af00      	add	r7, sp, #0
 8003b92:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d101      	bne.n	8003b9e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003b9a:	2301      	movs	r3, #1
 8003b9c:	e12b      	b.n	8003df6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003ba4:	b2db      	uxtb	r3, r3
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d106      	bne.n	8003bb8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	2200      	movs	r2, #0
 8003bae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003bb2:	6878      	ldr	r0, [r7, #4]
 8003bb4:	f7fe fc56 	bl	8002464 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	2224      	movs	r2, #36	@ 0x24
 8003bbc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	681a      	ldr	r2, [r3, #0]
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f022 0201 	bic.w	r2, r2, #1
 8003bce:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	681a      	ldr	r2, [r3, #0]
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003bde:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	681a      	ldr	r2, [r3, #0]
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003bee:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003bf0:	f001 fd2a 	bl	8005648 <HAL_RCC_GetPCLK1Freq>
 8003bf4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	685b      	ldr	r3, [r3, #4]
 8003bfa:	4a81      	ldr	r2, [pc, #516]	@ (8003e00 <HAL_I2C_Init+0x274>)
 8003bfc:	4293      	cmp	r3, r2
 8003bfe:	d807      	bhi.n	8003c10 <HAL_I2C_Init+0x84>
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	4a80      	ldr	r2, [pc, #512]	@ (8003e04 <HAL_I2C_Init+0x278>)
 8003c04:	4293      	cmp	r3, r2
 8003c06:	bf94      	ite	ls
 8003c08:	2301      	movls	r3, #1
 8003c0a:	2300      	movhi	r3, #0
 8003c0c:	b2db      	uxtb	r3, r3
 8003c0e:	e006      	b.n	8003c1e <HAL_I2C_Init+0x92>
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	4a7d      	ldr	r2, [pc, #500]	@ (8003e08 <HAL_I2C_Init+0x27c>)
 8003c14:	4293      	cmp	r3, r2
 8003c16:	bf94      	ite	ls
 8003c18:	2301      	movls	r3, #1
 8003c1a:	2300      	movhi	r3, #0
 8003c1c:	b2db      	uxtb	r3, r3
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d001      	beq.n	8003c26 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003c22:	2301      	movs	r3, #1
 8003c24:	e0e7      	b.n	8003df6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	4a78      	ldr	r2, [pc, #480]	@ (8003e0c <HAL_I2C_Init+0x280>)
 8003c2a:	fba2 2303 	umull	r2, r3, r2, r3
 8003c2e:	0c9b      	lsrs	r3, r3, #18
 8003c30:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	685b      	ldr	r3, [r3, #4]
 8003c38:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	68ba      	ldr	r2, [r7, #8]
 8003c42:	430a      	orrs	r2, r1
 8003c44:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	6a1b      	ldr	r3, [r3, #32]
 8003c4c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	685b      	ldr	r3, [r3, #4]
 8003c54:	4a6a      	ldr	r2, [pc, #424]	@ (8003e00 <HAL_I2C_Init+0x274>)
 8003c56:	4293      	cmp	r3, r2
 8003c58:	d802      	bhi.n	8003c60 <HAL_I2C_Init+0xd4>
 8003c5a:	68bb      	ldr	r3, [r7, #8]
 8003c5c:	3301      	adds	r3, #1
 8003c5e:	e009      	b.n	8003c74 <HAL_I2C_Init+0xe8>
 8003c60:	68bb      	ldr	r3, [r7, #8]
 8003c62:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8003c66:	fb02 f303 	mul.w	r3, r2, r3
 8003c6a:	4a69      	ldr	r2, [pc, #420]	@ (8003e10 <HAL_I2C_Init+0x284>)
 8003c6c:	fba2 2303 	umull	r2, r3, r2, r3
 8003c70:	099b      	lsrs	r3, r3, #6
 8003c72:	3301      	adds	r3, #1
 8003c74:	687a      	ldr	r2, [r7, #4]
 8003c76:	6812      	ldr	r2, [r2, #0]
 8003c78:	430b      	orrs	r3, r1
 8003c7a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	69db      	ldr	r3, [r3, #28]
 8003c82:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8003c86:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	685b      	ldr	r3, [r3, #4]
 8003c8e:	495c      	ldr	r1, [pc, #368]	@ (8003e00 <HAL_I2C_Init+0x274>)
 8003c90:	428b      	cmp	r3, r1
 8003c92:	d819      	bhi.n	8003cc8 <HAL_I2C_Init+0x13c>
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	1e59      	subs	r1, r3, #1
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	685b      	ldr	r3, [r3, #4]
 8003c9c:	005b      	lsls	r3, r3, #1
 8003c9e:	fbb1 f3f3 	udiv	r3, r1, r3
 8003ca2:	1c59      	adds	r1, r3, #1
 8003ca4:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003ca8:	400b      	ands	r3, r1
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d00a      	beq.n	8003cc4 <HAL_I2C_Init+0x138>
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	1e59      	subs	r1, r3, #1
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	685b      	ldr	r3, [r3, #4]
 8003cb6:	005b      	lsls	r3, r3, #1
 8003cb8:	fbb1 f3f3 	udiv	r3, r1, r3
 8003cbc:	3301      	adds	r3, #1
 8003cbe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003cc2:	e051      	b.n	8003d68 <HAL_I2C_Init+0x1dc>
 8003cc4:	2304      	movs	r3, #4
 8003cc6:	e04f      	b.n	8003d68 <HAL_I2C_Init+0x1dc>
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	689b      	ldr	r3, [r3, #8]
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d111      	bne.n	8003cf4 <HAL_I2C_Init+0x168>
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	1e58      	subs	r0, r3, #1
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	6859      	ldr	r1, [r3, #4]
 8003cd8:	460b      	mov	r3, r1
 8003cda:	005b      	lsls	r3, r3, #1
 8003cdc:	440b      	add	r3, r1
 8003cde:	fbb0 f3f3 	udiv	r3, r0, r3
 8003ce2:	3301      	adds	r3, #1
 8003ce4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	bf0c      	ite	eq
 8003cec:	2301      	moveq	r3, #1
 8003cee:	2300      	movne	r3, #0
 8003cf0:	b2db      	uxtb	r3, r3
 8003cf2:	e012      	b.n	8003d1a <HAL_I2C_Init+0x18e>
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	1e58      	subs	r0, r3, #1
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	6859      	ldr	r1, [r3, #4]
 8003cfc:	460b      	mov	r3, r1
 8003cfe:	009b      	lsls	r3, r3, #2
 8003d00:	440b      	add	r3, r1
 8003d02:	0099      	lsls	r1, r3, #2
 8003d04:	440b      	add	r3, r1
 8003d06:	fbb0 f3f3 	udiv	r3, r0, r3
 8003d0a:	3301      	adds	r3, #1
 8003d0c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	bf0c      	ite	eq
 8003d14:	2301      	moveq	r3, #1
 8003d16:	2300      	movne	r3, #0
 8003d18:	b2db      	uxtb	r3, r3
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d001      	beq.n	8003d22 <HAL_I2C_Init+0x196>
 8003d1e:	2301      	movs	r3, #1
 8003d20:	e022      	b.n	8003d68 <HAL_I2C_Init+0x1dc>
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	689b      	ldr	r3, [r3, #8]
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d10e      	bne.n	8003d48 <HAL_I2C_Init+0x1bc>
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	1e58      	subs	r0, r3, #1
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	6859      	ldr	r1, [r3, #4]
 8003d32:	460b      	mov	r3, r1
 8003d34:	005b      	lsls	r3, r3, #1
 8003d36:	440b      	add	r3, r1
 8003d38:	fbb0 f3f3 	udiv	r3, r0, r3
 8003d3c:	3301      	adds	r3, #1
 8003d3e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d42:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003d46:	e00f      	b.n	8003d68 <HAL_I2C_Init+0x1dc>
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	1e58      	subs	r0, r3, #1
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	6859      	ldr	r1, [r3, #4]
 8003d50:	460b      	mov	r3, r1
 8003d52:	009b      	lsls	r3, r3, #2
 8003d54:	440b      	add	r3, r1
 8003d56:	0099      	lsls	r1, r3, #2
 8003d58:	440b      	add	r3, r1
 8003d5a:	fbb0 f3f3 	udiv	r3, r0, r3
 8003d5e:	3301      	adds	r3, #1
 8003d60:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d64:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003d68:	6879      	ldr	r1, [r7, #4]
 8003d6a:	6809      	ldr	r1, [r1, #0]
 8003d6c:	4313      	orrs	r3, r2
 8003d6e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	69da      	ldr	r2, [r3, #28]
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	6a1b      	ldr	r3, [r3, #32]
 8003d82:	431a      	orrs	r2, r3
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	430a      	orrs	r2, r1
 8003d8a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	689b      	ldr	r3, [r3, #8]
 8003d92:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8003d96:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003d9a:	687a      	ldr	r2, [r7, #4]
 8003d9c:	6911      	ldr	r1, [r2, #16]
 8003d9e:	687a      	ldr	r2, [r7, #4]
 8003da0:	68d2      	ldr	r2, [r2, #12]
 8003da2:	4311      	orrs	r1, r2
 8003da4:	687a      	ldr	r2, [r7, #4]
 8003da6:	6812      	ldr	r2, [r2, #0]
 8003da8:	430b      	orrs	r3, r1
 8003daa:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	68db      	ldr	r3, [r3, #12]
 8003db2:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	695a      	ldr	r2, [r3, #20]
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	699b      	ldr	r3, [r3, #24]
 8003dbe:	431a      	orrs	r2, r3
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	430a      	orrs	r2, r1
 8003dc6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	681a      	ldr	r2, [r3, #0]
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	f042 0201 	orr.w	r2, r2, #1
 8003dd6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	2200      	movs	r2, #0
 8003ddc:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	2220      	movs	r2, #32
 8003de2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	2200      	movs	r2, #0
 8003dea:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	2200      	movs	r2, #0
 8003df0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003df4:	2300      	movs	r3, #0
}
 8003df6:	4618      	mov	r0, r3
 8003df8:	3710      	adds	r7, #16
 8003dfa:	46bd      	mov	sp, r7
 8003dfc:	bd80      	pop	{r7, pc}
 8003dfe:	bf00      	nop
 8003e00:	000186a0 	.word	0x000186a0
 8003e04:	001e847f 	.word	0x001e847f
 8003e08:	003d08ff 	.word	0x003d08ff
 8003e0c:	431bde83 	.word	0x431bde83
 8003e10:	10624dd3 	.word	0x10624dd3

08003e14 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003e14:	b580      	push	{r7, lr}
 8003e16:	b088      	sub	sp, #32
 8003e18:	af02      	add	r7, sp, #8
 8003e1a:	60f8      	str	r0, [r7, #12]
 8003e1c:	4608      	mov	r0, r1
 8003e1e:	4611      	mov	r1, r2
 8003e20:	461a      	mov	r2, r3
 8003e22:	4603      	mov	r3, r0
 8003e24:	817b      	strh	r3, [r7, #10]
 8003e26:	460b      	mov	r3, r1
 8003e28:	813b      	strh	r3, [r7, #8]
 8003e2a:	4613      	mov	r3, r2
 8003e2c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003e2e:	f7ff fbb5 	bl	800359c <HAL_GetTick>
 8003e32:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003e3a:	b2db      	uxtb	r3, r3
 8003e3c:	2b20      	cmp	r3, #32
 8003e3e:	f040 80d9 	bne.w	8003ff4 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003e42:	697b      	ldr	r3, [r7, #20]
 8003e44:	9300      	str	r3, [sp, #0]
 8003e46:	2319      	movs	r3, #25
 8003e48:	2201      	movs	r2, #1
 8003e4a:	496d      	ldr	r1, [pc, #436]	@ (8004000 <HAL_I2C_Mem_Write+0x1ec>)
 8003e4c:	68f8      	ldr	r0, [r7, #12]
 8003e4e:	f000 fdad 	bl	80049ac <I2C_WaitOnFlagUntilTimeout>
 8003e52:	4603      	mov	r3, r0
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d001      	beq.n	8003e5c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003e58:	2302      	movs	r3, #2
 8003e5a:	e0cc      	b.n	8003ff6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003e62:	2b01      	cmp	r3, #1
 8003e64:	d101      	bne.n	8003e6a <HAL_I2C_Mem_Write+0x56>
 8003e66:	2302      	movs	r3, #2
 8003e68:	e0c5      	b.n	8003ff6 <HAL_I2C_Mem_Write+0x1e2>
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	2201      	movs	r2, #1
 8003e6e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	f003 0301 	and.w	r3, r3, #1
 8003e7c:	2b01      	cmp	r3, #1
 8003e7e:	d007      	beq.n	8003e90 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	681a      	ldr	r2, [r3, #0]
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	f042 0201 	orr.w	r2, r2, #1
 8003e8e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	681a      	ldr	r2, [r3, #0]
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003e9e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	2221      	movs	r2, #33	@ 0x21
 8003ea4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	2240      	movs	r2, #64	@ 0x40
 8003eac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	2200      	movs	r2, #0
 8003eb4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	6a3a      	ldr	r2, [r7, #32]
 8003eba:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8003ec0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ec6:	b29a      	uxth	r2, r3
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	4a4d      	ldr	r2, [pc, #308]	@ (8004004 <HAL_I2C_Mem_Write+0x1f0>)
 8003ed0:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003ed2:	88f8      	ldrh	r0, [r7, #6]
 8003ed4:	893a      	ldrh	r2, [r7, #8]
 8003ed6:	8979      	ldrh	r1, [r7, #10]
 8003ed8:	697b      	ldr	r3, [r7, #20]
 8003eda:	9301      	str	r3, [sp, #4]
 8003edc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ede:	9300      	str	r3, [sp, #0]
 8003ee0:	4603      	mov	r3, r0
 8003ee2:	68f8      	ldr	r0, [r7, #12]
 8003ee4:	f000 fbe4 	bl	80046b0 <I2C_RequestMemoryWrite>
 8003ee8:	4603      	mov	r3, r0
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d052      	beq.n	8003f94 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003eee:	2301      	movs	r3, #1
 8003ef0:	e081      	b.n	8003ff6 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003ef2:	697a      	ldr	r2, [r7, #20]
 8003ef4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003ef6:	68f8      	ldr	r0, [r7, #12]
 8003ef8:	f000 fe2e 	bl	8004b58 <I2C_WaitOnTXEFlagUntilTimeout>
 8003efc:	4603      	mov	r3, r0
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d00d      	beq.n	8003f1e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f06:	2b04      	cmp	r3, #4
 8003f08:	d107      	bne.n	8003f1a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	681a      	ldr	r2, [r3, #0]
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003f18:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003f1a:	2301      	movs	r3, #1
 8003f1c:	e06b      	b.n	8003ff6 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f22:	781a      	ldrb	r2, [r3, #0]
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f2e:	1c5a      	adds	r2, r3, #1
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f38:	3b01      	subs	r3, #1
 8003f3a:	b29a      	uxth	r2, r3
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f44:	b29b      	uxth	r3, r3
 8003f46:	3b01      	subs	r3, #1
 8003f48:	b29a      	uxth	r2, r3
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	695b      	ldr	r3, [r3, #20]
 8003f54:	f003 0304 	and.w	r3, r3, #4
 8003f58:	2b04      	cmp	r3, #4
 8003f5a:	d11b      	bne.n	8003f94 <HAL_I2C_Mem_Write+0x180>
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d017      	beq.n	8003f94 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f68:	781a      	ldrb	r2, [r3, #0]
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f74:	1c5a      	adds	r2, r3, #1
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f7e:	3b01      	subs	r3, #1
 8003f80:	b29a      	uxth	r2, r3
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f8a:	b29b      	uxth	r3, r3
 8003f8c:	3b01      	subs	r3, #1
 8003f8e:	b29a      	uxth	r2, r3
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d1aa      	bne.n	8003ef2 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003f9c:	697a      	ldr	r2, [r7, #20]
 8003f9e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003fa0:	68f8      	ldr	r0, [r7, #12]
 8003fa2:	f000 fe1a 	bl	8004bda <I2C_WaitOnBTFFlagUntilTimeout>
 8003fa6:	4603      	mov	r3, r0
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d00d      	beq.n	8003fc8 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fb0:	2b04      	cmp	r3, #4
 8003fb2:	d107      	bne.n	8003fc4 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	681a      	ldr	r2, [r3, #0]
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003fc2:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003fc4:	2301      	movs	r3, #1
 8003fc6:	e016      	b.n	8003ff6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	681a      	ldr	r2, [r3, #0]
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003fd6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	2220      	movs	r2, #32
 8003fdc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	2200      	movs	r2, #0
 8003fe4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	2200      	movs	r2, #0
 8003fec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003ff0:	2300      	movs	r3, #0
 8003ff2:	e000      	b.n	8003ff6 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003ff4:	2302      	movs	r3, #2
  }
}
 8003ff6:	4618      	mov	r0, r3
 8003ff8:	3718      	adds	r7, #24
 8003ffa:	46bd      	mov	sp, r7
 8003ffc:	bd80      	pop	{r7, pc}
 8003ffe:	bf00      	nop
 8004000:	00100002 	.word	0x00100002
 8004004:	ffff0000 	.word	0xffff0000

08004008 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004008:	b580      	push	{r7, lr}
 800400a:	b08c      	sub	sp, #48	@ 0x30
 800400c:	af02      	add	r7, sp, #8
 800400e:	60f8      	str	r0, [r7, #12]
 8004010:	4608      	mov	r0, r1
 8004012:	4611      	mov	r1, r2
 8004014:	461a      	mov	r2, r3
 8004016:	4603      	mov	r3, r0
 8004018:	817b      	strh	r3, [r7, #10]
 800401a:	460b      	mov	r3, r1
 800401c:	813b      	strh	r3, [r7, #8]
 800401e:	4613      	mov	r3, r2
 8004020:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004022:	f7ff fabb 	bl	800359c <HAL_GetTick>
 8004026:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800402e:	b2db      	uxtb	r3, r3
 8004030:	2b20      	cmp	r3, #32
 8004032:	f040 8208 	bne.w	8004446 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004036:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004038:	9300      	str	r3, [sp, #0]
 800403a:	2319      	movs	r3, #25
 800403c:	2201      	movs	r2, #1
 800403e:	497b      	ldr	r1, [pc, #492]	@ (800422c <HAL_I2C_Mem_Read+0x224>)
 8004040:	68f8      	ldr	r0, [r7, #12]
 8004042:	f000 fcb3 	bl	80049ac <I2C_WaitOnFlagUntilTimeout>
 8004046:	4603      	mov	r3, r0
 8004048:	2b00      	cmp	r3, #0
 800404a:	d001      	beq.n	8004050 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 800404c:	2302      	movs	r3, #2
 800404e:	e1fb      	b.n	8004448 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004056:	2b01      	cmp	r3, #1
 8004058:	d101      	bne.n	800405e <HAL_I2C_Mem_Read+0x56>
 800405a:	2302      	movs	r3, #2
 800405c:	e1f4      	b.n	8004448 <HAL_I2C_Mem_Read+0x440>
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	2201      	movs	r2, #1
 8004062:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	f003 0301 	and.w	r3, r3, #1
 8004070:	2b01      	cmp	r3, #1
 8004072:	d007      	beq.n	8004084 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	681a      	ldr	r2, [r3, #0]
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	f042 0201 	orr.w	r2, r2, #1
 8004082:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	681a      	ldr	r2, [r3, #0]
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004092:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	2222      	movs	r2, #34	@ 0x22
 8004098:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	2240      	movs	r2, #64	@ 0x40
 80040a0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	2200      	movs	r2, #0
 80040a8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80040ae:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 80040b4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80040ba:	b29a      	uxth	r2, r3
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	4a5b      	ldr	r2, [pc, #364]	@ (8004230 <HAL_I2C_Mem_Read+0x228>)
 80040c4:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80040c6:	88f8      	ldrh	r0, [r7, #6]
 80040c8:	893a      	ldrh	r2, [r7, #8]
 80040ca:	8979      	ldrh	r1, [r7, #10]
 80040cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040ce:	9301      	str	r3, [sp, #4]
 80040d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80040d2:	9300      	str	r3, [sp, #0]
 80040d4:	4603      	mov	r3, r0
 80040d6:	68f8      	ldr	r0, [r7, #12]
 80040d8:	f000 fb80 	bl	80047dc <I2C_RequestMemoryRead>
 80040dc:	4603      	mov	r3, r0
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d001      	beq.n	80040e6 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80040e2:	2301      	movs	r3, #1
 80040e4:	e1b0      	b.n	8004448 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d113      	bne.n	8004116 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80040ee:	2300      	movs	r3, #0
 80040f0:	623b      	str	r3, [r7, #32]
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	695b      	ldr	r3, [r3, #20]
 80040f8:	623b      	str	r3, [r7, #32]
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	699b      	ldr	r3, [r3, #24]
 8004100:	623b      	str	r3, [r7, #32]
 8004102:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	681a      	ldr	r2, [r3, #0]
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004112:	601a      	str	r2, [r3, #0]
 8004114:	e184      	b.n	8004420 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800411a:	2b01      	cmp	r3, #1
 800411c:	d11b      	bne.n	8004156 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	681a      	ldr	r2, [r3, #0]
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800412c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800412e:	2300      	movs	r3, #0
 8004130:	61fb      	str	r3, [r7, #28]
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	695b      	ldr	r3, [r3, #20]
 8004138:	61fb      	str	r3, [r7, #28]
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	699b      	ldr	r3, [r3, #24]
 8004140:	61fb      	str	r3, [r7, #28]
 8004142:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	681a      	ldr	r2, [r3, #0]
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004152:	601a      	str	r2, [r3, #0]
 8004154:	e164      	b.n	8004420 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800415a:	2b02      	cmp	r3, #2
 800415c:	d11b      	bne.n	8004196 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	681a      	ldr	r2, [r3, #0]
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800416c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	681a      	ldr	r2, [r3, #0]
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800417c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800417e:	2300      	movs	r3, #0
 8004180:	61bb      	str	r3, [r7, #24]
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	695b      	ldr	r3, [r3, #20]
 8004188:	61bb      	str	r3, [r7, #24]
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	699b      	ldr	r3, [r3, #24]
 8004190:	61bb      	str	r3, [r7, #24]
 8004192:	69bb      	ldr	r3, [r7, #24]
 8004194:	e144      	b.n	8004420 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004196:	2300      	movs	r3, #0
 8004198:	617b      	str	r3, [r7, #20]
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	695b      	ldr	r3, [r3, #20]
 80041a0:	617b      	str	r3, [r7, #20]
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	699b      	ldr	r3, [r3, #24]
 80041a8:	617b      	str	r3, [r7, #20]
 80041aa:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80041ac:	e138      	b.n	8004420 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80041b2:	2b03      	cmp	r3, #3
 80041b4:	f200 80f1 	bhi.w	800439a <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80041bc:	2b01      	cmp	r3, #1
 80041be:	d123      	bne.n	8004208 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80041c0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80041c2:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80041c4:	68f8      	ldr	r0, [r7, #12]
 80041c6:	f000 fd49 	bl	8004c5c <I2C_WaitOnRXNEFlagUntilTimeout>
 80041ca:	4603      	mov	r3, r0
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d001      	beq.n	80041d4 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80041d0:	2301      	movs	r3, #1
 80041d2:	e139      	b.n	8004448 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	691a      	ldr	r2, [r3, #16]
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041de:	b2d2      	uxtb	r2, r2
 80041e0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041e6:	1c5a      	adds	r2, r3, #1
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80041f0:	3b01      	subs	r3, #1
 80041f2:	b29a      	uxth	r2, r3
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80041fc:	b29b      	uxth	r3, r3
 80041fe:	3b01      	subs	r3, #1
 8004200:	b29a      	uxth	r2, r3
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004206:	e10b      	b.n	8004420 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800420c:	2b02      	cmp	r3, #2
 800420e:	d14e      	bne.n	80042ae <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004210:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004212:	9300      	str	r3, [sp, #0]
 8004214:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004216:	2200      	movs	r2, #0
 8004218:	4906      	ldr	r1, [pc, #24]	@ (8004234 <HAL_I2C_Mem_Read+0x22c>)
 800421a:	68f8      	ldr	r0, [r7, #12]
 800421c:	f000 fbc6 	bl	80049ac <I2C_WaitOnFlagUntilTimeout>
 8004220:	4603      	mov	r3, r0
 8004222:	2b00      	cmp	r3, #0
 8004224:	d008      	beq.n	8004238 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8004226:	2301      	movs	r3, #1
 8004228:	e10e      	b.n	8004448 <HAL_I2C_Mem_Read+0x440>
 800422a:	bf00      	nop
 800422c:	00100002 	.word	0x00100002
 8004230:	ffff0000 	.word	0xffff0000
 8004234:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	681a      	ldr	r2, [r3, #0]
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004246:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	691a      	ldr	r2, [r3, #16]
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004252:	b2d2      	uxtb	r2, r2
 8004254:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800425a:	1c5a      	adds	r2, r3, #1
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004264:	3b01      	subs	r3, #1
 8004266:	b29a      	uxth	r2, r3
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004270:	b29b      	uxth	r3, r3
 8004272:	3b01      	subs	r3, #1
 8004274:	b29a      	uxth	r2, r3
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	691a      	ldr	r2, [r3, #16]
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004284:	b2d2      	uxtb	r2, r2
 8004286:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800428c:	1c5a      	adds	r2, r3, #1
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004296:	3b01      	subs	r3, #1
 8004298:	b29a      	uxth	r2, r3
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80042a2:	b29b      	uxth	r3, r3
 80042a4:	3b01      	subs	r3, #1
 80042a6:	b29a      	uxth	r2, r3
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80042ac:	e0b8      	b.n	8004420 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80042ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042b0:	9300      	str	r3, [sp, #0]
 80042b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80042b4:	2200      	movs	r2, #0
 80042b6:	4966      	ldr	r1, [pc, #408]	@ (8004450 <HAL_I2C_Mem_Read+0x448>)
 80042b8:	68f8      	ldr	r0, [r7, #12]
 80042ba:	f000 fb77 	bl	80049ac <I2C_WaitOnFlagUntilTimeout>
 80042be:	4603      	mov	r3, r0
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d001      	beq.n	80042c8 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80042c4:	2301      	movs	r3, #1
 80042c6:	e0bf      	b.n	8004448 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	681a      	ldr	r2, [r3, #0]
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80042d6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	691a      	ldr	r2, [r3, #16]
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042e2:	b2d2      	uxtb	r2, r2
 80042e4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042ea:	1c5a      	adds	r2, r3, #1
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80042f4:	3b01      	subs	r3, #1
 80042f6:	b29a      	uxth	r2, r3
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004300:	b29b      	uxth	r3, r3
 8004302:	3b01      	subs	r3, #1
 8004304:	b29a      	uxth	r2, r3
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800430a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800430c:	9300      	str	r3, [sp, #0]
 800430e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004310:	2200      	movs	r2, #0
 8004312:	494f      	ldr	r1, [pc, #316]	@ (8004450 <HAL_I2C_Mem_Read+0x448>)
 8004314:	68f8      	ldr	r0, [r7, #12]
 8004316:	f000 fb49 	bl	80049ac <I2C_WaitOnFlagUntilTimeout>
 800431a:	4603      	mov	r3, r0
 800431c:	2b00      	cmp	r3, #0
 800431e:	d001      	beq.n	8004324 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8004320:	2301      	movs	r3, #1
 8004322:	e091      	b.n	8004448 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	681a      	ldr	r2, [r3, #0]
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004332:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	691a      	ldr	r2, [r3, #16]
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800433e:	b2d2      	uxtb	r2, r2
 8004340:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004346:	1c5a      	adds	r2, r3, #1
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004350:	3b01      	subs	r3, #1
 8004352:	b29a      	uxth	r2, r3
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800435c:	b29b      	uxth	r3, r3
 800435e:	3b01      	subs	r3, #1
 8004360:	b29a      	uxth	r2, r3
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	691a      	ldr	r2, [r3, #16]
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004370:	b2d2      	uxtb	r2, r2
 8004372:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004378:	1c5a      	adds	r2, r3, #1
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004382:	3b01      	subs	r3, #1
 8004384:	b29a      	uxth	r2, r3
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800438e:	b29b      	uxth	r3, r3
 8004390:	3b01      	subs	r3, #1
 8004392:	b29a      	uxth	r2, r3
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004398:	e042      	b.n	8004420 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800439a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800439c:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800439e:	68f8      	ldr	r0, [r7, #12]
 80043a0:	f000 fc5c 	bl	8004c5c <I2C_WaitOnRXNEFlagUntilTimeout>
 80043a4:	4603      	mov	r3, r0
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d001      	beq.n	80043ae <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80043aa:	2301      	movs	r3, #1
 80043ac:	e04c      	b.n	8004448 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	691a      	ldr	r2, [r3, #16]
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043b8:	b2d2      	uxtb	r2, r2
 80043ba:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043c0:	1c5a      	adds	r2, r3, #1
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80043ca:	3b01      	subs	r3, #1
 80043cc:	b29a      	uxth	r2, r3
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80043d6:	b29b      	uxth	r3, r3
 80043d8:	3b01      	subs	r3, #1
 80043da:	b29a      	uxth	r2, r3
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	695b      	ldr	r3, [r3, #20]
 80043e6:	f003 0304 	and.w	r3, r3, #4
 80043ea:	2b04      	cmp	r3, #4
 80043ec:	d118      	bne.n	8004420 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	691a      	ldr	r2, [r3, #16]
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043f8:	b2d2      	uxtb	r2, r2
 80043fa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004400:	1c5a      	adds	r2, r3, #1
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800440a:	3b01      	subs	r3, #1
 800440c:	b29a      	uxth	r2, r3
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004416:	b29b      	uxth	r3, r3
 8004418:	3b01      	subs	r3, #1
 800441a:	b29a      	uxth	r2, r3
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004424:	2b00      	cmp	r3, #0
 8004426:	f47f aec2 	bne.w	80041ae <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	2220      	movs	r2, #32
 800442e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	2200      	movs	r2, #0
 8004436:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	2200      	movs	r2, #0
 800443e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8004442:	2300      	movs	r3, #0
 8004444:	e000      	b.n	8004448 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8004446:	2302      	movs	r3, #2
  }
}
 8004448:	4618      	mov	r0, r3
 800444a:	3728      	adds	r7, #40	@ 0x28
 800444c:	46bd      	mov	sp, r7
 800444e:	bd80      	pop	{r7, pc}
 8004450:	00010004 	.word	0x00010004

08004454 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8004454:	b580      	push	{r7, lr}
 8004456:	b08a      	sub	sp, #40	@ 0x28
 8004458:	af02      	add	r7, sp, #8
 800445a:	60f8      	str	r0, [r7, #12]
 800445c:	607a      	str	r2, [r7, #4]
 800445e:	603b      	str	r3, [r7, #0]
 8004460:	460b      	mov	r3, r1
 8004462:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8004464:	f7ff f89a 	bl	800359c <HAL_GetTick>
 8004468:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 800446a:	2301      	movs	r3, #1
 800446c:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004474:	b2db      	uxtb	r3, r3
 8004476:	2b20      	cmp	r3, #32
 8004478:	f040 8111 	bne.w	800469e <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800447c:	69fb      	ldr	r3, [r7, #28]
 800447e:	9300      	str	r3, [sp, #0]
 8004480:	2319      	movs	r3, #25
 8004482:	2201      	movs	r2, #1
 8004484:	4988      	ldr	r1, [pc, #544]	@ (80046a8 <HAL_I2C_IsDeviceReady+0x254>)
 8004486:	68f8      	ldr	r0, [r7, #12]
 8004488:	f000 fa90 	bl	80049ac <I2C_WaitOnFlagUntilTimeout>
 800448c:	4603      	mov	r3, r0
 800448e:	2b00      	cmp	r3, #0
 8004490:	d001      	beq.n	8004496 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8004492:	2302      	movs	r3, #2
 8004494:	e104      	b.n	80046a0 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800449c:	2b01      	cmp	r3, #1
 800449e:	d101      	bne.n	80044a4 <HAL_I2C_IsDeviceReady+0x50>
 80044a0:	2302      	movs	r3, #2
 80044a2:	e0fd      	b.n	80046a0 <HAL_I2C_IsDeviceReady+0x24c>
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	2201      	movs	r2, #1
 80044a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	f003 0301 	and.w	r3, r3, #1
 80044b6:	2b01      	cmp	r3, #1
 80044b8:	d007      	beq.n	80044ca <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	681a      	ldr	r2, [r3, #0]
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	f042 0201 	orr.w	r2, r2, #1
 80044c8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	681a      	ldr	r2, [r3, #0]
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80044d8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	2224      	movs	r2, #36	@ 0x24
 80044de:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	2200      	movs	r2, #0
 80044e6:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	4a70      	ldr	r2, [pc, #448]	@ (80046ac <HAL_I2C_IsDeviceReady+0x258>)
 80044ec:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	681a      	ldr	r2, [r3, #0]
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80044fc:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 80044fe:	69fb      	ldr	r3, [r7, #28]
 8004500:	9300      	str	r3, [sp, #0]
 8004502:	683b      	ldr	r3, [r7, #0]
 8004504:	2200      	movs	r2, #0
 8004506:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800450a:	68f8      	ldr	r0, [r7, #12]
 800450c:	f000 fa4e 	bl	80049ac <I2C_WaitOnFlagUntilTimeout>
 8004510:	4603      	mov	r3, r0
 8004512:	2b00      	cmp	r3, #0
 8004514:	d00d      	beq.n	8004532 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004520:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004524:	d103      	bne.n	800452e <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800452c:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 800452e:	2303      	movs	r3, #3
 8004530:	e0b6      	b.n	80046a0 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004532:	897b      	ldrh	r3, [r7, #10]
 8004534:	b2db      	uxtb	r3, r3
 8004536:	461a      	mov	r2, r3
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004540:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8004542:	f7ff f82b 	bl	800359c <HAL_GetTick>
 8004546:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	695b      	ldr	r3, [r3, #20]
 800454e:	f003 0302 	and.w	r3, r3, #2
 8004552:	2b02      	cmp	r3, #2
 8004554:	bf0c      	ite	eq
 8004556:	2301      	moveq	r3, #1
 8004558:	2300      	movne	r3, #0
 800455a:	b2db      	uxtb	r3, r3
 800455c:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	695b      	ldr	r3, [r3, #20]
 8004564:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004568:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800456c:	bf0c      	ite	eq
 800456e:	2301      	moveq	r3, #1
 8004570:	2300      	movne	r3, #0
 8004572:	b2db      	uxtb	r3, r3
 8004574:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8004576:	e025      	b.n	80045c4 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004578:	f7ff f810 	bl	800359c <HAL_GetTick>
 800457c:	4602      	mov	r2, r0
 800457e:	69fb      	ldr	r3, [r7, #28]
 8004580:	1ad3      	subs	r3, r2, r3
 8004582:	683a      	ldr	r2, [r7, #0]
 8004584:	429a      	cmp	r2, r3
 8004586:	d302      	bcc.n	800458e <HAL_I2C_IsDeviceReady+0x13a>
 8004588:	683b      	ldr	r3, [r7, #0]
 800458a:	2b00      	cmp	r3, #0
 800458c:	d103      	bne.n	8004596 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	22a0      	movs	r2, #160	@ 0xa0
 8004592:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	695b      	ldr	r3, [r3, #20]
 800459c:	f003 0302 	and.w	r3, r3, #2
 80045a0:	2b02      	cmp	r3, #2
 80045a2:	bf0c      	ite	eq
 80045a4:	2301      	moveq	r3, #1
 80045a6:	2300      	movne	r3, #0
 80045a8:	b2db      	uxtb	r3, r3
 80045aa:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	695b      	ldr	r3, [r3, #20]
 80045b2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80045b6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80045ba:	bf0c      	ite	eq
 80045bc:	2301      	moveq	r3, #1
 80045be:	2300      	movne	r3, #0
 80045c0:	b2db      	uxtb	r3, r3
 80045c2:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80045ca:	b2db      	uxtb	r3, r3
 80045cc:	2ba0      	cmp	r3, #160	@ 0xa0
 80045ce:	d005      	beq.n	80045dc <HAL_I2C_IsDeviceReady+0x188>
 80045d0:	7dfb      	ldrb	r3, [r7, #23]
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d102      	bne.n	80045dc <HAL_I2C_IsDeviceReady+0x188>
 80045d6:	7dbb      	ldrb	r3, [r7, #22]
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d0cd      	beq.n	8004578 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	2220      	movs	r2, #32
 80045e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	695b      	ldr	r3, [r3, #20]
 80045ea:	f003 0302 	and.w	r3, r3, #2
 80045ee:	2b02      	cmp	r3, #2
 80045f0:	d129      	bne.n	8004646 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	681a      	ldr	r2, [r3, #0]
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004600:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004602:	2300      	movs	r3, #0
 8004604:	613b      	str	r3, [r7, #16]
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	695b      	ldr	r3, [r3, #20]
 800460c:	613b      	str	r3, [r7, #16]
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	699b      	ldr	r3, [r3, #24]
 8004614:	613b      	str	r3, [r7, #16]
 8004616:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004618:	69fb      	ldr	r3, [r7, #28]
 800461a:	9300      	str	r3, [sp, #0]
 800461c:	2319      	movs	r3, #25
 800461e:	2201      	movs	r2, #1
 8004620:	4921      	ldr	r1, [pc, #132]	@ (80046a8 <HAL_I2C_IsDeviceReady+0x254>)
 8004622:	68f8      	ldr	r0, [r7, #12]
 8004624:	f000 f9c2 	bl	80049ac <I2C_WaitOnFlagUntilTimeout>
 8004628:	4603      	mov	r3, r0
 800462a:	2b00      	cmp	r3, #0
 800462c:	d001      	beq.n	8004632 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 800462e:	2301      	movs	r3, #1
 8004630:	e036      	b.n	80046a0 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	2220      	movs	r2, #32
 8004636:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	2200      	movs	r2, #0
 800463e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 8004642:	2300      	movs	r3, #0
 8004644:	e02c      	b.n	80046a0 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	681a      	ldr	r2, [r3, #0]
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004654:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800465e:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004660:	69fb      	ldr	r3, [r7, #28]
 8004662:	9300      	str	r3, [sp, #0]
 8004664:	2319      	movs	r3, #25
 8004666:	2201      	movs	r2, #1
 8004668:	490f      	ldr	r1, [pc, #60]	@ (80046a8 <HAL_I2C_IsDeviceReady+0x254>)
 800466a:	68f8      	ldr	r0, [r7, #12]
 800466c:	f000 f99e 	bl	80049ac <I2C_WaitOnFlagUntilTimeout>
 8004670:	4603      	mov	r3, r0
 8004672:	2b00      	cmp	r3, #0
 8004674:	d001      	beq.n	800467a <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8004676:	2301      	movs	r3, #1
 8004678:	e012      	b.n	80046a0 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 800467a:	69bb      	ldr	r3, [r7, #24]
 800467c:	3301      	adds	r3, #1
 800467e:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8004680:	69ba      	ldr	r2, [r7, #24]
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	429a      	cmp	r2, r3
 8004686:	f4ff af32 	bcc.w	80044ee <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	2220      	movs	r2, #32
 800468e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	2200      	movs	r2, #0
 8004696:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800469a:	2301      	movs	r3, #1
 800469c:	e000      	b.n	80046a0 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 800469e:	2302      	movs	r3, #2
  }
}
 80046a0:	4618      	mov	r0, r3
 80046a2:	3720      	adds	r7, #32
 80046a4:	46bd      	mov	sp, r7
 80046a6:	bd80      	pop	{r7, pc}
 80046a8:	00100002 	.word	0x00100002
 80046ac:	ffff0000 	.word	0xffff0000

080046b0 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80046b0:	b580      	push	{r7, lr}
 80046b2:	b088      	sub	sp, #32
 80046b4:	af02      	add	r7, sp, #8
 80046b6:	60f8      	str	r0, [r7, #12]
 80046b8:	4608      	mov	r0, r1
 80046ba:	4611      	mov	r1, r2
 80046bc:	461a      	mov	r2, r3
 80046be:	4603      	mov	r3, r0
 80046c0:	817b      	strh	r3, [r7, #10]
 80046c2:	460b      	mov	r3, r1
 80046c4:	813b      	strh	r3, [r7, #8]
 80046c6:	4613      	mov	r3, r2
 80046c8:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	681a      	ldr	r2, [r3, #0]
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80046d8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80046da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046dc:	9300      	str	r3, [sp, #0]
 80046de:	6a3b      	ldr	r3, [r7, #32]
 80046e0:	2200      	movs	r2, #0
 80046e2:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80046e6:	68f8      	ldr	r0, [r7, #12]
 80046e8:	f000 f960 	bl	80049ac <I2C_WaitOnFlagUntilTimeout>
 80046ec:	4603      	mov	r3, r0
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d00d      	beq.n	800470e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80046fc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004700:	d103      	bne.n	800470a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004708:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800470a:	2303      	movs	r3, #3
 800470c:	e05f      	b.n	80047ce <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800470e:	897b      	ldrh	r3, [r7, #10]
 8004710:	b2db      	uxtb	r3, r3
 8004712:	461a      	mov	r2, r3
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800471c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800471e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004720:	6a3a      	ldr	r2, [r7, #32]
 8004722:	492d      	ldr	r1, [pc, #180]	@ (80047d8 <I2C_RequestMemoryWrite+0x128>)
 8004724:	68f8      	ldr	r0, [r7, #12]
 8004726:	f000 f998 	bl	8004a5a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800472a:	4603      	mov	r3, r0
 800472c:	2b00      	cmp	r3, #0
 800472e:	d001      	beq.n	8004734 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8004730:	2301      	movs	r3, #1
 8004732:	e04c      	b.n	80047ce <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004734:	2300      	movs	r3, #0
 8004736:	617b      	str	r3, [r7, #20]
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	695b      	ldr	r3, [r3, #20]
 800473e:	617b      	str	r3, [r7, #20]
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	699b      	ldr	r3, [r3, #24]
 8004746:	617b      	str	r3, [r7, #20]
 8004748:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800474a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800474c:	6a39      	ldr	r1, [r7, #32]
 800474e:	68f8      	ldr	r0, [r7, #12]
 8004750:	f000 fa02 	bl	8004b58 <I2C_WaitOnTXEFlagUntilTimeout>
 8004754:	4603      	mov	r3, r0
 8004756:	2b00      	cmp	r3, #0
 8004758:	d00d      	beq.n	8004776 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800475e:	2b04      	cmp	r3, #4
 8004760:	d107      	bne.n	8004772 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	681a      	ldr	r2, [r3, #0]
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004770:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004772:	2301      	movs	r3, #1
 8004774:	e02b      	b.n	80047ce <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004776:	88fb      	ldrh	r3, [r7, #6]
 8004778:	2b01      	cmp	r3, #1
 800477a:	d105      	bne.n	8004788 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800477c:	893b      	ldrh	r3, [r7, #8]
 800477e:	b2da      	uxtb	r2, r3
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	611a      	str	r2, [r3, #16]
 8004786:	e021      	b.n	80047cc <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004788:	893b      	ldrh	r3, [r7, #8]
 800478a:	0a1b      	lsrs	r3, r3, #8
 800478c:	b29b      	uxth	r3, r3
 800478e:	b2da      	uxtb	r2, r3
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004796:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004798:	6a39      	ldr	r1, [r7, #32]
 800479a:	68f8      	ldr	r0, [r7, #12]
 800479c:	f000 f9dc 	bl	8004b58 <I2C_WaitOnTXEFlagUntilTimeout>
 80047a0:	4603      	mov	r3, r0
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d00d      	beq.n	80047c2 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047aa:	2b04      	cmp	r3, #4
 80047ac:	d107      	bne.n	80047be <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	681a      	ldr	r2, [r3, #0]
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80047bc:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80047be:	2301      	movs	r3, #1
 80047c0:	e005      	b.n	80047ce <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80047c2:	893b      	ldrh	r3, [r7, #8]
 80047c4:	b2da      	uxtb	r2, r3
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80047cc:	2300      	movs	r3, #0
}
 80047ce:	4618      	mov	r0, r3
 80047d0:	3718      	adds	r7, #24
 80047d2:	46bd      	mov	sp, r7
 80047d4:	bd80      	pop	{r7, pc}
 80047d6:	bf00      	nop
 80047d8:	00010002 	.word	0x00010002

080047dc <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80047dc:	b580      	push	{r7, lr}
 80047de:	b088      	sub	sp, #32
 80047e0:	af02      	add	r7, sp, #8
 80047e2:	60f8      	str	r0, [r7, #12]
 80047e4:	4608      	mov	r0, r1
 80047e6:	4611      	mov	r1, r2
 80047e8:	461a      	mov	r2, r3
 80047ea:	4603      	mov	r3, r0
 80047ec:	817b      	strh	r3, [r7, #10]
 80047ee:	460b      	mov	r3, r1
 80047f0:	813b      	strh	r3, [r7, #8]
 80047f2:	4613      	mov	r3, r2
 80047f4:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	681a      	ldr	r2, [r3, #0]
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004804:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	681a      	ldr	r2, [r3, #0]
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004814:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004816:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004818:	9300      	str	r3, [sp, #0]
 800481a:	6a3b      	ldr	r3, [r7, #32]
 800481c:	2200      	movs	r2, #0
 800481e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004822:	68f8      	ldr	r0, [r7, #12]
 8004824:	f000 f8c2 	bl	80049ac <I2C_WaitOnFlagUntilTimeout>
 8004828:	4603      	mov	r3, r0
 800482a:	2b00      	cmp	r3, #0
 800482c:	d00d      	beq.n	800484a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004838:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800483c:	d103      	bne.n	8004846 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004844:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004846:	2303      	movs	r3, #3
 8004848:	e0aa      	b.n	80049a0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800484a:	897b      	ldrh	r3, [r7, #10]
 800484c:	b2db      	uxtb	r3, r3
 800484e:	461a      	mov	r2, r3
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004858:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800485a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800485c:	6a3a      	ldr	r2, [r7, #32]
 800485e:	4952      	ldr	r1, [pc, #328]	@ (80049a8 <I2C_RequestMemoryRead+0x1cc>)
 8004860:	68f8      	ldr	r0, [r7, #12]
 8004862:	f000 f8fa 	bl	8004a5a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004866:	4603      	mov	r3, r0
 8004868:	2b00      	cmp	r3, #0
 800486a:	d001      	beq.n	8004870 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800486c:	2301      	movs	r3, #1
 800486e:	e097      	b.n	80049a0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004870:	2300      	movs	r3, #0
 8004872:	617b      	str	r3, [r7, #20]
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	695b      	ldr	r3, [r3, #20]
 800487a:	617b      	str	r3, [r7, #20]
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	699b      	ldr	r3, [r3, #24]
 8004882:	617b      	str	r3, [r7, #20]
 8004884:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004886:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004888:	6a39      	ldr	r1, [r7, #32]
 800488a:	68f8      	ldr	r0, [r7, #12]
 800488c:	f000 f964 	bl	8004b58 <I2C_WaitOnTXEFlagUntilTimeout>
 8004890:	4603      	mov	r3, r0
 8004892:	2b00      	cmp	r3, #0
 8004894:	d00d      	beq.n	80048b2 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800489a:	2b04      	cmp	r3, #4
 800489c:	d107      	bne.n	80048ae <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	681a      	ldr	r2, [r3, #0]
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80048ac:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80048ae:	2301      	movs	r3, #1
 80048b0:	e076      	b.n	80049a0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80048b2:	88fb      	ldrh	r3, [r7, #6]
 80048b4:	2b01      	cmp	r3, #1
 80048b6:	d105      	bne.n	80048c4 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80048b8:	893b      	ldrh	r3, [r7, #8]
 80048ba:	b2da      	uxtb	r2, r3
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	611a      	str	r2, [r3, #16]
 80048c2:	e021      	b.n	8004908 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80048c4:	893b      	ldrh	r3, [r7, #8]
 80048c6:	0a1b      	lsrs	r3, r3, #8
 80048c8:	b29b      	uxth	r3, r3
 80048ca:	b2da      	uxtb	r2, r3
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80048d2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80048d4:	6a39      	ldr	r1, [r7, #32]
 80048d6:	68f8      	ldr	r0, [r7, #12]
 80048d8:	f000 f93e 	bl	8004b58 <I2C_WaitOnTXEFlagUntilTimeout>
 80048dc:	4603      	mov	r3, r0
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d00d      	beq.n	80048fe <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048e6:	2b04      	cmp	r3, #4
 80048e8:	d107      	bne.n	80048fa <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	681a      	ldr	r2, [r3, #0]
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80048f8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80048fa:	2301      	movs	r3, #1
 80048fc:	e050      	b.n	80049a0 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80048fe:	893b      	ldrh	r3, [r7, #8]
 8004900:	b2da      	uxtb	r2, r3
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004908:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800490a:	6a39      	ldr	r1, [r7, #32]
 800490c:	68f8      	ldr	r0, [r7, #12]
 800490e:	f000 f923 	bl	8004b58 <I2C_WaitOnTXEFlagUntilTimeout>
 8004912:	4603      	mov	r3, r0
 8004914:	2b00      	cmp	r3, #0
 8004916:	d00d      	beq.n	8004934 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800491c:	2b04      	cmp	r3, #4
 800491e:	d107      	bne.n	8004930 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	681a      	ldr	r2, [r3, #0]
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800492e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004930:	2301      	movs	r3, #1
 8004932:	e035      	b.n	80049a0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	681a      	ldr	r2, [r3, #0]
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004942:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004944:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004946:	9300      	str	r3, [sp, #0]
 8004948:	6a3b      	ldr	r3, [r7, #32]
 800494a:	2200      	movs	r2, #0
 800494c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004950:	68f8      	ldr	r0, [r7, #12]
 8004952:	f000 f82b 	bl	80049ac <I2C_WaitOnFlagUntilTimeout>
 8004956:	4603      	mov	r3, r0
 8004958:	2b00      	cmp	r3, #0
 800495a:	d00d      	beq.n	8004978 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004966:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800496a:	d103      	bne.n	8004974 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004972:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004974:	2303      	movs	r3, #3
 8004976:	e013      	b.n	80049a0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004978:	897b      	ldrh	r3, [r7, #10]
 800497a:	b2db      	uxtb	r3, r3
 800497c:	f043 0301 	orr.w	r3, r3, #1
 8004980:	b2da      	uxtb	r2, r3
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004988:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800498a:	6a3a      	ldr	r2, [r7, #32]
 800498c:	4906      	ldr	r1, [pc, #24]	@ (80049a8 <I2C_RequestMemoryRead+0x1cc>)
 800498e:	68f8      	ldr	r0, [r7, #12]
 8004990:	f000 f863 	bl	8004a5a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004994:	4603      	mov	r3, r0
 8004996:	2b00      	cmp	r3, #0
 8004998:	d001      	beq.n	800499e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800499a:	2301      	movs	r3, #1
 800499c:	e000      	b.n	80049a0 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800499e:	2300      	movs	r3, #0
}
 80049a0:	4618      	mov	r0, r3
 80049a2:	3718      	adds	r7, #24
 80049a4:	46bd      	mov	sp, r7
 80049a6:	bd80      	pop	{r7, pc}
 80049a8:	00010002 	.word	0x00010002

080049ac <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80049ac:	b580      	push	{r7, lr}
 80049ae:	b084      	sub	sp, #16
 80049b0:	af00      	add	r7, sp, #0
 80049b2:	60f8      	str	r0, [r7, #12]
 80049b4:	60b9      	str	r1, [r7, #8]
 80049b6:	603b      	str	r3, [r7, #0]
 80049b8:	4613      	mov	r3, r2
 80049ba:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80049bc:	e025      	b.n	8004a0a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80049be:	683b      	ldr	r3, [r7, #0]
 80049c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049c4:	d021      	beq.n	8004a0a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80049c6:	f7fe fde9 	bl	800359c <HAL_GetTick>
 80049ca:	4602      	mov	r2, r0
 80049cc:	69bb      	ldr	r3, [r7, #24]
 80049ce:	1ad3      	subs	r3, r2, r3
 80049d0:	683a      	ldr	r2, [r7, #0]
 80049d2:	429a      	cmp	r2, r3
 80049d4:	d302      	bcc.n	80049dc <I2C_WaitOnFlagUntilTimeout+0x30>
 80049d6:	683b      	ldr	r3, [r7, #0]
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d116      	bne.n	8004a0a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	2200      	movs	r2, #0
 80049e0:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	2220      	movs	r2, #32
 80049e6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	2200      	movs	r2, #0
 80049ee:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049f6:	f043 0220 	orr.w	r2, r3, #32
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	2200      	movs	r2, #0
 8004a02:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8004a06:	2301      	movs	r3, #1
 8004a08:	e023      	b.n	8004a52 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004a0a:	68bb      	ldr	r3, [r7, #8]
 8004a0c:	0c1b      	lsrs	r3, r3, #16
 8004a0e:	b2db      	uxtb	r3, r3
 8004a10:	2b01      	cmp	r3, #1
 8004a12:	d10d      	bne.n	8004a30 <I2C_WaitOnFlagUntilTimeout+0x84>
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	695b      	ldr	r3, [r3, #20]
 8004a1a:	43da      	mvns	r2, r3
 8004a1c:	68bb      	ldr	r3, [r7, #8]
 8004a1e:	4013      	ands	r3, r2
 8004a20:	b29b      	uxth	r3, r3
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	bf0c      	ite	eq
 8004a26:	2301      	moveq	r3, #1
 8004a28:	2300      	movne	r3, #0
 8004a2a:	b2db      	uxtb	r3, r3
 8004a2c:	461a      	mov	r2, r3
 8004a2e:	e00c      	b.n	8004a4a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	699b      	ldr	r3, [r3, #24]
 8004a36:	43da      	mvns	r2, r3
 8004a38:	68bb      	ldr	r3, [r7, #8]
 8004a3a:	4013      	ands	r3, r2
 8004a3c:	b29b      	uxth	r3, r3
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	bf0c      	ite	eq
 8004a42:	2301      	moveq	r3, #1
 8004a44:	2300      	movne	r3, #0
 8004a46:	b2db      	uxtb	r3, r3
 8004a48:	461a      	mov	r2, r3
 8004a4a:	79fb      	ldrb	r3, [r7, #7]
 8004a4c:	429a      	cmp	r2, r3
 8004a4e:	d0b6      	beq.n	80049be <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004a50:	2300      	movs	r3, #0
}
 8004a52:	4618      	mov	r0, r3
 8004a54:	3710      	adds	r7, #16
 8004a56:	46bd      	mov	sp, r7
 8004a58:	bd80      	pop	{r7, pc}

08004a5a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004a5a:	b580      	push	{r7, lr}
 8004a5c:	b084      	sub	sp, #16
 8004a5e:	af00      	add	r7, sp, #0
 8004a60:	60f8      	str	r0, [r7, #12]
 8004a62:	60b9      	str	r1, [r7, #8]
 8004a64:	607a      	str	r2, [r7, #4]
 8004a66:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004a68:	e051      	b.n	8004b0e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	695b      	ldr	r3, [r3, #20]
 8004a70:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004a74:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004a78:	d123      	bne.n	8004ac2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	681a      	ldr	r2, [r3, #0]
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004a88:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004a92:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	2200      	movs	r2, #0
 8004a98:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	2220      	movs	r2, #32
 8004a9e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	2200      	movs	r2, #0
 8004aa6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004aae:	f043 0204 	orr.w	r2, r3, #4
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	2200      	movs	r2, #0
 8004aba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004abe:	2301      	movs	r3, #1
 8004ac0:	e046      	b.n	8004b50 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ac8:	d021      	beq.n	8004b0e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004aca:	f7fe fd67 	bl	800359c <HAL_GetTick>
 8004ace:	4602      	mov	r2, r0
 8004ad0:	683b      	ldr	r3, [r7, #0]
 8004ad2:	1ad3      	subs	r3, r2, r3
 8004ad4:	687a      	ldr	r2, [r7, #4]
 8004ad6:	429a      	cmp	r2, r3
 8004ad8:	d302      	bcc.n	8004ae0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d116      	bne.n	8004b0e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	2200      	movs	r2, #0
 8004ae4:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	2220      	movs	r2, #32
 8004aea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	2200      	movs	r2, #0
 8004af2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004afa:	f043 0220 	orr.w	r2, r3, #32
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	2200      	movs	r2, #0
 8004b06:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8004b0a:	2301      	movs	r3, #1
 8004b0c:	e020      	b.n	8004b50 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004b0e:	68bb      	ldr	r3, [r7, #8]
 8004b10:	0c1b      	lsrs	r3, r3, #16
 8004b12:	b2db      	uxtb	r3, r3
 8004b14:	2b01      	cmp	r3, #1
 8004b16:	d10c      	bne.n	8004b32 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	695b      	ldr	r3, [r3, #20]
 8004b1e:	43da      	mvns	r2, r3
 8004b20:	68bb      	ldr	r3, [r7, #8]
 8004b22:	4013      	ands	r3, r2
 8004b24:	b29b      	uxth	r3, r3
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	bf14      	ite	ne
 8004b2a:	2301      	movne	r3, #1
 8004b2c:	2300      	moveq	r3, #0
 8004b2e:	b2db      	uxtb	r3, r3
 8004b30:	e00b      	b.n	8004b4a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	699b      	ldr	r3, [r3, #24]
 8004b38:	43da      	mvns	r2, r3
 8004b3a:	68bb      	ldr	r3, [r7, #8]
 8004b3c:	4013      	ands	r3, r2
 8004b3e:	b29b      	uxth	r3, r3
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	bf14      	ite	ne
 8004b44:	2301      	movne	r3, #1
 8004b46:	2300      	moveq	r3, #0
 8004b48:	b2db      	uxtb	r3, r3
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d18d      	bne.n	8004a6a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8004b4e:	2300      	movs	r3, #0
}
 8004b50:	4618      	mov	r0, r3
 8004b52:	3710      	adds	r7, #16
 8004b54:	46bd      	mov	sp, r7
 8004b56:	bd80      	pop	{r7, pc}

08004b58 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004b58:	b580      	push	{r7, lr}
 8004b5a:	b084      	sub	sp, #16
 8004b5c:	af00      	add	r7, sp, #0
 8004b5e:	60f8      	str	r0, [r7, #12]
 8004b60:	60b9      	str	r1, [r7, #8]
 8004b62:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004b64:	e02d      	b.n	8004bc2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004b66:	68f8      	ldr	r0, [r7, #12]
 8004b68:	f000 f8ce 	bl	8004d08 <I2C_IsAcknowledgeFailed>
 8004b6c:	4603      	mov	r3, r0
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d001      	beq.n	8004b76 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004b72:	2301      	movs	r3, #1
 8004b74:	e02d      	b.n	8004bd2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004b76:	68bb      	ldr	r3, [r7, #8]
 8004b78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b7c:	d021      	beq.n	8004bc2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b7e:	f7fe fd0d 	bl	800359c <HAL_GetTick>
 8004b82:	4602      	mov	r2, r0
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	1ad3      	subs	r3, r2, r3
 8004b88:	68ba      	ldr	r2, [r7, #8]
 8004b8a:	429a      	cmp	r2, r3
 8004b8c:	d302      	bcc.n	8004b94 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004b8e:	68bb      	ldr	r3, [r7, #8]
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d116      	bne.n	8004bc2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	2200      	movs	r2, #0
 8004b98:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	2220      	movs	r2, #32
 8004b9e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	2200      	movs	r2, #0
 8004ba6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004bae:	f043 0220 	orr.w	r2, r3, #32
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	2200      	movs	r2, #0
 8004bba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8004bbe:	2301      	movs	r3, #1
 8004bc0:	e007      	b.n	8004bd2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	695b      	ldr	r3, [r3, #20]
 8004bc8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004bcc:	2b80      	cmp	r3, #128	@ 0x80
 8004bce:	d1ca      	bne.n	8004b66 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004bd0:	2300      	movs	r3, #0
}
 8004bd2:	4618      	mov	r0, r3
 8004bd4:	3710      	adds	r7, #16
 8004bd6:	46bd      	mov	sp, r7
 8004bd8:	bd80      	pop	{r7, pc}

08004bda <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004bda:	b580      	push	{r7, lr}
 8004bdc:	b084      	sub	sp, #16
 8004bde:	af00      	add	r7, sp, #0
 8004be0:	60f8      	str	r0, [r7, #12]
 8004be2:	60b9      	str	r1, [r7, #8]
 8004be4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004be6:	e02d      	b.n	8004c44 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004be8:	68f8      	ldr	r0, [r7, #12]
 8004bea:	f000 f88d 	bl	8004d08 <I2C_IsAcknowledgeFailed>
 8004bee:	4603      	mov	r3, r0
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d001      	beq.n	8004bf8 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004bf4:	2301      	movs	r3, #1
 8004bf6:	e02d      	b.n	8004c54 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004bf8:	68bb      	ldr	r3, [r7, #8]
 8004bfa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bfe:	d021      	beq.n	8004c44 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c00:	f7fe fccc 	bl	800359c <HAL_GetTick>
 8004c04:	4602      	mov	r2, r0
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	1ad3      	subs	r3, r2, r3
 8004c0a:	68ba      	ldr	r2, [r7, #8]
 8004c0c:	429a      	cmp	r2, r3
 8004c0e:	d302      	bcc.n	8004c16 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004c10:	68bb      	ldr	r3, [r7, #8]
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d116      	bne.n	8004c44 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	2200      	movs	r2, #0
 8004c1a:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	2220      	movs	r2, #32
 8004c20:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	2200      	movs	r2, #0
 8004c28:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c30:	f043 0220 	orr.w	r2, r3, #32
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	2200      	movs	r2, #0
 8004c3c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8004c40:	2301      	movs	r3, #1
 8004c42:	e007      	b.n	8004c54 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	695b      	ldr	r3, [r3, #20]
 8004c4a:	f003 0304 	and.w	r3, r3, #4
 8004c4e:	2b04      	cmp	r3, #4
 8004c50:	d1ca      	bne.n	8004be8 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004c52:	2300      	movs	r3, #0
}
 8004c54:	4618      	mov	r0, r3
 8004c56:	3710      	adds	r7, #16
 8004c58:	46bd      	mov	sp, r7
 8004c5a:	bd80      	pop	{r7, pc}

08004c5c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004c5c:	b580      	push	{r7, lr}
 8004c5e:	b084      	sub	sp, #16
 8004c60:	af00      	add	r7, sp, #0
 8004c62:	60f8      	str	r0, [r7, #12]
 8004c64:	60b9      	str	r1, [r7, #8]
 8004c66:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004c68:	e042      	b.n	8004cf0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	695b      	ldr	r3, [r3, #20]
 8004c70:	f003 0310 	and.w	r3, r3, #16
 8004c74:	2b10      	cmp	r3, #16
 8004c76:	d119      	bne.n	8004cac <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	f06f 0210 	mvn.w	r2, #16
 8004c80:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	2200      	movs	r2, #0
 8004c86:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	2220      	movs	r2, #32
 8004c8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	2200      	movs	r2, #0
 8004c94:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	2200      	movs	r2, #0
 8004ca4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004ca8:	2301      	movs	r3, #1
 8004caa:	e029      	b.n	8004d00 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004cac:	f7fe fc76 	bl	800359c <HAL_GetTick>
 8004cb0:	4602      	mov	r2, r0
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	1ad3      	subs	r3, r2, r3
 8004cb6:	68ba      	ldr	r2, [r7, #8]
 8004cb8:	429a      	cmp	r2, r3
 8004cba:	d302      	bcc.n	8004cc2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004cbc:	68bb      	ldr	r3, [r7, #8]
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d116      	bne.n	8004cf0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	2200      	movs	r2, #0
 8004cc6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	2220      	movs	r2, #32
 8004ccc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	2200      	movs	r2, #0
 8004cd4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004cdc:	f043 0220 	orr.w	r2, r3, #32
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	2200      	movs	r2, #0
 8004ce8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004cec:	2301      	movs	r3, #1
 8004cee:	e007      	b.n	8004d00 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	695b      	ldr	r3, [r3, #20]
 8004cf6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004cfa:	2b40      	cmp	r3, #64	@ 0x40
 8004cfc:	d1b5      	bne.n	8004c6a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004cfe:	2300      	movs	r3, #0
}
 8004d00:	4618      	mov	r0, r3
 8004d02:	3710      	adds	r7, #16
 8004d04:	46bd      	mov	sp, r7
 8004d06:	bd80      	pop	{r7, pc}

08004d08 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004d08:	b480      	push	{r7}
 8004d0a:	b083      	sub	sp, #12
 8004d0c:	af00      	add	r7, sp, #0
 8004d0e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	695b      	ldr	r3, [r3, #20]
 8004d16:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004d1a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004d1e:	d11b      	bne.n	8004d58 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004d28:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	2200      	movs	r2, #0
 8004d2e:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	2220      	movs	r2, #32
 8004d34:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	2200      	movs	r2, #0
 8004d3c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d44:	f043 0204 	orr.w	r2, r3, #4
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	2200      	movs	r2, #0
 8004d50:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8004d54:	2301      	movs	r3, #1
 8004d56:	e000      	b.n	8004d5a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004d58:	2300      	movs	r3, #0
}
 8004d5a:	4618      	mov	r0, r3
 8004d5c:	370c      	adds	r7, #12
 8004d5e:	46bd      	mov	sp, r7
 8004d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d64:	4770      	bx	lr
	...

08004d68 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004d68:	b580      	push	{r7, lr}
 8004d6a:	b086      	sub	sp, #24
 8004d6c:	af00      	add	r7, sp, #0
 8004d6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d101      	bne.n	8004d7a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004d76:	2301      	movs	r3, #1
 8004d78:	e267      	b.n	800524a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	f003 0301 	and.w	r3, r3, #1
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d075      	beq.n	8004e72 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004d86:	4b88      	ldr	r3, [pc, #544]	@ (8004fa8 <HAL_RCC_OscConfig+0x240>)
 8004d88:	689b      	ldr	r3, [r3, #8]
 8004d8a:	f003 030c 	and.w	r3, r3, #12
 8004d8e:	2b04      	cmp	r3, #4
 8004d90:	d00c      	beq.n	8004dac <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004d92:	4b85      	ldr	r3, [pc, #532]	@ (8004fa8 <HAL_RCC_OscConfig+0x240>)
 8004d94:	689b      	ldr	r3, [r3, #8]
 8004d96:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004d9a:	2b08      	cmp	r3, #8
 8004d9c:	d112      	bne.n	8004dc4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004d9e:	4b82      	ldr	r3, [pc, #520]	@ (8004fa8 <HAL_RCC_OscConfig+0x240>)
 8004da0:	685b      	ldr	r3, [r3, #4]
 8004da2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004da6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004daa:	d10b      	bne.n	8004dc4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004dac:	4b7e      	ldr	r3, [pc, #504]	@ (8004fa8 <HAL_RCC_OscConfig+0x240>)
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d05b      	beq.n	8004e70 <HAL_RCC_OscConfig+0x108>
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	685b      	ldr	r3, [r3, #4]
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d157      	bne.n	8004e70 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004dc0:	2301      	movs	r3, #1
 8004dc2:	e242      	b.n	800524a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	685b      	ldr	r3, [r3, #4]
 8004dc8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004dcc:	d106      	bne.n	8004ddc <HAL_RCC_OscConfig+0x74>
 8004dce:	4b76      	ldr	r3, [pc, #472]	@ (8004fa8 <HAL_RCC_OscConfig+0x240>)
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	4a75      	ldr	r2, [pc, #468]	@ (8004fa8 <HAL_RCC_OscConfig+0x240>)
 8004dd4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004dd8:	6013      	str	r3, [r2, #0]
 8004dda:	e01d      	b.n	8004e18 <HAL_RCC_OscConfig+0xb0>
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	685b      	ldr	r3, [r3, #4]
 8004de0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004de4:	d10c      	bne.n	8004e00 <HAL_RCC_OscConfig+0x98>
 8004de6:	4b70      	ldr	r3, [pc, #448]	@ (8004fa8 <HAL_RCC_OscConfig+0x240>)
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	4a6f      	ldr	r2, [pc, #444]	@ (8004fa8 <HAL_RCC_OscConfig+0x240>)
 8004dec:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004df0:	6013      	str	r3, [r2, #0]
 8004df2:	4b6d      	ldr	r3, [pc, #436]	@ (8004fa8 <HAL_RCC_OscConfig+0x240>)
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	4a6c      	ldr	r2, [pc, #432]	@ (8004fa8 <HAL_RCC_OscConfig+0x240>)
 8004df8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004dfc:	6013      	str	r3, [r2, #0]
 8004dfe:	e00b      	b.n	8004e18 <HAL_RCC_OscConfig+0xb0>
 8004e00:	4b69      	ldr	r3, [pc, #420]	@ (8004fa8 <HAL_RCC_OscConfig+0x240>)
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	4a68      	ldr	r2, [pc, #416]	@ (8004fa8 <HAL_RCC_OscConfig+0x240>)
 8004e06:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004e0a:	6013      	str	r3, [r2, #0]
 8004e0c:	4b66      	ldr	r3, [pc, #408]	@ (8004fa8 <HAL_RCC_OscConfig+0x240>)
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	4a65      	ldr	r2, [pc, #404]	@ (8004fa8 <HAL_RCC_OscConfig+0x240>)
 8004e12:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004e16:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	685b      	ldr	r3, [r3, #4]
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d013      	beq.n	8004e48 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e20:	f7fe fbbc 	bl	800359c <HAL_GetTick>
 8004e24:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004e26:	e008      	b.n	8004e3a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004e28:	f7fe fbb8 	bl	800359c <HAL_GetTick>
 8004e2c:	4602      	mov	r2, r0
 8004e2e:	693b      	ldr	r3, [r7, #16]
 8004e30:	1ad3      	subs	r3, r2, r3
 8004e32:	2b64      	cmp	r3, #100	@ 0x64
 8004e34:	d901      	bls.n	8004e3a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004e36:	2303      	movs	r3, #3
 8004e38:	e207      	b.n	800524a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004e3a:	4b5b      	ldr	r3, [pc, #364]	@ (8004fa8 <HAL_RCC_OscConfig+0x240>)
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d0f0      	beq.n	8004e28 <HAL_RCC_OscConfig+0xc0>
 8004e46:	e014      	b.n	8004e72 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e48:	f7fe fba8 	bl	800359c <HAL_GetTick>
 8004e4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004e4e:	e008      	b.n	8004e62 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004e50:	f7fe fba4 	bl	800359c <HAL_GetTick>
 8004e54:	4602      	mov	r2, r0
 8004e56:	693b      	ldr	r3, [r7, #16]
 8004e58:	1ad3      	subs	r3, r2, r3
 8004e5a:	2b64      	cmp	r3, #100	@ 0x64
 8004e5c:	d901      	bls.n	8004e62 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004e5e:	2303      	movs	r3, #3
 8004e60:	e1f3      	b.n	800524a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004e62:	4b51      	ldr	r3, [pc, #324]	@ (8004fa8 <HAL_RCC_OscConfig+0x240>)
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d1f0      	bne.n	8004e50 <HAL_RCC_OscConfig+0xe8>
 8004e6e:	e000      	b.n	8004e72 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004e70:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	f003 0302 	and.w	r3, r3, #2
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d063      	beq.n	8004f46 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004e7e:	4b4a      	ldr	r3, [pc, #296]	@ (8004fa8 <HAL_RCC_OscConfig+0x240>)
 8004e80:	689b      	ldr	r3, [r3, #8]
 8004e82:	f003 030c 	and.w	r3, r3, #12
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d00b      	beq.n	8004ea2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004e8a:	4b47      	ldr	r3, [pc, #284]	@ (8004fa8 <HAL_RCC_OscConfig+0x240>)
 8004e8c:	689b      	ldr	r3, [r3, #8]
 8004e8e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004e92:	2b08      	cmp	r3, #8
 8004e94:	d11c      	bne.n	8004ed0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004e96:	4b44      	ldr	r3, [pc, #272]	@ (8004fa8 <HAL_RCC_OscConfig+0x240>)
 8004e98:	685b      	ldr	r3, [r3, #4]
 8004e9a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d116      	bne.n	8004ed0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004ea2:	4b41      	ldr	r3, [pc, #260]	@ (8004fa8 <HAL_RCC_OscConfig+0x240>)
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	f003 0302 	and.w	r3, r3, #2
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d005      	beq.n	8004eba <HAL_RCC_OscConfig+0x152>
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	68db      	ldr	r3, [r3, #12]
 8004eb2:	2b01      	cmp	r3, #1
 8004eb4:	d001      	beq.n	8004eba <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004eb6:	2301      	movs	r3, #1
 8004eb8:	e1c7      	b.n	800524a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004eba:	4b3b      	ldr	r3, [pc, #236]	@ (8004fa8 <HAL_RCC_OscConfig+0x240>)
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	691b      	ldr	r3, [r3, #16]
 8004ec6:	00db      	lsls	r3, r3, #3
 8004ec8:	4937      	ldr	r1, [pc, #220]	@ (8004fa8 <HAL_RCC_OscConfig+0x240>)
 8004eca:	4313      	orrs	r3, r2
 8004ecc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004ece:	e03a      	b.n	8004f46 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	68db      	ldr	r3, [r3, #12]
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d020      	beq.n	8004f1a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004ed8:	4b34      	ldr	r3, [pc, #208]	@ (8004fac <HAL_RCC_OscConfig+0x244>)
 8004eda:	2201      	movs	r2, #1
 8004edc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ede:	f7fe fb5d 	bl	800359c <HAL_GetTick>
 8004ee2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004ee4:	e008      	b.n	8004ef8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004ee6:	f7fe fb59 	bl	800359c <HAL_GetTick>
 8004eea:	4602      	mov	r2, r0
 8004eec:	693b      	ldr	r3, [r7, #16]
 8004eee:	1ad3      	subs	r3, r2, r3
 8004ef0:	2b02      	cmp	r3, #2
 8004ef2:	d901      	bls.n	8004ef8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004ef4:	2303      	movs	r3, #3
 8004ef6:	e1a8      	b.n	800524a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004ef8:	4b2b      	ldr	r3, [pc, #172]	@ (8004fa8 <HAL_RCC_OscConfig+0x240>)
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	f003 0302 	and.w	r3, r3, #2
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d0f0      	beq.n	8004ee6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004f04:	4b28      	ldr	r3, [pc, #160]	@ (8004fa8 <HAL_RCC_OscConfig+0x240>)
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	691b      	ldr	r3, [r3, #16]
 8004f10:	00db      	lsls	r3, r3, #3
 8004f12:	4925      	ldr	r1, [pc, #148]	@ (8004fa8 <HAL_RCC_OscConfig+0x240>)
 8004f14:	4313      	orrs	r3, r2
 8004f16:	600b      	str	r3, [r1, #0]
 8004f18:	e015      	b.n	8004f46 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004f1a:	4b24      	ldr	r3, [pc, #144]	@ (8004fac <HAL_RCC_OscConfig+0x244>)
 8004f1c:	2200      	movs	r2, #0
 8004f1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f20:	f7fe fb3c 	bl	800359c <HAL_GetTick>
 8004f24:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004f26:	e008      	b.n	8004f3a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004f28:	f7fe fb38 	bl	800359c <HAL_GetTick>
 8004f2c:	4602      	mov	r2, r0
 8004f2e:	693b      	ldr	r3, [r7, #16]
 8004f30:	1ad3      	subs	r3, r2, r3
 8004f32:	2b02      	cmp	r3, #2
 8004f34:	d901      	bls.n	8004f3a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004f36:	2303      	movs	r3, #3
 8004f38:	e187      	b.n	800524a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004f3a:	4b1b      	ldr	r3, [pc, #108]	@ (8004fa8 <HAL_RCC_OscConfig+0x240>)
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	f003 0302 	and.w	r3, r3, #2
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d1f0      	bne.n	8004f28 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	f003 0308 	and.w	r3, r3, #8
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d036      	beq.n	8004fc0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	695b      	ldr	r3, [r3, #20]
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d016      	beq.n	8004f88 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004f5a:	4b15      	ldr	r3, [pc, #84]	@ (8004fb0 <HAL_RCC_OscConfig+0x248>)
 8004f5c:	2201      	movs	r2, #1
 8004f5e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f60:	f7fe fb1c 	bl	800359c <HAL_GetTick>
 8004f64:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004f66:	e008      	b.n	8004f7a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004f68:	f7fe fb18 	bl	800359c <HAL_GetTick>
 8004f6c:	4602      	mov	r2, r0
 8004f6e:	693b      	ldr	r3, [r7, #16]
 8004f70:	1ad3      	subs	r3, r2, r3
 8004f72:	2b02      	cmp	r3, #2
 8004f74:	d901      	bls.n	8004f7a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004f76:	2303      	movs	r3, #3
 8004f78:	e167      	b.n	800524a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004f7a:	4b0b      	ldr	r3, [pc, #44]	@ (8004fa8 <HAL_RCC_OscConfig+0x240>)
 8004f7c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004f7e:	f003 0302 	and.w	r3, r3, #2
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d0f0      	beq.n	8004f68 <HAL_RCC_OscConfig+0x200>
 8004f86:	e01b      	b.n	8004fc0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004f88:	4b09      	ldr	r3, [pc, #36]	@ (8004fb0 <HAL_RCC_OscConfig+0x248>)
 8004f8a:	2200      	movs	r2, #0
 8004f8c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004f8e:	f7fe fb05 	bl	800359c <HAL_GetTick>
 8004f92:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004f94:	e00e      	b.n	8004fb4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004f96:	f7fe fb01 	bl	800359c <HAL_GetTick>
 8004f9a:	4602      	mov	r2, r0
 8004f9c:	693b      	ldr	r3, [r7, #16]
 8004f9e:	1ad3      	subs	r3, r2, r3
 8004fa0:	2b02      	cmp	r3, #2
 8004fa2:	d907      	bls.n	8004fb4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004fa4:	2303      	movs	r3, #3
 8004fa6:	e150      	b.n	800524a <HAL_RCC_OscConfig+0x4e2>
 8004fa8:	40023800 	.word	0x40023800
 8004fac:	42470000 	.word	0x42470000
 8004fb0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004fb4:	4b88      	ldr	r3, [pc, #544]	@ (80051d8 <HAL_RCC_OscConfig+0x470>)
 8004fb6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004fb8:	f003 0302 	and.w	r3, r3, #2
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d1ea      	bne.n	8004f96 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	f003 0304 	and.w	r3, r3, #4
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	f000 8097 	beq.w	80050fc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004fce:	2300      	movs	r3, #0
 8004fd0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004fd2:	4b81      	ldr	r3, [pc, #516]	@ (80051d8 <HAL_RCC_OscConfig+0x470>)
 8004fd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fd6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d10f      	bne.n	8004ffe <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004fde:	2300      	movs	r3, #0
 8004fe0:	60bb      	str	r3, [r7, #8]
 8004fe2:	4b7d      	ldr	r3, [pc, #500]	@ (80051d8 <HAL_RCC_OscConfig+0x470>)
 8004fe4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fe6:	4a7c      	ldr	r2, [pc, #496]	@ (80051d8 <HAL_RCC_OscConfig+0x470>)
 8004fe8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004fec:	6413      	str	r3, [r2, #64]	@ 0x40
 8004fee:	4b7a      	ldr	r3, [pc, #488]	@ (80051d8 <HAL_RCC_OscConfig+0x470>)
 8004ff0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ff2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004ff6:	60bb      	str	r3, [r7, #8]
 8004ff8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004ffa:	2301      	movs	r3, #1
 8004ffc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ffe:	4b77      	ldr	r3, [pc, #476]	@ (80051dc <HAL_RCC_OscConfig+0x474>)
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005006:	2b00      	cmp	r3, #0
 8005008:	d118      	bne.n	800503c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800500a:	4b74      	ldr	r3, [pc, #464]	@ (80051dc <HAL_RCC_OscConfig+0x474>)
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	4a73      	ldr	r2, [pc, #460]	@ (80051dc <HAL_RCC_OscConfig+0x474>)
 8005010:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005014:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005016:	f7fe fac1 	bl	800359c <HAL_GetTick>
 800501a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800501c:	e008      	b.n	8005030 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800501e:	f7fe fabd 	bl	800359c <HAL_GetTick>
 8005022:	4602      	mov	r2, r0
 8005024:	693b      	ldr	r3, [r7, #16]
 8005026:	1ad3      	subs	r3, r2, r3
 8005028:	2b02      	cmp	r3, #2
 800502a:	d901      	bls.n	8005030 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800502c:	2303      	movs	r3, #3
 800502e:	e10c      	b.n	800524a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005030:	4b6a      	ldr	r3, [pc, #424]	@ (80051dc <HAL_RCC_OscConfig+0x474>)
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005038:	2b00      	cmp	r3, #0
 800503a:	d0f0      	beq.n	800501e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	689b      	ldr	r3, [r3, #8]
 8005040:	2b01      	cmp	r3, #1
 8005042:	d106      	bne.n	8005052 <HAL_RCC_OscConfig+0x2ea>
 8005044:	4b64      	ldr	r3, [pc, #400]	@ (80051d8 <HAL_RCC_OscConfig+0x470>)
 8005046:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005048:	4a63      	ldr	r2, [pc, #396]	@ (80051d8 <HAL_RCC_OscConfig+0x470>)
 800504a:	f043 0301 	orr.w	r3, r3, #1
 800504e:	6713      	str	r3, [r2, #112]	@ 0x70
 8005050:	e01c      	b.n	800508c <HAL_RCC_OscConfig+0x324>
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	689b      	ldr	r3, [r3, #8]
 8005056:	2b05      	cmp	r3, #5
 8005058:	d10c      	bne.n	8005074 <HAL_RCC_OscConfig+0x30c>
 800505a:	4b5f      	ldr	r3, [pc, #380]	@ (80051d8 <HAL_RCC_OscConfig+0x470>)
 800505c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800505e:	4a5e      	ldr	r2, [pc, #376]	@ (80051d8 <HAL_RCC_OscConfig+0x470>)
 8005060:	f043 0304 	orr.w	r3, r3, #4
 8005064:	6713      	str	r3, [r2, #112]	@ 0x70
 8005066:	4b5c      	ldr	r3, [pc, #368]	@ (80051d8 <HAL_RCC_OscConfig+0x470>)
 8005068:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800506a:	4a5b      	ldr	r2, [pc, #364]	@ (80051d8 <HAL_RCC_OscConfig+0x470>)
 800506c:	f043 0301 	orr.w	r3, r3, #1
 8005070:	6713      	str	r3, [r2, #112]	@ 0x70
 8005072:	e00b      	b.n	800508c <HAL_RCC_OscConfig+0x324>
 8005074:	4b58      	ldr	r3, [pc, #352]	@ (80051d8 <HAL_RCC_OscConfig+0x470>)
 8005076:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005078:	4a57      	ldr	r2, [pc, #348]	@ (80051d8 <HAL_RCC_OscConfig+0x470>)
 800507a:	f023 0301 	bic.w	r3, r3, #1
 800507e:	6713      	str	r3, [r2, #112]	@ 0x70
 8005080:	4b55      	ldr	r3, [pc, #340]	@ (80051d8 <HAL_RCC_OscConfig+0x470>)
 8005082:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005084:	4a54      	ldr	r2, [pc, #336]	@ (80051d8 <HAL_RCC_OscConfig+0x470>)
 8005086:	f023 0304 	bic.w	r3, r3, #4
 800508a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	689b      	ldr	r3, [r3, #8]
 8005090:	2b00      	cmp	r3, #0
 8005092:	d015      	beq.n	80050c0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005094:	f7fe fa82 	bl	800359c <HAL_GetTick>
 8005098:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800509a:	e00a      	b.n	80050b2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800509c:	f7fe fa7e 	bl	800359c <HAL_GetTick>
 80050a0:	4602      	mov	r2, r0
 80050a2:	693b      	ldr	r3, [r7, #16]
 80050a4:	1ad3      	subs	r3, r2, r3
 80050a6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80050aa:	4293      	cmp	r3, r2
 80050ac:	d901      	bls.n	80050b2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80050ae:	2303      	movs	r3, #3
 80050b0:	e0cb      	b.n	800524a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80050b2:	4b49      	ldr	r3, [pc, #292]	@ (80051d8 <HAL_RCC_OscConfig+0x470>)
 80050b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80050b6:	f003 0302 	and.w	r3, r3, #2
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d0ee      	beq.n	800509c <HAL_RCC_OscConfig+0x334>
 80050be:	e014      	b.n	80050ea <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80050c0:	f7fe fa6c 	bl	800359c <HAL_GetTick>
 80050c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80050c6:	e00a      	b.n	80050de <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80050c8:	f7fe fa68 	bl	800359c <HAL_GetTick>
 80050cc:	4602      	mov	r2, r0
 80050ce:	693b      	ldr	r3, [r7, #16]
 80050d0:	1ad3      	subs	r3, r2, r3
 80050d2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80050d6:	4293      	cmp	r3, r2
 80050d8:	d901      	bls.n	80050de <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80050da:	2303      	movs	r3, #3
 80050dc:	e0b5      	b.n	800524a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80050de:	4b3e      	ldr	r3, [pc, #248]	@ (80051d8 <HAL_RCC_OscConfig+0x470>)
 80050e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80050e2:	f003 0302 	and.w	r3, r3, #2
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d1ee      	bne.n	80050c8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80050ea:	7dfb      	ldrb	r3, [r7, #23]
 80050ec:	2b01      	cmp	r3, #1
 80050ee:	d105      	bne.n	80050fc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80050f0:	4b39      	ldr	r3, [pc, #228]	@ (80051d8 <HAL_RCC_OscConfig+0x470>)
 80050f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050f4:	4a38      	ldr	r2, [pc, #224]	@ (80051d8 <HAL_RCC_OscConfig+0x470>)
 80050f6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80050fa:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	699b      	ldr	r3, [r3, #24]
 8005100:	2b00      	cmp	r3, #0
 8005102:	f000 80a1 	beq.w	8005248 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005106:	4b34      	ldr	r3, [pc, #208]	@ (80051d8 <HAL_RCC_OscConfig+0x470>)
 8005108:	689b      	ldr	r3, [r3, #8]
 800510a:	f003 030c 	and.w	r3, r3, #12
 800510e:	2b08      	cmp	r3, #8
 8005110:	d05c      	beq.n	80051cc <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	699b      	ldr	r3, [r3, #24]
 8005116:	2b02      	cmp	r3, #2
 8005118:	d141      	bne.n	800519e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800511a:	4b31      	ldr	r3, [pc, #196]	@ (80051e0 <HAL_RCC_OscConfig+0x478>)
 800511c:	2200      	movs	r2, #0
 800511e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005120:	f7fe fa3c 	bl	800359c <HAL_GetTick>
 8005124:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005126:	e008      	b.n	800513a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005128:	f7fe fa38 	bl	800359c <HAL_GetTick>
 800512c:	4602      	mov	r2, r0
 800512e:	693b      	ldr	r3, [r7, #16]
 8005130:	1ad3      	subs	r3, r2, r3
 8005132:	2b02      	cmp	r3, #2
 8005134:	d901      	bls.n	800513a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005136:	2303      	movs	r3, #3
 8005138:	e087      	b.n	800524a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800513a:	4b27      	ldr	r3, [pc, #156]	@ (80051d8 <HAL_RCC_OscConfig+0x470>)
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005142:	2b00      	cmp	r3, #0
 8005144:	d1f0      	bne.n	8005128 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	69da      	ldr	r2, [r3, #28]
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	6a1b      	ldr	r3, [r3, #32]
 800514e:	431a      	orrs	r2, r3
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005154:	019b      	lsls	r3, r3, #6
 8005156:	431a      	orrs	r2, r3
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800515c:	085b      	lsrs	r3, r3, #1
 800515e:	3b01      	subs	r3, #1
 8005160:	041b      	lsls	r3, r3, #16
 8005162:	431a      	orrs	r2, r3
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005168:	061b      	lsls	r3, r3, #24
 800516a:	491b      	ldr	r1, [pc, #108]	@ (80051d8 <HAL_RCC_OscConfig+0x470>)
 800516c:	4313      	orrs	r3, r2
 800516e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005170:	4b1b      	ldr	r3, [pc, #108]	@ (80051e0 <HAL_RCC_OscConfig+0x478>)
 8005172:	2201      	movs	r2, #1
 8005174:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005176:	f7fe fa11 	bl	800359c <HAL_GetTick>
 800517a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800517c:	e008      	b.n	8005190 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800517e:	f7fe fa0d 	bl	800359c <HAL_GetTick>
 8005182:	4602      	mov	r2, r0
 8005184:	693b      	ldr	r3, [r7, #16]
 8005186:	1ad3      	subs	r3, r2, r3
 8005188:	2b02      	cmp	r3, #2
 800518a:	d901      	bls.n	8005190 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800518c:	2303      	movs	r3, #3
 800518e:	e05c      	b.n	800524a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005190:	4b11      	ldr	r3, [pc, #68]	@ (80051d8 <HAL_RCC_OscConfig+0x470>)
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005198:	2b00      	cmp	r3, #0
 800519a:	d0f0      	beq.n	800517e <HAL_RCC_OscConfig+0x416>
 800519c:	e054      	b.n	8005248 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800519e:	4b10      	ldr	r3, [pc, #64]	@ (80051e0 <HAL_RCC_OscConfig+0x478>)
 80051a0:	2200      	movs	r2, #0
 80051a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80051a4:	f7fe f9fa 	bl	800359c <HAL_GetTick>
 80051a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80051aa:	e008      	b.n	80051be <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80051ac:	f7fe f9f6 	bl	800359c <HAL_GetTick>
 80051b0:	4602      	mov	r2, r0
 80051b2:	693b      	ldr	r3, [r7, #16]
 80051b4:	1ad3      	subs	r3, r2, r3
 80051b6:	2b02      	cmp	r3, #2
 80051b8:	d901      	bls.n	80051be <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80051ba:	2303      	movs	r3, #3
 80051bc:	e045      	b.n	800524a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80051be:	4b06      	ldr	r3, [pc, #24]	@ (80051d8 <HAL_RCC_OscConfig+0x470>)
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d1f0      	bne.n	80051ac <HAL_RCC_OscConfig+0x444>
 80051ca:	e03d      	b.n	8005248 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	699b      	ldr	r3, [r3, #24]
 80051d0:	2b01      	cmp	r3, #1
 80051d2:	d107      	bne.n	80051e4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80051d4:	2301      	movs	r3, #1
 80051d6:	e038      	b.n	800524a <HAL_RCC_OscConfig+0x4e2>
 80051d8:	40023800 	.word	0x40023800
 80051dc:	40007000 	.word	0x40007000
 80051e0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80051e4:	4b1b      	ldr	r3, [pc, #108]	@ (8005254 <HAL_RCC_OscConfig+0x4ec>)
 80051e6:	685b      	ldr	r3, [r3, #4]
 80051e8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	699b      	ldr	r3, [r3, #24]
 80051ee:	2b01      	cmp	r3, #1
 80051f0:	d028      	beq.n	8005244 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80051fc:	429a      	cmp	r2, r3
 80051fe:	d121      	bne.n	8005244 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800520a:	429a      	cmp	r2, r3
 800520c:	d11a      	bne.n	8005244 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800520e:	68fa      	ldr	r2, [r7, #12]
 8005210:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8005214:	4013      	ands	r3, r2
 8005216:	687a      	ldr	r2, [r7, #4]
 8005218:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800521a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800521c:	4293      	cmp	r3, r2
 800521e:	d111      	bne.n	8005244 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800522a:	085b      	lsrs	r3, r3, #1
 800522c:	3b01      	subs	r3, #1
 800522e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005230:	429a      	cmp	r2, r3
 8005232:	d107      	bne.n	8005244 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800523e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005240:	429a      	cmp	r2, r3
 8005242:	d001      	beq.n	8005248 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8005244:	2301      	movs	r3, #1
 8005246:	e000      	b.n	800524a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005248:	2300      	movs	r3, #0
}
 800524a:	4618      	mov	r0, r3
 800524c:	3718      	adds	r7, #24
 800524e:	46bd      	mov	sp, r7
 8005250:	bd80      	pop	{r7, pc}
 8005252:	bf00      	nop
 8005254:	40023800 	.word	0x40023800

08005258 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005258:	b580      	push	{r7, lr}
 800525a:	b084      	sub	sp, #16
 800525c:	af00      	add	r7, sp, #0
 800525e:	6078      	str	r0, [r7, #4]
 8005260:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	2b00      	cmp	r3, #0
 8005266:	d101      	bne.n	800526c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005268:	2301      	movs	r3, #1
 800526a:	e0cc      	b.n	8005406 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800526c:	4b68      	ldr	r3, [pc, #416]	@ (8005410 <HAL_RCC_ClockConfig+0x1b8>)
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	f003 0307 	and.w	r3, r3, #7
 8005274:	683a      	ldr	r2, [r7, #0]
 8005276:	429a      	cmp	r2, r3
 8005278:	d90c      	bls.n	8005294 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800527a:	4b65      	ldr	r3, [pc, #404]	@ (8005410 <HAL_RCC_ClockConfig+0x1b8>)
 800527c:	683a      	ldr	r2, [r7, #0]
 800527e:	b2d2      	uxtb	r2, r2
 8005280:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005282:	4b63      	ldr	r3, [pc, #396]	@ (8005410 <HAL_RCC_ClockConfig+0x1b8>)
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	f003 0307 	and.w	r3, r3, #7
 800528a:	683a      	ldr	r2, [r7, #0]
 800528c:	429a      	cmp	r2, r3
 800528e:	d001      	beq.n	8005294 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005290:	2301      	movs	r3, #1
 8005292:	e0b8      	b.n	8005406 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	f003 0302 	and.w	r3, r3, #2
 800529c:	2b00      	cmp	r3, #0
 800529e:	d020      	beq.n	80052e2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	f003 0304 	and.w	r3, r3, #4
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d005      	beq.n	80052b8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80052ac:	4b59      	ldr	r3, [pc, #356]	@ (8005414 <HAL_RCC_ClockConfig+0x1bc>)
 80052ae:	689b      	ldr	r3, [r3, #8]
 80052b0:	4a58      	ldr	r2, [pc, #352]	@ (8005414 <HAL_RCC_ClockConfig+0x1bc>)
 80052b2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80052b6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	f003 0308 	and.w	r3, r3, #8
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d005      	beq.n	80052d0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80052c4:	4b53      	ldr	r3, [pc, #332]	@ (8005414 <HAL_RCC_ClockConfig+0x1bc>)
 80052c6:	689b      	ldr	r3, [r3, #8]
 80052c8:	4a52      	ldr	r2, [pc, #328]	@ (8005414 <HAL_RCC_ClockConfig+0x1bc>)
 80052ca:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80052ce:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80052d0:	4b50      	ldr	r3, [pc, #320]	@ (8005414 <HAL_RCC_ClockConfig+0x1bc>)
 80052d2:	689b      	ldr	r3, [r3, #8]
 80052d4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	689b      	ldr	r3, [r3, #8]
 80052dc:	494d      	ldr	r1, [pc, #308]	@ (8005414 <HAL_RCC_ClockConfig+0x1bc>)
 80052de:	4313      	orrs	r3, r2
 80052e0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	f003 0301 	and.w	r3, r3, #1
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d044      	beq.n	8005378 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	685b      	ldr	r3, [r3, #4]
 80052f2:	2b01      	cmp	r3, #1
 80052f4:	d107      	bne.n	8005306 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80052f6:	4b47      	ldr	r3, [pc, #284]	@ (8005414 <HAL_RCC_ClockConfig+0x1bc>)
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d119      	bne.n	8005336 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005302:	2301      	movs	r3, #1
 8005304:	e07f      	b.n	8005406 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	685b      	ldr	r3, [r3, #4]
 800530a:	2b02      	cmp	r3, #2
 800530c:	d003      	beq.n	8005316 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005312:	2b03      	cmp	r3, #3
 8005314:	d107      	bne.n	8005326 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005316:	4b3f      	ldr	r3, [pc, #252]	@ (8005414 <HAL_RCC_ClockConfig+0x1bc>)
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800531e:	2b00      	cmp	r3, #0
 8005320:	d109      	bne.n	8005336 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005322:	2301      	movs	r3, #1
 8005324:	e06f      	b.n	8005406 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005326:	4b3b      	ldr	r3, [pc, #236]	@ (8005414 <HAL_RCC_ClockConfig+0x1bc>)
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	f003 0302 	and.w	r3, r3, #2
 800532e:	2b00      	cmp	r3, #0
 8005330:	d101      	bne.n	8005336 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005332:	2301      	movs	r3, #1
 8005334:	e067      	b.n	8005406 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005336:	4b37      	ldr	r3, [pc, #220]	@ (8005414 <HAL_RCC_ClockConfig+0x1bc>)
 8005338:	689b      	ldr	r3, [r3, #8]
 800533a:	f023 0203 	bic.w	r2, r3, #3
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	685b      	ldr	r3, [r3, #4]
 8005342:	4934      	ldr	r1, [pc, #208]	@ (8005414 <HAL_RCC_ClockConfig+0x1bc>)
 8005344:	4313      	orrs	r3, r2
 8005346:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005348:	f7fe f928 	bl	800359c <HAL_GetTick>
 800534c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800534e:	e00a      	b.n	8005366 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005350:	f7fe f924 	bl	800359c <HAL_GetTick>
 8005354:	4602      	mov	r2, r0
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	1ad3      	subs	r3, r2, r3
 800535a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800535e:	4293      	cmp	r3, r2
 8005360:	d901      	bls.n	8005366 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005362:	2303      	movs	r3, #3
 8005364:	e04f      	b.n	8005406 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005366:	4b2b      	ldr	r3, [pc, #172]	@ (8005414 <HAL_RCC_ClockConfig+0x1bc>)
 8005368:	689b      	ldr	r3, [r3, #8]
 800536a:	f003 020c 	and.w	r2, r3, #12
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	685b      	ldr	r3, [r3, #4]
 8005372:	009b      	lsls	r3, r3, #2
 8005374:	429a      	cmp	r2, r3
 8005376:	d1eb      	bne.n	8005350 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005378:	4b25      	ldr	r3, [pc, #148]	@ (8005410 <HAL_RCC_ClockConfig+0x1b8>)
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	f003 0307 	and.w	r3, r3, #7
 8005380:	683a      	ldr	r2, [r7, #0]
 8005382:	429a      	cmp	r2, r3
 8005384:	d20c      	bcs.n	80053a0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005386:	4b22      	ldr	r3, [pc, #136]	@ (8005410 <HAL_RCC_ClockConfig+0x1b8>)
 8005388:	683a      	ldr	r2, [r7, #0]
 800538a:	b2d2      	uxtb	r2, r2
 800538c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800538e:	4b20      	ldr	r3, [pc, #128]	@ (8005410 <HAL_RCC_ClockConfig+0x1b8>)
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	f003 0307 	and.w	r3, r3, #7
 8005396:	683a      	ldr	r2, [r7, #0]
 8005398:	429a      	cmp	r2, r3
 800539a:	d001      	beq.n	80053a0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800539c:	2301      	movs	r3, #1
 800539e:	e032      	b.n	8005406 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	f003 0304 	and.w	r3, r3, #4
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d008      	beq.n	80053be <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80053ac:	4b19      	ldr	r3, [pc, #100]	@ (8005414 <HAL_RCC_ClockConfig+0x1bc>)
 80053ae:	689b      	ldr	r3, [r3, #8]
 80053b0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	68db      	ldr	r3, [r3, #12]
 80053b8:	4916      	ldr	r1, [pc, #88]	@ (8005414 <HAL_RCC_ClockConfig+0x1bc>)
 80053ba:	4313      	orrs	r3, r2
 80053bc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	f003 0308 	and.w	r3, r3, #8
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d009      	beq.n	80053de <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80053ca:	4b12      	ldr	r3, [pc, #72]	@ (8005414 <HAL_RCC_ClockConfig+0x1bc>)
 80053cc:	689b      	ldr	r3, [r3, #8]
 80053ce:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	691b      	ldr	r3, [r3, #16]
 80053d6:	00db      	lsls	r3, r3, #3
 80053d8:	490e      	ldr	r1, [pc, #56]	@ (8005414 <HAL_RCC_ClockConfig+0x1bc>)
 80053da:	4313      	orrs	r3, r2
 80053dc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80053de:	f000 f821 	bl	8005424 <HAL_RCC_GetSysClockFreq>
 80053e2:	4602      	mov	r2, r0
 80053e4:	4b0b      	ldr	r3, [pc, #44]	@ (8005414 <HAL_RCC_ClockConfig+0x1bc>)
 80053e6:	689b      	ldr	r3, [r3, #8]
 80053e8:	091b      	lsrs	r3, r3, #4
 80053ea:	f003 030f 	and.w	r3, r3, #15
 80053ee:	490a      	ldr	r1, [pc, #40]	@ (8005418 <HAL_RCC_ClockConfig+0x1c0>)
 80053f0:	5ccb      	ldrb	r3, [r1, r3]
 80053f2:	fa22 f303 	lsr.w	r3, r2, r3
 80053f6:	4a09      	ldr	r2, [pc, #36]	@ (800541c <HAL_RCC_ClockConfig+0x1c4>)
 80053f8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80053fa:	4b09      	ldr	r3, [pc, #36]	@ (8005420 <HAL_RCC_ClockConfig+0x1c8>)
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	4618      	mov	r0, r3
 8005400:	f7fe f888 	bl	8003514 <HAL_InitTick>

  return HAL_OK;
 8005404:	2300      	movs	r3, #0
}
 8005406:	4618      	mov	r0, r3
 8005408:	3710      	adds	r7, #16
 800540a:	46bd      	mov	sp, r7
 800540c:	bd80      	pop	{r7, pc}
 800540e:	bf00      	nop
 8005410:	40023c00 	.word	0x40023c00
 8005414:	40023800 	.word	0x40023800
 8005418:	08009d04 	.word	0x08009d04
 800541c:	20000008 	.word	0x20000008
 8005420:	2000000c 	.word	0x2000000c

08005424 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005424:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005428:	b094      	sub	sp, #80	@ 0x50
 800542a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800542c:	2300      	movs	r3, #0
 800542e:	647b      	str	r3, [r7, #68]	@ 0x44
 8005430:	2300      	movs	r3, #0
 8005432:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005434:	2300      	movs	r3, #0
 8005436:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8005438:	2300      	movs	r3, #0
 800543a:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800543c:	4b79      	ldr	r3, [pc, #484]	@ (8005624 <HAL_RCC_GetSysClockFreq+0x200>)
 800543e:	689b      	ldr	r3, [r3, #8]
 8005440:	f003 030c 	and.w	r3, r3, #12
 8005444:	2b08      	cmp	r3, #8
 8005446:	d00d      	beq.n	8005464 <HAL_RCC_GetSysClockFreq+0x40>
 8005448:	2b08      	cmp	r3, #8
 800544a:	f200 80e1 	bhi.w	8005610 <HAL_RCC_GetSysClockFreq+0x1ec>
 800544e:	2b00      	cmp	r3, #0
 8005450:	d002      	beq.n	8005458 <HAL_RCC_GetSysClockFreq+0x34>
 8005452:	2b04      	cmp	r3, #4
 8005454:	d003      	beq.n	800545e <HAL_RCC_GetSysClockFreq+0x3a>
 8005456:	e0db      	b.n	8005610 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005458:	4b73      	ldr	r3, [pc, #460]	@ (8005628 <HAL_RCC_GetSysClockFreq+0x204>)
 800545a:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 800545c:	e0db      	b.n	8005616 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800545e:	4b73      	ldr	r3, [pc, #460]	@ (800562c <HAL_RCC_GetSysClockFreq+0x208>)
 8005460:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005462:	e0d8      	b.n	8005616 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005464:	4b6f      	ldr	r3, [pc, #444]	@ (8005624 <HAL_RCC_GetSysClockFreq+0x200>)
 8005466:	685b      	ldr	r3, [r3, #4]
 8005468:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800546c:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800546e:	4b6d      	ldr	r3, [pc, #436]	@ (8005624 <HAL_RCC_GetSysClockFreq+0x200>)
 8005470:	685b      	ldr	r3, [r3, #4]
 8005472:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005476:	2b00      	cmp	r3, #0
 8005478:	d063      	beq.n	8005542 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800547a:	4b6a      	ldr	r3, [pc, #424]	@ (8005624 <HAL_RCC_GetSysClockFreq+0x200>)
 800547c:	685b      	ldr	r3, [r3, #4]
 800547e:	099b      	lsrs	r3, r3, #6
 8005480:	2200      	movs	r2, #0
 8005482:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005484:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8005486:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005488:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800548c:	633b      	str	r3, [r7, #48]	@ 0x30
 800548e:	2300      	movs	r3, #0
 8005490:	637b      	str	r3, [r7, #52]	@ 0x34
 8005492:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8005496:	4622      	mov	r2, r4
 8005498:	462b      	mov	r3, r5
 800549a:	f04f 0000 	mov.w	r0, #0
 800549e:	f04f 0100 	mov.w	r1, #0
 80054a2:	0159      	lsls	r1, r3, #5
 80054a4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80054a8:	0150      	lsls	r0, r2, #5
 80054aa:	4602      	mov	r2, r0
 80054ac:	460b      	mov	r3, r1
 80054ae:	4621      	mov	r1, r4
 80054b0:	1a51      	subs	r1, r2, r1
 80054b2:	6139      	str	r1, [r7, #16]
 80054b4:	4629      	mov	r1, r5
 80054b6:	eb63 0301 	sbc.w	r3, r3, r1
 80054ba:	617b      	str	r3, [r7, #20]
 80054bc:	f04f 0200 	mov.w	r2, #0
 80054c0:	f04f 0300 	mov.w	r3, #0
 80054c4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80054c8:	4659      	mov	r1, fp
 80054ca:	018b      	lsls	r3, r1, #6
 80054cc:	4651      	mov	r1, sl
 80054ce:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80054d2:	4651      	mov	r1, sl
 80054d4:	018a      	lsls	r2, r1, #6
 80054d6:	4651      	mov	r1, sl
 80054d8:	ebb2 0801 	subs.w	r8, r2, r1
 80054dc:	4659      	mov	r1, fp
 80054de:	eb63 0901 	sbc.w	r9, r3, r1
 80054e2:	f04f 0200 	mov.w	r2, #0
 80054e6:	f04f 0300 	mov.w	r3, #0
 80054ea:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80054ee:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80054f2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80054f6:	4690      	mov	r8, r2
 80054f8:	4699      	mov	r9, r3
 80054fa:	4623      	mov	r3, r4
 80054fc:	eb18 0303 	adds.w	r3, r8, r3
 8005500:	60bb      	str	r3, [r7, #8]
 8005502:	462b      	mov	r3, r5
 8005504:	eb49 0303 	adc.w	r3, r9, r3
 8005508:	60fb      	str	r3, [r7, #12]
 800550a:	f04f 0200 	mov.w	r2, #0
 800550e:	f04f 0300 	mov.w	r3, #0
 8005512:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005516:	4629      	mov	r1, r5
 8005518:	024b      	lsls	r3, r1, #9
 800551a:	4621      	mov	r1, r4
 800551c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005520:	4621      	mov	r1, r4
 8005522:	024a      	lsls	r2, r1, #9
 8005524:	4610      	mov	r0, r2
 8005526:	4619      	mov	r1, r3
 8005528:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800552a:	2200      	movs	r2, #0
 800552c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800552e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005530:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005534:	f7fa fe48 	bl	80001c8 <__aeabi_uldivmod>
 8005538:	4602      	mov	r2, r0
 800553a:	460b      	mov	r3, r1
 800553c:	4613      	mov	r3, r2
 800553e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005540:	e058      	b.n	80055f4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005542:	4b38      	ldr	r3, [pc, #224]	@ (8005624 <HAL_RCC_GetSysClockFreq+0x200>)
 8005544:	685b      	ldr	r3, [r3, #4]
 8005546:	099b      	lsrs	r3, r3, #6
 8005548:	2200      	movs	r2, #0
 800554a:	4618      	mov	r0, r3
 800554c:	4611      	mov	r1, r2
 800554e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005552:	623b      	str	r3, [r7, #32]
 8005554:	2300      	movs	r3, #0
 8005556:	627b      	str	r3, [r7, #36]	@ 0x24
 8005558:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800555c:	4642      	mov	r2, r8
 800555e:	464b      	mov	r3, r9
 8005560:	f04f 0000 	mov.w	r0, #0
 8005564:	f04f 0100 	mov.w	r1, #0
 8005568:	0159      	lsls	r1, r3, #5
 800556a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800556e:	0150      	lsls	r0, r2, #5
 8005570:	4602      	mov	r2, r0
 8005572:	460b      	mov	r3, r1
 8005574:	4641      	mov	r1, r8
 8005576:	ebb2 0a01 	subs.w	sl, r2, r1
 800557a:	4649      	mov	r1, r9
 800557c:	eb63 0b01 	sbc.w	fp, r3, r1
 8005580:	f04f 0200 	mov.w	r2, #0
 8005584:	f04f 0300 	mov.w	r3, #0
 8005588:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800558c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005590:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005594:	ebb2 040a 	subs.w	r4, r2, sl
 8005598:	eb63 050b 	sbc.w	r5, r3, fp
 800559c:	f04f 0200 	mov.w	r2, #0
 80055a0:	f04f 0300 	mov.w	r3, #0
 80055a4:	00eb      	lsls	r3, r5, #3
 80055a6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80055aa:	00e2      	lsls	r2, r4, #3
 80055ac:	4614      	mov	r4, r2
 80055ae:	461d      	mov	r5, r3
 80055b0:	4643      	mov	r3, r8
 80055b2:	18e3      	adds	r3, r4, r3
 80055b4:	603b      	str	r3, [r7, #0]
 80055b6:	464b      	mov	r3, r9
 80055b8:	eb45 0303 	adc.w	r3, r5, r3
 80055bc:	607b      	str	r3, [r7, #4]
 80055be:	f04f 0200 	mov.w	r2, #0
 80055c2:	f04f 0300 	mov.w	r3, #0
 80055c6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80055ca:	4629      	mov	r1, r5
 80055cc:	028b      	lsls	r3, r1, #10
 80055ce:	4621      	mov	r1, r4
 80055d0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80055d4:	4621      	mov	r1, r4
 80055d6:	028a      	lsls	r2, r1, #10
 80055d8:	4610      	mov	r0, r2
 80055da:	4619      	mov	r1, r3
 80055dc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80055de:	2200      	movs	r2, #0
 80055e0:	61bb      	str	r3, [r7, #24]
 80055e2:	61fa      	str	r2, [r7, #28]
 80055e4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80055e8:	f7fa fdee 	bl	80001c8 <__aeabi_uldivmod>
 80055ec:	4602      	mov	r2, r0
 80055ee:	460b      	mov	r3, r1
 80055f0:	4613      	mov	r3, r2
 80055f2:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80055f4:	4b0b      	ldr	r3, [pc, #44]	@ (8005624 <HAL_RCC_GetSysClockFreq+0x200>)
 80055f6:	685b      	ldr	r3, [r3, #4]
 80055f8:	0c1b      	lsrs	r3, r3, #16
 80055fa:	f003 0303 	and.w	r3, r3, #3
 80055fe:	3301      	adds	r3, #1
 8005600:	005b      	lsls	r3, r3, #1
 8005602:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8005604:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005606:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005608:	fbb2 f3f3 	udiv	r3, r2, r3
 800560c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800560e:	e002      	b.n	8005616 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005610:	4b05      	ldr	r3, [pc, #20]	@ (8005628 <HAL_RCC_GetSysClockFreq+0x204>)
 8005612:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005614:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005616:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8005618:	4618      	mov	r0, r3
 800561a:	3750      	adds	r7, #80	@ 0x50
 800561c:	46bd      	mov	sp, r7
 800561e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005622:	bf00      	nop
 8005624:	40023800 	.word	0x40023800
 8005628:	00f42400 	.word	0x00f42400
 800562c:	007a1200 	.word	0x007a1200

08005630 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005630:	b480      	push	{r7}
 8005632:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005634:	4b03      	ldr	r3, [pc, #12]	@ (8005644 <HAL_RCC_GetHCLKFreq+0x14>)
 8005636:	681b      	ldr	r3, [r3, #0]
}
 8005638:	4618      	mov	r0, r3
 800563a:	46bd      	mov	sp, r7
 800563c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005640:	4770      	bx	lr
 8005642:	bf00      	nop
 8005644:	20000008 	.word	0x20000008

08005648 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005648:	b580      	push	{r7, lr}
 800564a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800564c:	f7ff fff0 	bl	8005630 <HAL_RCC_GetHCLKFreq>
 8005650:	4602      	mov	r2, r0
 8005652:	4b05      	ldr	r3, [pc, #20]	@ (8005668 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005654:	689b      	ldr	r3, [r3, #8]
 8005656:	0a9b      	lsrs	r3, r3, #10
 8005658:	f003 0307 	and.w	r3, r3, #7
 800565c:	4903      	ldr	r1, [pc, #12]	@ (800566c <HAL_RCC_GetPCLK1Freq+0x24>)
 800565e:	5ccb      	ldrb	r3, [r1, r3]
 8005660:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005664:	4618      	mov	r0, r3
 8005666:	bd80      	pop	{r7, pc}
 8005668:	40023800 	.word	0x40023800
 800566c:	08009d14 	.word	0x08009d14

08005670 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005670:	b580      	push	{r7, lr}
 8005672:	b082      	sub	sp, #8
 8005674:	af00      	add	r7, sp, #0
 8005676:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	2b00      	cmp	r3, #0
 800567c:	d101      	bne.n	8005682 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800567e:	2301      	movs	r3, #1
 8005680:	e07b      	b.n	800577a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005686:	2b00      	cmp	r3, #0
 8005688:	d108      	bne.n	800569c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	685b      	ldr	r3, [r3, #4]
 800568e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005692:	d009      	beq.n	80056a8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	2200      	movs	r2, #0
 8005698:	61da      	str	r2, [r3, #28]
 800569a:	e005      	b.n	80056a8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	2200      	movs	r2, #0
 80056a0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	2200      	movs	r2, #0
 80056a6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	2200      	movs	r2, #0
 80056ac:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80056b4:	b2db      	uxtb	r3, r3
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d106      	bne.n	80056c8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	2200      	movs	r2, #0
 80056be:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80056c2:	6878      	ldr	r0, [r7, #4]
 80056c4:	f7fd fd6e 	bl	80031a4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	2202      	movs	r2, #2
 80056cc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	681a      	ldr	r2, [r3, #0]
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80056de:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	685b      	ldr	r3, [r3, #4]
 80056e4:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	689b      	ldr	r3, [r3, #8]
 80056ec:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80056f0:	431a      	orrs	r2, r3
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	68db      	ldr	r3, [r3, #12]
 80056f6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80056fa:	431a      	orrs	r2, r3
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	691b      	ldr	r3, [r3, #16]
 8005700:	f003 0302 	and.w	r3, r3, #2
 8005704:	431a      	orrs	r2, r3
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	695b      	ldr	r3, [r3, #20]
 800570a:	f003 0301 	and.w	r3, r3, #1
 800570e:	431a      	orrs	r2, r3
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	699b      	ldr	r3, [r3, #24]
 8005714:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005718:	431a      	orrs	r2, r3
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	69db      	ldr	r3, [r3, #28]
 800571e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005722:	431a      	orrs	r2, r3
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	6a1b      	ldr	r3, [r3, #32]
 8005728:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800572c:	ea42 0103 	orr.w	r1, r2, r3
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005734:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	430a      	orrs	r2, r1
 800573e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	699b      	ldr	r3, [r3, #24]
 8005744:	0c1b      	lsrs	r3, r3, #16
 8005746:	f003 0104 	and.w	r1, r3, #4
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800574e:	f003 0210 	and.w	r2, r3, #16
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	430a      	orrs	r2, r1
 8005758:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	69da      	ldr	r2, [r3, #28]
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005768:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	2200      	movs	r2, #0
 800576e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	2201      	movs	r2, #1
 8005774:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8005778:	2300      	movs	r3, #0
}
 800577a:	4618      	mov	r0, r3
 800577c:	3708      	adds	r7, #8
 800577e:	46bd      	mov	sp, r7
 8005780:	bd80      	pop	{r7, pc}

08005782 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005782:	b580      	push	{r7, lr}
 8005784:	b088      	sub	sp, #32
 8005786:	af00      	add	r7, sp, #0
 8005788:	60f8      	str	r0, [r7, #12]
 800578a:	60b9      	str	r1, [r7, #8]
 800578c:	603b      	str	r3, [r7, #0]
 800578e:	4613      	mov	r3, r2
 8005790:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005792:	2300      	movs	r3, #0
 8005794:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800579c:	2b01      	cmp	r3, #1
 800579e:	d101      	bne.n	80057a4 <HAL_SPI_Transmit+0x22>
 80057a0:	2302      	movs	r3, #2
 80057a2:	e126      	b.n	80059f2 <HAL_SPI_Transmit+0x270>
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	2201      	movs	r2, #1
 80057a8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80057ac:	f7fd fef6 	bl	800359c <HAL_GetTick>
 80057b0:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80057b2:	88fb      	ldrh	r3, [r7, #6]
 80057b4:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80057bc:	b2db      	uxtb	r3, r3
 80057be:	2b01      	cmp	r3, #1
 80057c0:	d002      	beq.n	80057c8 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80057c2:	2302      	movs	r3, #2
 80057c4:	77fb      	strb	r3, [r7, #31]
    goto error;
 80057c6:	e10b      	b.n	80059e0 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80057c8:	68bb      	ldr	r3, [r7, #8]
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d002      	beq.n	80057d4 <HAL_SPI_Transmit+0x52>
 80057ce:	88fb      	ldrh	r3, [r7, #6]
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d102      	bne.n	80057da <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80057d4:	2301      	movs	r3, #1
 80057d6:	77fb      	strb	r3, [r7, #31]
    goto error;
 80057d8:	e102      	b.n	80059e0 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	2203      	movs	r2, #3
 80057de:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	2200      	movs	r2, #0
 80057e6:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	68ba      	ldr	r2, [r7, #8]
 80057ec:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	88fa      	ldrh	r2, [r7, #6]
 80057f2:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	88fa      	ldrh	r2, [r7, #6]
 80057f8:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	2200      	movs	r2, #0
 80057fe:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	2200      	movs	r2, #0
 8005804:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	2200      	movs	r2, #0
 800580a:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	2200      	movs	r2, #0
 8005810:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	2200      	movs	r2, #0
 8005816:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	689b      	ldr	r3, [r3, #8]
 800581c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005820:	d10f      	bne.n	8005842 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	681a      	ldr	r2, [r3, #0]
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005830:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	681a      	ldr	r2, [r3, #0]
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005840:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800584c:	2b40      	cmp	r3, #64	@ 0x40
 800584e:	d007      	beq.n	8005860 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	681a      	ldr	r2, [r3, #0]
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800585e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	68db      	ldr	r3, [r3, #12]
 8005864:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005868:	d14b      	bne.n	8005902 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	685b      	ldr	r3, [r3, #4]
 800586e:	2b00      	cmp	r3, #0
 8005870:	d002      	beq.n	8005878 <HAL_SPI_Transmit+0xf6>
 8005872:	8afb      	ldrh	r3, [r7, #22]
 8005874:	2b01      	cmp	r3, #1
 8005876:	d13e      	bne.n	80058f6 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800587c:	881a      	ldrh	r2, [r3, #0]
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005888:	1c9a      	adds	r2, r3, #2
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005892:	b29b      	uxth	r3, r3
 8005894:	3b01      	subs	r3, #1
 8005896:	b29a      	uxth	r2, r3
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800589c:	e02b      	b.n	80058f6 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	689b      	ldr	r3, [r3, #8]
 80058a4:	f003 0302 	and.w	r3, r3, #2
 80058a8:	2b02      	cmp	r3, #2
 80058aa:	d112      	bne.n	80058d2 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80058b0:	881a      	ldrh	r2, [r3, #0]
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80058bc:	1c9a      	adds	r2, r3, #2
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80058c6:	b29b      	uxth	r3, r3
 80058c8:	3b01      	subs	r3, #1
 80058ca:	b29a      	uxth	r2, r3
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	86da      	strh	r2, [r3, #54]	@ 0x36
 80058d0:	e011      	b.n	80058f6 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80058d2:	f7fd fe63 	bl	800359c <HAL_GetTick>
 80058d6:	4602      	mov	r2, r0
 80058d8:	69bb      	ldr	r3, [r7, #24]
 80058da:	1ad3      	subs	r3, r2, r3
 80058dc:	683a      	ldr	r2, [r7, #0]
 80058de:	429a      	cmp	r2, r3
 80058e0:	d803      	bhi.n	80058ea <HAL_SPI_Transmit+0x168>
 80058e2:	683b      	ldr	r3, [r7, #0]
 80058e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058e8:	d102      	bne.n	80058f0 <HAL_SPI_Transmit+0x16e>
 80058ea:	683b      	ldr	r3, [r7, #0]
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d102      	bne.n	80058f6 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80058f0:	2303      	movs	r3, #3
 80058f2:	77fb      	strb	r3, [r7, #31]
          goto error;
 80058f4:	e074      	b.n	80059e0 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80058fa:	b29b      	uxth	r3, r3
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d1ce      	bne.n	800589e <HAL_SPI_Transmit+0x11c>
 8005900:	e04c      	b.n	800599c <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	685b      	ldr	r3, [r3, #4]
 8005906:	2b00      	cmp	r3, #0
 8005908:	d002      	beq.n	8005910 <HAL_SPI_Transmit+0x18e>
 800590a:	8afb      	ldrh	r3, [r7, #22]
 800590c:	2b01      	cmp	r3, #1
 800590e:	d140      	bne.n	8005992 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	330c      	adds	r3, #12
 800591a:	7812      	ldrb	r2, [r2, #0]
 800591c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005922:	1c5a      	adds	r2, r3, #1
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800592c:	b29b      	uxth	r3, r3
 800592e:	3b01      	subs	r3, #1
 8005930:	b29a      	uxth	r2, r3
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8005936:	e02c      	b.n	8005992 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	689b      	ldr	r3, [r3, #8]
 800593e:	f003 0302 	and.w	r3, r3, #2
 8005942:	2b02      	cmp	r3, #2
 8005944:	d113      	bne.n	800596e <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	330c      	adds	r3, #12
 8005950:	7812      	ldrb	r2, [r2, #0]
 8005952:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005958:	1c5a      	adds	r2, r3, #1
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005962:	b29b      	uxth	r3, r3
 8005964:	3b01      	subs	r3, #1
 8005966:	b29a      	uxth	r2, r3
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	86da      	strh	r2, [r3, #54]	@ 0x36
 800596c:	e011      	b.n	8005992 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800596e:	f7fd fe15 	bl	800359c <HAL_GetTick>
 8005972:	4602      	mov	r2, r0
 8005974:	69bb      	ldr	r3, [r7, #24]
 8005976:	1ad3      	subs	r3, r2, r3
 8005978:	683a      	ldr	r2, [r7, #0]
 800597a:	429a      	cmp	r2, r3
 800597c:	d803      	bhi.n	8005986 <HAL_SPI_Transmit+0x204>
 800597e:	683b      	ldr	r3, [r7, #0]
 8005980:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005984:	d102      	bne.n	800598c <HAL_SPI_Transmit+0x20a>
 8005986:	683b      	ldr	r3, [r7, #0]
 8005988:	2b00      	cmp	r3, #0
 800598a:	d102      	bne.n	8005992 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 800598c:	2303      	movs	r3, #3
 800598e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005990:	e026      	b.n	80059e0 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005996:	b29b      	uxth	r3, r3
 8005998:	2b00      	cmp	r3, #0
 800599a:	d1cd      	bne.n	8005938 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800599c:	69ba      	ldr	r2, [r7, #24]
 800599e:	6839      	ldr	r1, [r7, #0]
 80059a0:	68f8      	ldr	r0, [r7, #12]
 80059a2:	f000 fbcb 	bl	800613c <SPI_EndRxTxTransaction>
 80059a6:	4603      	mov	r3, r0
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d002      	beq.n	80059b2 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	2220      	movs	r2, #32
 80059b0:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	689b      	ldr	r3, [r3, #8]
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d10a      	bne.n	80059d0 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80059ba:	2300      	movs	r3, #0
 80059bc:	613b      	str	r3, [r7, #16]
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	68db      	ldr	r3, [r3, #12]
 80059c4:	613b      	str	r3, [r7, #16]
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	689b      	ldr	r3, [r3, #8]
 80059cc:	613b      	str	r3, [r7, #16]
 80059ce:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d002      	beq.n	80059de <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80059d8:	2301      	movs	r3, #1
 80059da:	77fb      	strb	r3, [r7, #31]
 80059dc:	e000      	b.n	80059e0 <HAL_SPI_Transmit+0x25e>
  }

error:
 80059de:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	2201      	movs	r2, #1
 80059e4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	2200      	movs	r2, #0
 80059ec:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 80059f0:	7ffb      	ldrb	r3, [r7, #31]
}
 80059f2:	4618      	mov	r0, r3
 80059f4:	3720      	adds	r7, #32
 80059f6:	46bd      	mov	sp, r7
 80059f8:	bd80      	pop	{r7, pc}

080059fa <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80059fa:	b580      	push	{r7, lr}
 80059fc:	b088      	sub	sp, #32
 80059fe:	af02      	add	r7, sp, #8
 8005a00:	60f8      	str	r0, [r7, #12]
 8005a02:	60b9      	str	r1, [r7, #8]
 8005a04:	603b      	str	r3, [r7, #0]
 8005a06:	4613      	mov	r3, r2
 8005a08:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005a0a:	2300      	movs	r3, #0
 8005a0c:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	685b      	ldr	r3, [r3, #4]
 8005a12:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005a16:	d112      	bne.n	8005a3e <HAL_SPI_Receive+0x44>
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	689b      	ldr	r3, [r3, #8]
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d10e      	bne.n	8005a3e <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	2204      	movs	r2, #4
 8005a24:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8005a28:	88fa      	ldrh	r2, [r7, #6]
 8005a2a:	683b      	ldr	r3, [r7, #0]
 8005a2c:	9300      	str	r3, [sp, #0]
 8005a2e:	4613      	mov	r3, r2
 8005a30:	68ba      	ldr	r2, [r7, #8]
 8005a32:	68b9      	ldr	r1, [r7, #8]
 8005a34:	68f8      	ldr	r0, [r7, #12]
 8005a36:	f000 f8f1 	bl	8005c1c <HAL_SPI_TransmitReceive>
 8005a3a:	4603      	mov	r3, r0
 8005a3c:	e0ea      	b.n	8005c14 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8005a44:	2b01      	cmp	r3, #1
 8005a46:	d101      	bne.n	8005a4c <HAL_SPI_Receive+0x52>
 8005a48:	2302      	movs	r3, #2
 8005a4a:	e0e3      	b.n	8005c14 <HAL_SPI_Receive+0x21a>
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	2201      	movs	r2, #1
 8005a50:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005a54:	f7fd fda2 	bl	800359c <HAL_GetTick>
 8005a58:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005a60:	b2db      	uxtb	r3, r3
 8005a62:	2b01      	cmp	r3, #1
 8005a64:	d002      	beq.n	8005a6c <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8005a66:	2302      	movs	r3, #2
 8005a68:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005a6a:	e0ca      	b.n	8005c02 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8005a6c:	68bb      	ldr	r3, [r7, #8]
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d002      	beq.n	8005a78 <HAL_SPI_Receive+0x7e>
 8005a72:	88fb      	ldrh	r3, [r7, #6]
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d102      	bne.n	8005a7e <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8005a78:	2301      	movs	r3, #1
 8005a7a:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005a7c:	e0c1      	b.n	8005c02 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	2204      	movs	r2, #4
 8005a82:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	2200      	movs	r2, #0
 8005a8a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	68ba      	ldr	r2, [r7, #8]
 8005a90:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	88fa      	ldrh	r2, [r7, #6]
 8005a96:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	88fa      	ldrh	r2, [r7, #6]
 8005a9c:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	2200      	movs	r2, #0
 8005aa2:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	2200      	movs	r2, #0
 8005aa8:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	2200      	movs	r2, #0
 8005aae:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	2200      	movs	r2, #0
 8005ab4:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	2200      	movs	r2, #0
 8005aba:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	689b      	ldr	r3, [r3, #8]
 8005ac0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005ac4:	d10f      	bne.n	8005ae6 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	681a      	ldr	r2, [r3, #0]
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005ad4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	681a      	ldr	r2, [r3, #0]
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8005ae4:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005af0:	2b40      	cmp	r3, #64	@ 0x40
 8005af2:	d007      	beq.n	8005b04 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	681a      	ldr	r2, [r3, #0]
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005b02:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	68db      	ldr	r3, [r3, #12]
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d162      	bne.n	8005bd2 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8005b0c:	e02e      	b.n	8005b6c <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	689b      	ldr	r3, [r3, #8]
 8005b14:	f003 0301 	and.w	r3, r3, #1
 8005b18:	2b01      	cmp	r3, #1
 8005b1a:	d115      	bne.n	8005b48 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	f103 020c 	add.w	r2, r3, #12
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b28:	7812      	ldrb	r2, [r2, #0]
 8005b2a:	b2d2      	uxtb	r2, r2
 8005b2c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b32:	1c5a      	adds	r2, r3, #1
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005b3c:	b29b      	uxth	r3, r3
 8005b3e:	3b01      	subs	r3, #1
 8005b40:	b29a      	uxth	r2, r3
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005b46:	e011      	b.n	8005b6c <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005b48:	f7fd fd28 	bl	800359c <HAL_GetTick>
 8005b4c:	4602      	mov	r2, r0
 8005b4e:	693b      	ldr	r3, [r7, #16]
 8005b50:	1ad3      	subs	r3, r2, r3
 8005b52:	683a      	ldr	r2, [r7, #0]
 8005b54:	429a      	cmp	r2, r3
 8005b56:	d803      	bhi.n	8005b60 <HAL_SPI_Receive+0x166>
 8005b58:	683b      	ldr	r3, [r7, #0]
 8005b5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b5e:	d102      	bne.n	8005b66 <HAL_SPI_Receive+0x16c>
 8005b60:	683b      	ldr	r3, [r7, #0]
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d102      	bne.n	8005b6c <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8005b66:	2303      	movs	r3, #3
 8005b68:	75fb      	strb	r3, [r7, #23]
          goto error;
 8005b6a:	e04a      	b.n	8005c02 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005b70:	b29b      	uxth	r3, r3
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d1cb      	bne.n	8005b0e <HAL_SPI_Receive+0x114>
 8005b76:	e031      	b.n	8005bdc <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	689b      	ldr	r3, [r3, #8]
 8005b7e:	f003 0301 	and.w	r3, r3, #1
 8005b82:	2b01      	cmp	r3, #1
 8005b84:	d113      	bne.n	8005bae <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	68da      	ldr	r2, [r3, #12]
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b90:	b292      	uxth	r2, r2
 8005b92:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b98:	1c9a      	adds	r2, r3, #2
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005ba2:	b29b      	uxth	r3, r3
 8005ba4:	3b01      	subs	r3, #1
 8005ba6:	b29a      	uxth	r2, r3
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005bac:	e011      	b.n	8005bd2 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005bae:	f7fd fcf5 	bl	800359c <HAL_GetTick>
 8005bb2:	4602      	mov	r2, r0
 8005bb4:	693b      	ldr	r3, [r7, #16]
 8005bb6:	1ad3      	subs	r3, r2, r3
 8005bb8:	683a      	ldr	r2, [r7, #0]
 8005bba:	429a      	cmp	r2, r3
 8005bbc:	d803      	bhi.n	8005bc6 <HAL_SPI_Receive+0x1cc>
 8005bbe:	683b      	ldr	r3, [r7, #0]
 8005bc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bc4:	d102      	bne.n	8005bcc <HAL_SPI_Receive+0x1d2>
 8005bc6:	683b      	ldr	r3, [r7, #0]
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d102      	bne.n	8005bd2 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8005bcc:	2303      	movs	r3, #3
 8005bce:	75fb      	strb	r3, [r7, #23]
          goto error;
 8005bd0:	e017      	b.n	8005c02 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005bd6:	b29b      	uxth	r3, r3
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d1cd      	bne.n	8005b78 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005bdc:	693a      	ldr	r2, [r7, #16]
 8005bde:	6839      	ldr	r1, [r7, #0]
 8005be0:	68f8      	ldr	r0, [r7, #12]
 8005be2:	f000 fa45 	bl	8006070 <SPI_EndRxTransaction>
 8005be6:	4603      	mov	r3, r0
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d002      	beq.n	8005bf2 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	2220      	movs	r2, #32
 8005bf0:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d002      	beq.n	8005c00 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8005bfa:	2301      	movs	r3, #1
 8005bfc:	75fb      	strb	r3, [r7, #23]
 8005bfe:	e000      	b.n	8005c02 <HAL_SPI_Receive+0x208>
  }

error :
 8005c00:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	2201      	movs	r2, #1
 8005c06:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  __HAL_UNLOCK(hspi);
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	2200      	movs	r2, #0
 8005c0e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8005c12:	7dfb      	ldrb	r3, [r7, #23]
}
 8005c14:	4618      	mov	r0, r3
 8005c16:	3718      	adds	r7, #24
 8005c18:	46bd      	mov	sp, r7
 8005c1a:	bd80      	pop	{r7, pc}

08005c1c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8005c1c:	b580      	push	{r7, lr}
 8005c1e:	b08c      	sub	sp, #48	@ 0x30
 8005c20:	af00      	add	r7, sp, #0
 8005c22:	60f8      	str	r0, [r7, #12]
 8005c24:	60b9      	str	r1, [r7, #8]
 8005c26:	607a      	str	r2, [r7, #4]
 8005c28:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005c2a:	2301      	movs	r3, #1
 8005c2c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8005c2e:	2300      	movs	r3, #0
 8005c30:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8005c3a:	2b01      	cmp	r3, #1
 8005c3c:	d101      	bne.n	8005c42 <HAL_SPI_TransmitReceive+0x26>
 8005c3e:	2302      	movs	r3, #2
 8005c40:	e18a      	b.n	8005f58 <HAL_SPI_TransmitReceive+0x33c>
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	2201      	movs	r2, #1
 8005c46:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005c4a:	f7fd fca7 	bl	800359c <HAL_GetTick>
 8005c4e:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005c56:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  tmp_mode            = hspi->Init.Mode;
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	685b      	ldr	r3, [r3, #4]
 8005c5e:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8005c60:	887b      	ldrh	r3, [r7, #2]
 8005c62:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005c64:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005c68:	2b01      	cmp	r3, #1
 8005c6a:	d00f      	beq.n	8005c8c <HAL_SPI_TransmitReceive+0x70>
 8005c6c:	69fb      	ldr	r3, [r7, #28]
 8005c6e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005c72:	d107      	bne.n	8005c84 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	689b      	ldr	r3, [r3, #8]
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d103      	bne.n	8005c84 <HAL_SPI_TransmitReceive+0x68>
 8005c7c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005c80:	2b04      	cmp	r3, #4
 8005c82:	d003      	beq.n	8005c8c <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8005c84:	2302      	movs	r3, #2
 8005c86:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 8005c8a:	e15b      	b.n	8005f44 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005c8c:	68bb      	ldr	r3, [r7, #8]
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d005      	beq.n	8005c9e <HAL_SPI_TransmitReceive+0x82>
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d002      	beq.n	8005c9e <HAL_SPI_TransmitReceive+0x82>
 8005c98:	887b      	ldrh	r3, [r7, #2]
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d103      	bne.n	8005ca6 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8005c9e:	2301      	movs	r3, #1
 8005ca0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 8005ca4:	e14e      	b.n	8005f44 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005cac:	b2db      	uxtb	r3, r3
 8005cae:	2b04      	cmp	r3, #4
 8005cb0:	d003      	beq.n	8005cba <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	2205      	movs	r2, #5
 8005cb6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	2200      	movs	r2, #0
 8005cbe:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	687a      	ldr	r2, [r7, #4]
 8005cc4:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	887a      	ldrh	r2, [r7, #2]
 8005cca:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	887a      	ldrh	r2, [r7, #2]
 8005cd0:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	68ba      	ldr	r2, [r7, #8]
 8005cd6:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	887a      	ldrh	r2, [r7, #2]
 8005cdc:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	887a      	ldrh	r2, [r7, #2]
 8005ce2:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	2200      	movs	r2, #0
 8005ce8:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	2200      	movs	r2, #0
 8005cee:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005cfa:	2b40      	cmp	r3, #64	@ 0x40
 8005cfc:	d007      	beq.n	8005d0e <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	681a      	ldr	r2, [r3, #0]
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005d0c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	68db      	ldr	r3, [r3, #12]
 8005d12:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005d16:	d178      	bne.n	8005e0a <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	685b      	ldr	r3, [r3, #4]
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d002      	beq.n	8005d26 <HAL_SPI_TransmitReceive+0x10a>
 8005d20:	8b7b      	ldrh	r3, [r7, #26]
 8005d22:	2b01      	cmp	r3, #1
 8005d24:	d166      	bne.n	8005df4 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005d2a:	881a      	ldrh	r2, [r3, #0]
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005d36:	1c9a      	adds	r2, r3, #2
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005d40:	b29b      	uxth	r3, r3
 8005d42:	3b01      	subs	r3, #1
 8005d44:	b29a      	uxth	r2, r3
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005d4a:	e053      	b.n	8005df4 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	689b      	ldr	r3, [r3, #8]
 8005d52:	f003 0302 	and.w	r3, r3, #2
 8005d56:	2b02      	cmp	r3, #2
 8005d58:	d11b      	bne.n	8005d92 <HAL_SPI_TransmitReceive+0x176>
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005d5e:	b29b      	uxth	r3, r3
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d016      	beq.n	8005d92 <HAL_SPI_TransmitReceive+0x176>
 8005d64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005d66:	2b01      	cmp	r3, #1
 8005d68:	d113      	bne.n	8005d92 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005d6e:	881a      	ldrh	r2, [r3, #0]
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005d7a:	1c9a      	adds	r2, r3, #2
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005d84:	b29b      	uxth	r3, r3
 8005d86:	3b01      	subs	r3, #1
 8005d88:	b29a      	uxth	r2, r3
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005d8e:	2300      	movs	r3, #0
 8005d90:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	689b      	ldr	r3, [r3, #8]
 8005d98:	f003 0301 	and.w	r3, r3, #1
 8005d9c:	2b01      	cmp	r3, #1
 8005d9e:	d119      	bne.n	8005dd4 <HAL_SPI_TransmitReceive+0x1b8>
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005da4:	b29b      	uxth	r3, r3
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d014      	beq.n	8005dd4 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	68da      	ldr	r2, [r3, #12]
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005db4:	b292      	uxth	r2, r2
 8005db6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005dbc:	1c9a      	adds	r2, r3, #2
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005dc6:	b29b      	uxth	r3, r3
 8005dc8:	3b01      	subs	r3, #1
 8005dca:	b29a      	uxth	r2, r3
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005dd0:	2301      	movs	r3, #1
 8005dd2:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005dd4:	f7fd fbe2 	bl	800359c <HAL_GetTick>
 8005dd8:	4602      	mov	r2, r0
 8005dda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ddc:	1ad3      	subs	r3, r2, r3
 8005dde:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005de0:	429a      	cmp	r2, r3
 8005de2:	d807      	bhi.n	8005df4 <HAL_SPI_TransmitReceive+0x1d8>
 8005de4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005de6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005dea:	d003      	beq.n	8005df4 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8005dec:	2303      	movs	r3, #3
 8005dee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        goto error;
 8005df2:	e0a7      	b.n	8005f44 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005df8:	b29b      	uxth	r3, r3
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d1a6      	bne.n	8005d4c <HAL_SPI_TransmitReceive+0x130>
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005e02:	b29b      	uxth	r3, r3
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d1a1      	bne.n	8005d4c <HAL_SPI_TransmitReceive+0x130>
 8005e08:	e07c      	b.n	8005f04 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	685b      	ldr	r3, [r3, #4]
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d002      	beq.n	8005e18 <HAL_SPI_TransmitReceive+0x1fc>
 8005e12:	8b7b      	ldrh	r3, [r7, #26]
 8005e14:	2b01      	cmp	r3, #1
 8005e16:	d16b      	bne.n	8005ef0 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	330c      	adds	r3, #12
 8005e22:	7812      	ldrb	r2, [r2, #0]
 8005e24:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e2a:	1c5a      	adds	r2, r3, #1
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005e34:	b29b      	uxth	r3, r3
 8005e36:	3b01      	subs	r3, #1
 8005e38:	b29a      	uxth	r2, r3
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005e3e:	e057      	b.n	8005ef0 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	689b      	ldr	r3, [r3, #8]
 8005e46:	f003 0302 	and.w	r3, r3, #2
 8005e4a:	2b02      	cmp	r3, #2
 8005e4c:	d11c      	bne.n	8005e88 <HAL_SPI_TransmitReceive+0x26c>
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005e52:	b29b      	uxth	r3, r3
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d017      	beq.n	8005e88 <HAL_SPI_TransmitReceive+0x26c>
 8005e58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e5a:	2b01      	cmp	r3, #1
 8005e5c:	d114      	bne.n	8005e88 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	330c      	adds	r3, #12
 8005e68:	7812      	ldrb	r2, [r2, #0]
 8005e6a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e70:	1c5a      	adds	r2, r3, #1
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005e7a:	b29b      	uxth	r3, r3
 8005e7c:	3b01      	subs	r3, #1
 8005e7e:	b29a      	uxth	r2, r3
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005e84:	2300      	movs	r3, #0
 8005e86:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	689b      	ldr	r3, [r3, #8]
 8005e8e:	f003 0301 	and.w	r3, r3, #1
 8005e92:	2b01      	cmp	r3, #1
 8005e94:	d119      	bne.n	8005eca <HAL_SPI_TransmitReceive+0x2ae>
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005e9a:	b29b      	uxth	r3, r3
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d014      	beq.n	8005eca <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	68da      	ldr	r2, [r3, #12]
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005eaa:	b2d2      	uxtb	r2, r2
 8005eac:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005eb2:	1c5a      	adds	r2, r3, #1
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005ebc:	b29b      	uxth	r3, r3
 8005ebe:	3b01      	subs	r3, #1
 8005ec0:	b29a      	uxth	r2, r3
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005ec6:	2301      	movs	r3, #1
 8005ec8:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005eca:	f7fd fb67 	bl	800359c <HAL_GetTick>
 8005ece:	4602      	mov	r2, r0
 8005ed0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ed2:	1ad3      	subs	r3, r2, r3
 8005ed4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005ed6:	429a      	cmp	r2, r3
 8005ed8:	d803      	bhi.n	8005ee2 <HAL_SPI_TransmitReceive+0x2c6>
 8005eda:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005edc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ee0:	d102      	bne.n	8005ee8 <HAL_SPI_TransmitReceive+0x2cc>
 8005ee2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d103      	bne.n	8005ef0 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8005ee8:	2303      	movs	r3, #3
 8005eea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        goto error;
 8005eee:	e029      	b.n	8005f44 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005ef4:	b29b      	uxth	r3, r3
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d1a2      	bne.n	8005e40 <HAL_SPI_TransmitReceive+0x224>
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005efe:	b29b      	uxth	r3, r3
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d19d      	bne.n	8005e40 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005f04:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005f06:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8005f08:	68f8      	ldr	r0, [r7, #12]
 8005f0a:	f000 f917 	bl	800613c <SPI_EndRxTxTransaction>
 8005f0e:	4603      	mov	r3, r0
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d006      	beq.n	8005f22 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8005f14:	2301      	movs	r3, #1
 8005f16:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	2220      	movs	r2, #32
 8005f1e:	655a      	str	r2, [r3, #84]	@ 0x54
    goto error;
 8005f20:	e010      	b.n	8005f44 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	689b      	ldr	r3, [r3, #8]
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d10b      	bne.n	8005f42 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005f2a:	2300      	movs	r3, #0
 8005f2c:	617b      	str	r3, [r7, #20]
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	68db      	ldr	r3, [r3, #12]
 8005f34:	617b      	str	r3, [r7, #20]
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	689b      	ldr	r3, [r3, #8]
 8005f3c:	617b      	str	r3, [r7, #20]
 8005f3e:	697b      	ldr	r3, [r7, #20]
 8005f40:	e000      	b.n	8005f44 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8005f42:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	2201      	movs	r2, #1
 8005f48:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  __HAL_UNLOCK(hspi);
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	2200      	movs	r2, #0
 8005f50:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8005f54:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
}
 8005f58:	4618      	mov	r0, r3
 8005f5a:	3730      	adds	r7, #48	@ 0x30
 8005f5c:	46bd      	mov	sp, r7
 8005f5e:	bd80      	pop	{r7, pc}

08005f60 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005f60:	b580      	push	{r7, lr}
 8005f62:	b088      	sub	sp, #32
 8005f64:	af00      	add	r7, sp, #0
 8005f66:	60f8      	str	r0, [r7, #12]
 8005f68:	60b9      	str	r1, [r7, #8]
 8005f6a:	603b      	str	r3, [r7, #0]
 8005f6c:	4613      	mov	r3, r2
 8005f6e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005f70:	f7fd fb14 	bl	800359c <HAL_GetTick>
 8005f74:	4602      	mov	r2, r0
 8005f76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f78:	1a9b      	subs	r3, r3, r2
 8005f7a:	683a      	ldr	r2, [r7, #0]
 8005f7c:	4413      	add	r3, r2
 8005f7e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005f80:	f7fd fb0c 	bl	800359c <HAL_GetTick>
 8005f84:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005f86:	4b39      	ldr	r3, [pc, #228]	@ (800606c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	015b      	lsls	r3, r3, #5
 8005f8c:	0d1b      	lsrs	r3, r3, #20
 8005f8e:	69fa      	ldr	r2, [r7, #28]
 8005f90:	fb02 f303 	mul.w	r3, r2, r3
 8005f94:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005f96:	e054      	b.n	8006042 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005f98:	683b      	ldr	r3, [r7, #0]
 8005f9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f9e:	d050      	beq.n	8006042 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005fa0:	f7fd fafc 	bl	800359c <HAL_GetTick>
 8005fa4:	4602      	mov	r2, r0
 8005fa6:	69bb      	ldr	r3, [r7, #24]
 8005fa8:	1ad3      	subs	r3, r2, r3
 8005faa:	69fa      	ldr	r2, [r7, #28]
 8005fac:	429a      	cmp	r2, r3
 8005fae:	d902      	bls.n	8005fb6 <SPI_WaitFlagStateUntilTimeout+0x56>
 8005fb0:	69fb      	ldr	r3, [r7, #28]
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d13d      	bne.n	8006032 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	685a      	ldr	r2, [r3, #4]
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8005fc4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	685b      	ldr	r3, [r3, #4]
 8005fca:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005fce:	d111      	bne.n	8005ff4 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	689b      	ldr	r3, [r3, #8]
 8005fd4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005fd8:	d004      	beq.n	8005fe4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	689b      	ldr	r3, [r3, #8]
 8005fde:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005fe2:	d107      	bne.n	8005ff4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	681a      	ldr	r2, [r3, #0]
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005ff2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ff8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005ffc:	d10f      	bne.n	800601e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	681a      	ldr	r2, [r3, #0]
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800600c:	601a      	str	r2, [r3, #0]
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	681a      	ldr	r2, [r3, #0]
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800601c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	2201      	movs	r2, #1
 8006022:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	2200      	movs	r2, #0
 800602a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 800602e:	2303      	movs	r3, #3
 8006030:	e017      	b.n	8006062 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8006032:	697b      	ldr	r3, [r7, #20]
 8006034:	2b00      	cmp	r3, #0
 8006036:	d101      	bne.n	800603c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006038:	2300      	movs	r3, #0
 800603a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800603c:	697b      	ldr	r3, [r7, #20]
 800603e:	3b01      	subs	r3, #1
 8006040:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	689a      	ldr	r2, [r3, #8]
 8006048:	68bb      	ldr	r3, [r7, #8]
 800604a:	4013      	ands	r3, r2
 800604c:	68ba      	ldr	r2, [r7, #8]
 800604e:	429a      	cmp	r2, r3
 8006050:	bf0c      	ite	eq
 8006052:	2301      	moveq	r3, #1
 8006054:	2300      	movne	r3, #0
 8006056:	b2db      	uxtb	r3, r3
 8006058:	461a      	mov	r2, r3
 800605a:	79fb      	ldrb	r3, [r7, #7]
 800605c:	429a      	cmp	r2, r3
 800605e:	d19b      	bne.n	8005f98 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006060:	2300      	movs	r3, #0
}
 8006062:	4618      	mov	r0, r3
 8006064:	3720      	adds	r7, #32
 8006066:	46bd      	mov	sp, r7
 8006068:	bd80      	pop	{r7, pc}
 800606a:	bf00      	nop
 800606c:	20000008 	.word	0x20000008

08006070 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8006070:	b580      	push	{r7, lr}
 8006072:	b086      	sub	sp, #24
 8006074:	af02      	add	r7, sp, #8
 8006076:	60f8      	str	r0, [r7, #12]
 8006078:	60b9      	str	r1, [r7, #8]
 800607a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	685b      	ldr	r3, [r3, #4]
 8006080:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006084:	d111      	bne.n	80060aa <SPI_EndRxTransaction+0x3a>
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	689b      	ldr	r3, [r3, #8]
 800608a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800608e:	d004      	beq.n	800609a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	689b      	ldr	r3, [r3, #8]
 8006094:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006098:	d107      	bne.n	80060aa <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	681a      	ldr	r2, [r3, #0]
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80060a8:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	685b      	ldr	r3, [r3, #4]
 80060ae:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80060b2:	d12a      	bne.n	800610a <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	689b      	ldr	r3, [r3, #8]
 80060b8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80060bc:	d012      	beq.n	80060e4 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	9300      	str	r3, [sp, #0]
 80060c2:	68bb      	ldr	r3, [r7, #8]
 80060c4:	2200      	movs	r2, #0
 80060c6:	2180      	movs	r1, #128	@ 0x80
 80060c8:	68f8      	ldr	r0, [r7, #12]
 80060ca:	f7ff ff49 	bl	8005f60 <SPI_WaitFlagStateUntilTimeout>
 80060ce:	4603      	mov	r3, r0
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d02d      	beq.n	8006130 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80060d8:	f043 0220 	orr.w	r2, r3, #32
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 80060e0:	2303      	movs	r3, #3
 80060e2:	e026      	b.n	8006132 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	9300      	str	r3, [sp, #0]
 80060e8:	68bb      	ldr	r3, [r7, #8]
 80060ea:	2200      	movs	r2, #0
 80060ec:	2101      	movs	r1, #1
 80060ee:	68f8      	ldr	r0, [r7, #12]
 80060f0:	f7ff ff36 	bl	8005f60 <SPI_WaitFlagStateUntilTimeout>
 80060f4:	4603      	mov	r3, r0
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d01a      	beq.n	8006130 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80060fe:	f043 0220 	orr.w	r2, r3, #32
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8006106:	2303      	movs	r3, #3
 8006108:	e013      	b.n	8006132 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	9300      	str	r3, [sp, #0]
 800610e:	68bb      	ldr	r3, [r7, #8]
 8006110:	2200      	movs	r2, #0
 8006112:	2101      	movs	r1, #1
 8006114:	68f8      	ldr	r0, [r7, #12]
 8006116:	f7ff ff23 	bl	8005f60 <SPI_WaitFlagStateUntilTimeout>
 800611a:	4603      	mov	r3, r0
 800611c:	2b00      	cmp	r3, #0
 800611e:	d007      	beq.n	8006130 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006124:	f043 0220 	orr.w	r2, r3, #32
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 800612c:	2303      	movs	r3, #3
 800612e:	e000      	b.n	8006132 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8006130:	2300      	movs	r3, #0
}
 8006132:	4618      	mov	r0, r3
 8006134:	3710      	adds	r7, #16
 8006136:	46bd      	mov	sp, r7
 8006138:	bd80      	pop	{r7, pc}
	...

0800613c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800613c:	b580      	push	{r7, lr}
 800613e:	b088      	sub	sp, #32
 8006140:	af02      	add	r7, sp, #8
 8006142:	60f8      	str	r0, [r7, #12]
 8006144:	60b9      	str	r1, [r7, #8]
 8006146:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8006148:	4b1b      	ldr	r3, [pc, #108]	@ (80061b8 <SPI_EndRxTxTransaction+0x7c>)
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	4a1b      	ldr	r2, [pc, #108]	@ (80061bc <SPI_EndRxTxTransaction+0x80>)
 800614e:	fba2 2303 	umull	r2, r3, r2, r3
 8006152:	0d5b      	lsrs	r3, r3, #21
 8006154:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8006158:	fb02 f303 	mul.w	r3, r2, r3
 800615c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	685b      	ldr	r3, [r3, #4]
 8006162:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006166:	d112      	bne.n	800618e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	9300      	str	r3, [sp, #0]
 800616c:	68bb      	ldr	r3, [r7, #8]
 800616e:	2200      	movs	r2, #0
 8006170:	2180      	movs	r1, #128	@ 0x80
 8006172:	68f8      	ldr	r0, [r7, #12]
 8006174:	f7ff fef4 	bl	8005f60 <SPI_WaitFlagStateUntilTimeout>
 8006178:	4603      	mov	r3, r0
 800617a:	2b00      	cmp	r3, #0
 800617c:	d016      	beq.n	80061ac <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006182:	f043 0220 	orr.w	r2, r3, #32
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 800618a:	2303      	movs	r3, #3
 800618c:	e00f      	b.n	80061ae <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800618e:	697b      	ldr	r3, [r7, #20]
 8006190:	2b00      	cmp	r3, #0
 8006192:	d00a      	beq.n	80061aa <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8006194:	697b      	ldr	r3, [r7, #20]
 8006196:	3b01      	subs	r3, #1
 8006198:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	689b      	ldr	r3, [r3, #8]
 80061a0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80061a4:	2b80      	cmp	r3, #128	@ 0x80
 80061a6:	d0f2      	beq.n	800618e <SPI_EndRxTxTransaction+0x52>
 80061a8:	e000      	b.n	80061ac <SPI_EndRxTxTransaction+0x70>
        break;
 80061aa:	bf00      	nop
  }

  return HAL_OK;
 80061ac:	2300      	movs	r3, #0
}
 80061ae:	4618      	mov	r0, r3
 80061b0:	3718      	adds	r7, #24
 80061b2:	46bd      	mov	sp, r7
 80061b4:	bd80      	pop	{r7, pc}
 80061b6:	bf00      	nop
 80061b8:	20000008 	.word	0x20000008
 80061bc:	165e9f81 	.word	0x165e9f81

080061c0 <HAL_SRAM_Init>:
  * @param  Timing Pointer to SRAM control timing structure 
  * @param  ExtTiming Pointer to SRAM extended mode timing structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing, FMC_NORSRAM_TimingTypeDef *ExtTiming)
{ 
 80061c0:	b580      	push	{r7, lr}
 80061c2:	b084      	sub	sp, #16
 80061c4:	af00      	add	r7, sp, #0
 80061c6:	60f8      	str	r0, [r7, #12]
 80061c8:	60b9      	str	r1, [r7, #8]
 80061ca:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if(hsram == NULL)
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d101      	bne.n	80061d6 <HAL_SRAM_Init+0x16>
  {
     return HAL_ERROR;
 80061d2:	2301      	movs	r3, #1
 80061d4:	e034      	b.n	8006240 <HAL_SRAM_Init+0x80>
  }
  
  if(hsram->State == HAL_SRAM_STATE_RESET)
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	f893 3049 	ldrb.w	r3, [r3, #73]	@ 0x49
 80061dc:	b2db      	uxtb	r3, r3
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d106      	bne.n	80061f0 <HAL_SRAM_Init+0x30>
  {  
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	2200      	movs	r2, #0
 80061e6:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 80061ea:	68f8      	ldr	r0, [r7, #12]
 80061ec:	f7fc f80a 	bl	8002204 <HAL_SRAM_MspInit>
#endif
  }
  
  /* Initialize SRAM control Interface */
  FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	681a      	ldr	r2, [r3, #0]
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	3308      	adds	r3, #8
 80061f8:	4619      	mov	r1, r3
 80061fa:	4610      	mov	r0, r2
 80061fc:	f000 fca6 	bl	8006b4c <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank); 
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	6818      	ldr	r0, [r3, #0]
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	689b      	ldr	r3, [r3, #8]
 8006208:	461a      	mov	r2, r3
 800620a:	68b9      	ldr	r1, [r7, #8]
 800620c:	f000 fcf0 	bl	8006bf0 <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,  hsram->Init.ExtendedMode);  
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	6858      	ldr	r0, [r3, #4]
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	689a      	ldr	r2, [r3, #8]
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800621c:	6879      	ldr	r1, [r7, #4]
 800621e:	f000 fd25 	bl	8006c6c <FSMC_NORSRAM_Extended_Timing_Init>
  
  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank); 
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	68fa      	ldr	r2, [r7, #12]
 8006228:	6892      	ldr	r2, [r2, #8]
 800622a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	68fa      	ldr	r2, [r7, #12]
 8006234:	6892      	ldr	r2, [r2, #8]
 8006236:	f041 0101 	orr.w	r1, r1, #1
 800623a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  
  return HAL_OK;
 800623e:	2300      	movs	r3, #0
}
 8006240:	4618      	mov	r0, r3
 8006242:	3710      	adds	r7, #16
 8006244:	46bd      	mov	sp, r7
 8006246:	bd80      	pop	{r7, pc}

08006248 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006248:	b580      	push	{r7, lr}
 800624a:	b082      	sub	sp, #8
 800624c:	af00      	add	r7, sp, #0
 800624e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	2b00      	cmp	r3, #0
 8006254:	d101      	bne.n	800625a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006256:	2301      	movs	r3, #1
 8006258:	e041      	b.n	80062de <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006260:	b2db      	uxtb	r3, r3
 8006262:	2b00      	cmp	r3, #0
 8006264:	d106      	bne.n	8006274 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	2200      	movs	r2, #0
 800626a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800626e:	6878      	ldr	r0, [r7, #4]
 8006270:	f7fd f8a0 	bl	80033b4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	2202      	movs	r2, #2
 8006278:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681a      	ldr	r2, [r3, #0]
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	3304      	adds	r3, #4
 8006284:	4619      	mov	r1, r3
 8006286:	4610      	mov	r0, r2
 8006288:	f000 fa96 	bl	80067b8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	2201      	movs	r2, #1
 8006290:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	2201      	movs	r2, #1
 8006298:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	2201      	movs	r2, #1
 80062a0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	2201      	movs	r2, #1
 80062a8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	2201      	movs	r2, #1
 80062b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	2201      	movs	r2, #1
 80062b8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	2201      	movs	r2, #1
 80062c0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	2201      	movs	r2, #1
 80062c8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	2201      	movs	r2, #1
 80062d0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	2201      	movs	r2, #1
 80062d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80062dc:	2300      	movs	r3, #0
}
 80062de:	4618      	mov	r0, r3
 80062e0:	3708      	adds	r7, #8
 80062e2:	46bd      	mov	sp, r7
 80062e4:	bd80      	pop	{r7, pc}
	...

080062e8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80062e8:	b480      	push	{r7}
 80062ea:	b085      	sub	sp, #20
 80062ec:	af00      	add	r7, sp, #0
 80062ee:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80062f6:	b2db      	uxtb	r3, r3
 80062f8:	2b01      	cmp	r3, #1
 80062fa:	d001      	beq.n	8006300 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80062fc:	2301      	movs	r3, #1
 80062fe:	e04e      	b.n	800639e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	2202      	movs	r2, #2
 8006304:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	68da      	ldr	r2, [r3, #12]
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	f042 0201 	orr.w	r2, r2, #1
 8006316:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	4a23      	ldr	r2, [pc, #140]	@ (80063ac <HAL_TIM_Base_Start_IT+0xc4>)
 800631e:	4293      	cmp	r3, r2
 8006320:	d022      	beq.n	8006368 <HAL_TIM_Base_Start_IT+0x80>
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800632a:	d01d      	beq.n	8006368 <HAL_TIM_Base_Start_IT+0x80>
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	4a1f      	ldr	r2, [pc, #124]	@ (80063b0 <HAL_TIM_Base_Start_IT+0xc8>)
 8006332:	4293      	cmp	r3, r2
 8006334:	d018      	beq.n	8006368 <HAL_TIM_Base_Start_IT+0x80>
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	4a1e      	ldr	r2, [pc, #120]	@ (80063b4 <HAL_TIM_Base_Start_IT+0xcc>)
 800633c:	4293      	cmp	r3, r2
 800633e:	d013      	beq.n	8006368 <HAL_TIM_Base_Start_IT+0x80>
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	4a1c      	ldr	r2, [pc, #112]	@ (80063b8 <HAL_TIM_Base_Start_IT+0xd0>)
 8006346:	4293      	cmp	r3, r2
 8006348:	d00e      	beq.n	8006368 <HAL_TIM_Base_Start_IT+0x80>
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	4a1b      	ldr	r2, [pc, #108]	@ (80063bc <HAL_TIM_Base_Start_IT+0xd4>)
 8006350:	4293      	cmp	r3, r2
 8006352:	d009      	beq.n	8006368 <HAL_TIM_Base_Start_IT+0x80>
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	4a19      	ldr	r2, [pc, #100]	@ (80063c0 <HAL_TIM_Base_Start_IT+0xd8>)
 800635a:	4293      	cmp	r3, r2
 800635c:	d004      	beq.n	8006368 <HAL_TIM_Base_Start_IT+0x80>
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	4a18      	ldr	r2, [pc, #96]	@ (80063c4 <HAL_TIM_Base_Start_IT+0xdc>)
 8006364:	4293      	cmp	r3, r2
 8006366:	d111      	bne.n	800638c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	689b      	ldr	r3, [r3, #8]
 800636e:	f003 0307 	and.w	r3, r3, #7
 8006372:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	2b06      	cmp	r3, #6
 8006378:	d010      	beq.n	800639c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	681a      	ldr	r2, [r3, #0]
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	f042 0201 	orr.w	r2, r2, #1
 8006388:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800638a:	e007      	b.n	800639c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	681a      	ldr	r2, [r3, #0]
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	f042 0201 	orr.w	r2, r2, #1
 800639a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800639c:	2300      	movs	r3, #0
}
 800639e:	4618      	mov	r0, r3
 80063a0:	3714      	adds	r7, #20
 80063a2:	46bd      	mov	sp, r7
 80063a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a8:	4770      	bx	lr
 80063aa:	bf00      	nop
 80063ac:	40010000 	.word	0x40010000
 80063b0:	40000400 	.word	0x40000400
 80063b4:	40000800 	.word	0x40000800
 80063b8:	40000c00 	.word	0x40000c00
 80063bc:	40010400 	.word	0x40010400
 80063c0:	40014000 	.word	0x40014000
 80063c4:	40001800 	.word	0x40001800

080063c8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80063c8:	b580      	push	{r7, lr}
 80063ca:	b082      	sub	sp, #8
 80063cc:	af00      	add	r7, sp, #0
 80063ce:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	691b      	ldr	r3, [r3, #16]
 80063d6:	f003 0302 	and.w	r3, r3, #2
 80063da:	2b02      	cmp	r3, #2
 80063dc:	d122      	bne.n	8006424 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	68db      	ldr	r3, [r3, #12]
 80063e4:	f003 0302 	and.w	r3, r3, #2
 80063e8:	2b02      	cmp	r3, #2
 80063ea:	d11b      	bne.n	8006424 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	f06f 0202 	mvn.w	r2, #2
 80063f4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	2201      	movs	r2, #1
 80063fa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	699b      	ldr	r3, [r3, #24]
 8006402:	f003 0303 	and.w	r3, r3, #3
 8006406:	2b00      	cmp	r3, #0
 8006408:	d003      	beq.n	8006412 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800640a:	6878      	ldr	r0, [r7, #4]
 800640c:	f000 f9b5 	bl	800677a <HAL_TIM_IC_CaptureCallback>
 8006410:	e005      	b.n	800641e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006412:	6878      	ldr	r0, [r7, #4]
 8006414:	f000 f9a7 	bl	8006766 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006418:	6878      	ldr	r0, [r7, #4]
 800641a:	f000 f9b8 	bl	800678e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	2200      	movs	r2, #0
 8006422:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	691b      	ldr	r3, [r3, #16]
 800642a:	f003 0304 	and.w	r3, r3, #4
 800642e:	2b04      	cmp	r3, #4
 8006430:	d122      	bne.n	8006478 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	68db      	ldr	r3, [r3, #12]
 8006438:	f003 0304 	and.w	r3, r3, #4
 800643c:	2b04      	cmp	r3, #4
 800643e:	d11b      	bne.n	8006478 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	f06f 0204 	mvn.w	r2, #4
 8006448:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	2202      	movs	r2, #2
 800644e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	699b      	ldr	r3, [r3, #24]
 8006456:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800645a:	2b00      	cmp	r3, #0
 800645c:	d003      	beq.n	8006466 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800645e:	6878      	ldr	r0, [r7, #4]
 8006460:	f000 f98b 	bl	800677a <HAL_TIM_IC_CaptureCallback>
 8006464:	e005      	b.n	8006472 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006466:	6878      	ldr	r0, [r7, #4]
 8006468:	f000 f97d 	bl	8006766 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800646c:	6878      	ldr	r0, [r7, #4]
 800646e:	f000 f98e 	bl	800678e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	2200      	movs	r2, #0
 8006476:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	691b      	ldr	r3, [r3, #16]
 800647e:	f003 0308 	and.w	r3, r3, #8
 8006482:	2b08      	cmp	r3, #8
 8006484:	d122      	bne.n	80064cc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	68db      	ldr	r3, [r3, #12]
 800648c:	f003 0308 	and.w	r3, r3, #8
 8006490:	2b08      	cmp	r3, #8
 8006492:	d11b      	bne.n	80064cc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	f06f 0208 	mvn.w	r2, #8
 800649c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	2204      	movs	r2, #4
 80064a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	69db      	ldr	r3, [r3, #28]
 80064aa:	f003 0303 	and.w	r3, r3, #3
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d003      	beq.n	80064ba <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80064b2:	6878      	ldr	r0, [r7, #4]
 80064b4:	f000 f961 	bl	800677a <HAL_TIM_IC_CaptureCallback>
 80064b8:	e005      	b.n	80064c6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80064ba:	6878      	ldr	r0, [r7, #4]
 80064bc:	f000 f953 	bl	8006766 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80064c0:	6878      	ldr	r0, [r7, #4]
 80064c2:	f000 f964 	bl	800678e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	2200      	movs	r2, #0
 80064ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	691b      	ldr	r3, [r3, #16]
 80064d2:	f003 0310 	and.w	r3, r3, #16
 80064d6:	2b10      	cmp	r3, #16
 80064d8:	d122      	bne.n	8006520 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	68db      	ldr	r3, [r3, #12]
 80064e0:	f003 0310 	and.w	r3, r3, #16
 80064e4:	2b10      	cmp	r3, #16
 80064e6:	d11b      	bne.n	8006520 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	f06f 0210 	mvn.w	r2, #16
 80064f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	2208      	movs	r2, #8
 80064f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	69db      	ldr	r3, [r3, #28]
 80064fe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006502:	2b00      	cmp	r3, #0
 8006504:	d003      	beq.n	800650e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006506:	6878      	ldr	r0, [r7, #4]
 8006508:	f000 f937 	bl	800677a <HAL_TIM_IC_CaptureCallback>
 800650c:	e005      	b.n	800651a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800650e:	6878      	ldr	r0, [r7, #4]
 8006510:	f000 f929 	bl	8006766 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006514:	6878      	ldr	r0, [r7, #4]
 8006516:	f000 f93a 	bl	800678e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	2200      	movs	r2, #0
 800651e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	691b      	ldr	r3, [r3, #16]
 8006526:	f003 0301 	and.w	r3, r3, #1
 800652a:	2b01      	cmp	r3, #1
 800652c:	d10e      	bne.n	800654c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	68db      	ldr	r3, [r3, #12]
 8006534:	f003 0301 	and.w	r3, r3, #1
 8006538:	2b01      	cmp	r3, #1
 800653a:	d107      	bne.n	800654c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	f06f 0201 	mvn.w	r2, #1
 8006544:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006546:	6878      	ldr	r0, [r7, #4]
 8006548:	f7fc fd96 	bl	8003078 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	691b      	ldr	r3, [r3, #16]
 8006552:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006556:	2b80      	cmp	r3, #128	@ 0x80
 8006558:	d10e      	bne.n	8006578 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	68db      	ldr	r3, [r3, #12]
 8006560:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006564:	2b80      	cmp	r3, #128	@ 0x80
 8006566:	d107      	bne.n	8006578 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8006570:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006572:	6878      	ldr	r0, [r7, #4]
 8006574:	f000 fae0 	bl	8006b38 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	691b      	ldr	r3, [r3, #16]
 800657e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006582:	2b40      	cmp	r3, #64	@ 0x40
 8006584:	d10e      	bne.n	80065a4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	68db      	ldr	r3, [r3, #12]
 800658c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006590:	2b40      	cmp	r3, #64	@ 0x40
 8006592:	d107      	bne.n	80065a4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800659c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800659e:	6878      	ldr	r0, [r7, #4]
 80065a0:	f000 f8ff 	bl	80067a2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	691b      	ldr	r3, [r3, #16]
 80065aa:	f003 0320 	and.w	r3, r3, #32
 80065ae:	2b20      	cmp	r3, #32
 80065b0:	d10e      	bne.n	80065d0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	68db      	ldr	r3, [r3, #12]
 80065b8:	f003 0320 	and.w	r3, r3, #32
 80065bc:	2b20      	cmp	r3, #32
 80065be:	d107      	bne.n	80065d0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	f06f 0220 	mvn.w	r2, #32
 80065c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80065ca:	6878      	ldr	r0, [r7, #4]
 80065cc:	f000 faaa 	bl	8006b24 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80065d0:	bf00      	nop
 80065d2:	3708      	adds	r7, #8
 80065d4:	46bd      	mov	sp, r7
 80065d6:	bd80      	pop	{r7, pc}

080065d8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80065d8:	b580      	push	{r7, lr}
 80065da:	b084      	sub	sp, #16
 80065dc:	af00      	add	r7, sp, #0
 80065de:	6078      	str	r0, [r7, #4]
 80065e0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80065e2:	2300      	movs	r3, #0
 80065e4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80065ec:	2b01      	cmp	r3, #1
 80065ee:	d101      	bne.n	80065f4 <HAL_TIM_ConfigClockSource+0x1c>
 80065f0:	2302      	movs	r3, #2
 80065f2:	e0b4      	b.n	800675e <HAL_TIM_ConfigClockSource+0x186>
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	2201      	movs	r2, #1
 80065f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	2202      	movs	r2, #2
 8006600:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	689b      	ldr	r3, [r3, #8]
 800660a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800660c:	68bb      	ldr	r3, [r7, #8]
 800660e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8006612:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006614:	68bb      	ldr	r3, [r7, #8]
 8006616:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800661a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	68ba      	ldr	r2, [r7, #8]
 8006622:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006624:	683b      	ldr	r3, [r7, #0]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800662c:	d03e      	beq.n	80066ac <HAL_TIM_ConfigClockSource+0xd4>
 800662e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006632:	f200 8087 	bhi.w	8006744 <HAL_TIM_ConfigClockSource+0x16c>
 8006636:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800663a:	f000 8086 	beq.w	800674a <HAL_TIM_ConfigClockSource+0x172>
 800663e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006642:	d87f      	bhi.n	8006744 <HAL_TIM_ConfigClockSource+0x16c>
 8006644:	2b70      	cmp	r3, #112	@ 0x70
 8006646:	d01a      	beq.n	800667e <HAL_TIM_ConfigClockSource+0xa6>
 8006648:	2b70      	cmp	r3, #112	@ 0x70
 800664a:	d87b      	bhi.n	8006744 <HAL_TIM_ConfigClockSource+0x16c>
 800664c:	2b60      	cmp	r3, #96	@ 0x60
 800664e:	d050      	beq.n	80066f2 <HAL_TIM_ConfigClockSource+0x11a>
 8006650:	2b60      	cmp	r3, #96	@ 0x60
 8006652:	d877      	bhi.n	8006744 <HAL_TIM_ConfigClockSource+0x16c>
 8006654:	2b50      	cmp	r3, #80	@ 0x50
 8006656:	d03c      	beq.n	80066d2 <HAL_TIM_ConfigClockSource+0xfa>
 8006658:	2b50      	cmp	r3, #80	@ 0x50
 800665a:	d873      	bhi.n	8006744 <HAL_TIM_ConfigClockSource+0x16c>
 800665c:	2b40      	cmp	r3, #64	@ 0x40
 800665e:	d058      	beq.n	8006712 <HAL_TIM_ConfigClockSource+0x13a>
 8006660:	2b40      	cmp	r3, #64	@ 0x40
 8006662:	d86f      	bhi.n	8006744 <HAL_TIM_ConfigClockSource+0x16c>
 8006664:	2b30      	cmp	r3, #48	@ 0x30
 8006666:	d064      	beq.n	8006732 <HAL_TIM_ConfigClockSource+0x15a>
 8006668:	2b30      	cmp	r3, #48	@ 0x30
 800666a:	d86b      	bhi.n	8006744 <HAL_TIM_ConfigClockSource+0x16c>
 800666c:	2b20      	cmp	r3, #32
 800666e:	d060      	beq.n	8006732 <HAL_TIM_ConfigClockSource+0x15a>
 8006670:	2b20      	cmp	r3, #32
 8006672:	d867      	bhi.n	8006744 <HAL_TIM_ConfigClockSource+0x16c>
 8006674:	2b00      	cmp	r3, #0
 8006676:	d05c      	beq.n	8006732 <HAL_TIM_ConfigClockSource+0x15a>
 8006678:	2b10      	cmp	r3, #16
 800667a:	d05a      	beq.n	8006732 <HAL_TIM_ConfigClockSource+0x15a>
 800667c:	e062      	b.n	8006744 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	6818      	ldr	r0, [r3, #0]
 8006682:	683b      	ldr	r3, [r7, #0]
 8006684:	6899      	ldr	r1, [r3, #8]
 8006686:	683b      	ldr	r3, [r7, #0]
 8006688:	685a      	ldr	r2, [r3, #4]
 800668a:	683b      	ldr	r3, [r7, #0]
 800668c:	68db      	ldr	r3, [r3, #12]
 800668e:	f000 f9ad 	bl	80069ec <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	689b      	ldr	r3, [r3, #8]
 8006698:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800669a:	68bb      	ldr	r3, [r7, #8]
 800669c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80066a0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	68ba      	ldr	r2, [r7, #8]
 80066a8:	609a      	str	r2, [r3, #8]
      break;
 80066aa:	e04f      	b.n	800674c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	6818      	ldr	r0, [r3, #0]
 80066b0:	683b      	ldr	r3, [r7, #0]
 80066b2:	6899      	ldr	r1, [r3, #8]
 80066b4:	683b      	ldr	r3, [r7, #0]
 80066b6:	685a      	ldr	r2, [r3, #4]
 80066b8:	683b      	ldr	r3, [r7, #0]
 80066ba:	68db      	ldr	r3, [r3, #12]
 80066bc:	f000 f996 	bl	80069ec <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	689a      	ldr	r2, [r3, #8]
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80066ce:	609a      	str	r2, [r3, #8]
      break;
 80066d0:	e03c      	b.n	800674c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	6818      	ldr	r0, [r3, #0]
 80066d6:	683b      	ldr	r3, [r7, #0]
 80066d8:	6859      	ldr	r1, [r3, #4]
 80066da:	683b      	ldr	r3, [r7, #0]
 80066dc:	68db      	ldr	r3, [r3, #12]
 80066de:	461a      	mov	r2, r3
 80066e0:	f000 f90a 	bl	80068f8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	2150      	movs	r1, #80	@ 0x50
 80066ea:	4618      	mov	r0, r3
 80066ec:	f000 f963 	bl	80069b6 <TIM_ITRx_SetConfig>
      break;
 80066f0:	e02c      	b.n	800674c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	6818      	ldr	r0, [r3, #0]
 80066f6:	683b      	ldr	r3, [r7, #0]
 80066f8:	6859      	ldr	r1, [r3, #4]
 80066fa:	683b      	ldr	r3, [r7, #0]
 80066fc:	68db      	ldr	r3, [r3, #12]
 80066fe:	461a      	mov	r2, r3
 8006700:	f000 f929 	bl	8006956 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	2160      	movs	r1, #96	@ 0x60
 800670a:	4618      	mov	r0, r3
 800670c:	f000 f953 	bl	80069b6 <TIM_ITRx_SetConfig>
      break;
 8006710:	e01c      	b.n	800674c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	6818      	ldr	r0, [r3, #0]
 8006716:	683b      	ldr	r3, [r7, #0]
 8006718:	6859      	ldr	r1, [r3, #4]
 800671a:	683b      	ldr	r3, [r7, #0]
 800671c:	68db      	ldr	r3, [r3, #12]
 800671e:	461a      	mov	r2, r3
 8006720:	f000 f8ea 	bl	80068f8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	2140      	movs	r1, #64	@ 0x40
 800672a:	4618      	mov	r0, r3
 800672c:	f000 f943 	bl	80069b6 <TIM_ITRx_SetConfig>
      break;
 8006730:	e00c      	b.n	800674c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	681a      	ldr	r2, [r3, #0]
 8006736:	683b      	ldr	r3, [r7, #0]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	4619      	mov	r1, r3
 800673c:	4610      	mov	r0, r2
 800673e:	f000 f93a 	bl	80069b6 <TIM_ITRx_SetConfig>
      break;
 8006742:	e003      	b.n	800674c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006744:	2301      	movs	r3, #1
 8006746:	73fb      	strb	r3, [r7, #15]
      break;
 8006748:	e000      	b.n	800674c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800674a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	2201      	movs	r2, #1
 8006750:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	2200      	movs	r2, #0
 8006758:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800675c:	7bfb      	ldrb	r3, [r7, #15]
}
 800675e:	4618      	mov	r0, r3
 8006760:	3710      	adds	r7, #16
 8006762:	46bd      	mov	sp, r7
 8006764:	bd80      	pop	{r7, pc}

08006766 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006766:	b480      	push	{r7}
 8006768:	b083      	sub	sp, #12
 800676a:	af00      	add	r7, sp, #0
 800676c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800676e:	bf00      	nop
 8006770:	370c      	adds	r7, #12
 8006772:	46bd      	mov	sp, r7
 8006774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006778:	4770      	bx	lr

0800677a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800677a:	b480      	push	{r7}
 800677c:	b083      	sub	sp, #12
 800677e:	af00      	add	r7, sp, #0
 8006780:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006782:	bf00      	nop
 8006784:	370c      	adds	r7, #12
 8006786:	46bd      	mov	sp, r7
 8006788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800678c:	4770      	bx	lr

0800678e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800678e:	b480      	push	{r7}
 8006790:	b083      	sub	sp, #12
 8006792:	af00      	add	r7, sp, #0
 8006794:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006796:	bf00      	nop
 8006798:	370c      	adds	r7, #12
 800679a:	46bd      	mov	sp, r7
 800679c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067a0:	4770      	bx	lr

080067a2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80067a2:	b480      	push	{r7}
 80067a4:	b083      	sub	sp, #12
 80067a6:	af00      	add	r7, sp, #0
 80067a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80067aa:	bf00      	nop
 80067ac:	370c      	adds	r7, #12
 80067ae:	46bd      	mov	sp, r7
 80067b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067b4:	4770      	bx	lr
	...

080067b8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80067b8:	b480      	push	{r7}
 80067ba:	b085      	sub	sp, #20
 80067bc:	af00      	add	r7, sp, #0
 80067be:	6078      	str	r0, [r7, #4]
 80067c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	4a40      	ldr	r2, [pc, #256]	@ (80068cc <TIM_Base_SetConfig+0x114>)
 80067cc:	4293      	cmp	r3, r2
 80067ce:	d013      	beq.n	80067f8 <TIM_Base_SetConfig+0x40>
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80067d6:	d00f      	beq.n	80067f8 <TIM_Base_SetConfig+0x40>
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	4a3d      	ldr	r2, [pc, #244]	@ (80068d0 <TIM_Base_SetConfig+0x118>)
 80067dc:	4293      	cmp	r3, r2
 80067de:	d00b      	beq.n	80067f8 <TIM_Base_SetConfig+0x40>
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	4a3c      	ldr	r2, [pc, #240]	@ (80068d4 <TIM_Base_SetConfig+0x11c>)
 80067e4:	4293      	cmp	r3, r2
 80067e6:	d007      	beq.n	80067f8 <TIM_Base_SetConfig+0x40>
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	4a3b      	ldr	r2, [pc, #236]	@ (80068d8 <TIM_Base_SetConfig+0x120>)
 80067ec:	4293      	cmp	r3, r2
 80067ee:	d003      	beq.n	80067f8 <TIM_Base_SetConfig+0x40>
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	4a3a      	ldr	r2, [pc, #232]	@ (80068dc <TIM_Base_SetConfig+0x124>)
 80067f4:	4293      	cmp	r3, r2
 80067f6:	d108      	bne.n	800680a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80067fe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006800:	683b      	ldr	r3, [r7, #0]
 8006802:	685b      	ldr	r3, [r3, #4]
 8006804:	68fa      	ldr	r2, [r7, #12]
 8006806:	4313      	orrs	r3, r2
 8006808:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	4a2f      	ldr	r2, [pc, #188]	@ (80068cc <TIM_Base_SetConfig+0x114>)
 800680e:	4293      	cmp	r3, r2
 8006810:	d02b      	beq.n	800686a <TIM_Base_SetConfig+0xb2>
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006818:	d027      	beq.n	800686a <TIM_Base_SetConfig+0xb2>
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	4a2c      	ldr	r2, [pc, #176]	@ (80068d0 <TIM_Base_SetConfig+0x118>)
 800681e:	4293      	cmp	r3, r2
 8006820:	d023      	beq.n	800686a <TIM_Base_SetConfig+0xb2>
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	4a2b      	ldr	r2, [pc, #172]	@ (80068d4 <TIM_Base_SetConfig+0x11c>)
 8006826:	4293      	cmp	r3, r2
 8006828:	d01f      	beq.n	800686a <TIM_Base_SetConfig+0xb2>
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	4a2a      	ldr	r2, [pc, #168]	@ (80068d8 <TIM_Base_SetConfig+0x120>)
 800682e:	4293      	cmp	r3, r2
 8006830:	d01b      	beq.n	800686a <TIM_Base_SetConfig+0xb2>
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	4a29      	ldr	r2, [pc, #164]	@ (80068dc <TIM_Base_SetConfig+0x124>)
 8006836:	4293      	cmp	r3, r2
 8006838:	d017      	beq.n	800686a <TIM_Base_SetConfig+0xb2>
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	4a28      	ldr	r2, [pc, #160]	@ (80068e0 <TIM_Base_SetConfig+0x128>)
 800683e:	4293      	cmp	r3, r2
 8006840:	d013      	beq.n	800686a <TIM_Base_SetConfig+0xb2>
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	4a27      	ldr	r2, [pc, #156]	@ (80068e4 <TIM_Base_SetConfig+0x12c>)
 8006846:	4293      	cmp	r3, r2
 8006848:	d00f      	beq.n	800686a <TIM_Base_SetConfig+0xb2>
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	4a26      	ldr	r2, [pc, #152]	@ (80068e8 <TIM_Base_SetConfig+0x130>)
 800684e:	4293      	cmp	r3, r2
 8006850:	d00b      	beq.n	800686a <TIM_Base_SetConfig+0xb2>
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	4a25      	ldr	r2, [pc, #148]	@ (80068ec <TIM_Base_SetConfig+0x134>)
 8006856:	4293      	cmp	r3, r2
 8006858:	d007      	beq.n	800686a <TIM_Base_SetConfig+0xb2>
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	4a24      	ldr	r2, [pc, #144]	@ (80068f0 <TIM_Base_SetConfig+0x138>)
 800685e:	4293      	cmp	r3, r2
 8006860:	d003      	beq.n	800686a <TIM_Base_SetConfig+0xb2>
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	4a23      	ldr	r2, [pc, #140]	@ (80068f4 <TIM_Base_SetConfig+0x13c>)
 8006866:	4293      	cmp	r3, r2
 8006868:	d108      	bne.n	800687c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006870:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006872:	683b      	ldr	r3, [r7, #0]
 8006874:	68db      	ldr	r3, [r3, #12]
 8006876:	68fa      	ldr	r2, [r7, #12]
 8006878:	4313      	orrs	r3, r2
 800687a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006882:	683b      	ldr	r3, [r7, #0]
 8006884:	695b      	ldr	r3, [r3, #20]
 8006886:	4313      	orrs	r3, r2
 8006888:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	68fa      	ldr	r2, [r7, #12]
 800688e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006890:	683b      	ldr	r3, [r7, #0]
 8006892:	689a      	ldr	r2, [r3, #8]
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006898:	683b      	ldr	r3, [r7, #0]
 800689a:	681a      	ldr	r2, [r3, #0]
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	4a0a      	ldr	r2, [pc, #40]	@ (80068cc <TIM_Base_SetConfig+0x114>)
 80068a4:	4293      	cmp	r3, r2
 80068a6:	d003      	beq.n	80068b0 <TIM_Base_SetConfig+0xf8>
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	4a0c      	ldr	r2, [pc, #48]	@ (80068dc <TIM_Base_SetConfig+0x124>)
 80068ac:	4293      	cmp	r3, r2
 80068ae:	d103      	bne.n	80068b8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80068b0:	683b      	ldr	r3, [r7, #0]
 80068b2:	691a      	ldr	r2, [r3, #16]
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	2201      	movs	r2, #1
 80068bc:	615a      	str	r2, [r3, #20]
}
 80068be:	bf00      	nop
 80068c0:	3714      	adds	r7, #20
 80068c2:	46bd      	mov	sp, r7
 80068c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068c8:	4770      	bx	lr
 80068ca:	bf00      	nop
 80068cc:	40010000 	.word	0x40010000
 80068d0:	40000400 	.word	0x40000400
 80068d4:	40000800 	.word	0x40000800
 80068d8:	40000c00 	.word	0x40000c00
 80068dc:	40010400 	.word	0x40010400
 80068e0:	40014000 	.word	0x40014000
 80068e4:	40014400 	.word	0x40014400
 80068e8:	40014800 	.word	0x40014800
 80068ec:	40001800 	.word	0x40001800
 80068f0:	40001c00 	.word	0x40001c00
 80068f4:	40002000 	.word	0x40002000

080068f8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80068f8:	b480      	push	{r7}
 80068fa:	b087      	sub	sp, #28
 80068fc:	af00      	add	r7, sp, #0
 80068fe:	60f8      	str	r0, [r7, #12]
 8006900:	60b9      	str	r1, [r7, #8]
 8006902:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	6a1b      	ldr	r3, [r3, #32]
 8006908:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	6a1b      	ldr	r3, [r3, #32]
 800690e:	f023 0201 	bic.w	r2, r3, #1
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	699b      	ldr	r3, [r3, #24]
 800691a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800691c:	693b      	ldr	r3, [r7, #16]
 800691e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006922:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	011b      	lsls	r3, r3, #4
 8006928:	693a      	ldr	r2, [r7, #16]
 800692a:	4313      	orrs	r3, r2
 800692c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800692e:	697b      	ldr	r3, [r7, #20]
 8006930:	f023 030a 	bic.w	r3, r3, #10
 8006934:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006936:	697a      	ldr	r2, [r7, #20]
 8006938:	68bb      	ldr	r3, [r7, #8]
 800693a:	4313      	orrs	r3, r2
 800693c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	693a      	ldr	r2, [r7, #16]
 8006942:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	697a      	ldr	r2, [r7, #20]
 8006948:	621a      	str	r2, [r3, #32]
}
 800694a:	bf00      	nop
 800694c:	371c      	adds	r7, #28
 800694e:	46bd      	mov	sp, r7
 8006950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006954:	4770      	bx	lr

08006956 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006956:	b480      	push	{r7}
 8006958:	b087      	sub	sp, #28
 800695a:	af00      	add	r7, sp, #0
 800695c:	60f8      	str	r0, [r7, #12]
 800695e:	60b9      	str	r1, [r7, #8]
 8006960:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	6a1b      	ldr	r3, [r3, #32]
 8006966:	f023 0210 	bic.w	r2, r3, #16
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	699b      	ldr	r3, [r3, #24]
 8006972:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	6a1b      	ldr	r3, [r3, #32]
 8006978:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800697a:	697b      	ldr	r3, [r7, #20]
 800697c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006980:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	031b      	lsls	r3, r3, #12
 8006986:	697a      	ldr	r2, [r7, #20]
 8006988:	4313      	orrs	r3, r2
 800698a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800698c:	693b      	ldr	r3, [r7, #16]
 800698e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006992:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006994:	68bb      	ldr	r3, [r7, #8]
 8006996:	011b      	lsls	r3, r3, #4
 8006998:	693a      	ldr	r2, [r7, #16]
 800699a:	4313      	orrs	r3, r2
 800699c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	697a      	ldr	r2, [r7, #20]
 80069a2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	693a      	ldr	r2, [r7, #16]
 80069a8:	621a      	str	r2, [r3, #32]
}
 80069aa:	bf00      	nop
 80069ac:	371c      	adds	r7, #28
 80069ae:	46bd      	mov	sp, r7
 80069b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069b4:	4770      	bx	lr

080069b6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80069b6:	b480      	push	{r7}
 80069b8:	b085      	sub	sp, #20
 80069ba:	af00      	add	r7, sp, #0
 80069bc:	6078      	str	r0, [r7, #4]
 80069be:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	689b      	ldr	r3, [r3, #8]
 80069c4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80069cc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80069ce:	683a      	ldr	r2, [r7, #0]
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	4313      	orrs	r3, r2
 80069d4:	f043 0307 	orr.w	r3, r3, #7
 80069d8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	68fa      	ldr	r2, [r7, #12]
 80069de:	609a      	str	r2, [r3, #8]
}
 80069e0:	bf00      	nop
 80069e2:	3714      	adds	r7, #20
 80069e4:	46bd      	mov	sp, r7
 80069e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ea:	4770      	bx	lr

080069ec <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80069ec:	b480      	push	{r7}
 80069ee:	b087      	sub	sp, #28
 80069f0:	af00      	add	r7, sp, #0
 80069f2:	60f8      	str	r0, [r7, #12]
 80069f4:	60b9      	str	r1, [r7, #8]
 80069f6:	607a      	str	r2, [r7, #4]
 80069f8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	689b      	ldr	r3, [r3, #8]
 80069fe:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006a00:	697b      	ldr	r3, [r7, #20]
 8006a02:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006a06:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006a08:	683b      	ldr	r3, [r7, #0]
 8006a0a:	021a      	lsls	r2, r3, #8
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	431a      	orrs	r2, r3
 8006a10:	68bb      	ldr	r3, [r7, #8]
 8006a12:	4313      	orrs	r3, r2
 8006a14:	697a      	ldr	r2, [r7, #20]
 8006a16:	4313      	orrs	r3, r2
 8006a18:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	697a      	ldr	r2, [r7, #20]
 8006a1e:	609a      	str	r2, [r3, #8]
}
 8006a20:	bf00      	nop
 8006a22:	371c      	adds	r7, #28
 8006a24:	46bd      	mov	sp, r7
 8006a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a2a:	4770      	bx	lr

08006a2c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006a2c:	b480      	push	{r7}
 8006a2e:	b085      	sub	sp, #20
 8006a30:	af00      	add	r7, sp, #0
 8006a32:	6078      	str	r0, [r7, #4]
 8006a34:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006a3c:	2b01      	cmp	r3, #1
 8006a3e:	d101      	bne.n	8006a44 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006a40:	2302      	movs	r3, #2
 8006a42:	e05a      	b.n	8006afa <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	2201      	movs	r2, #1
 8006a48:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	2202      	movs	r2, #2
 8006a50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	685b      	ldr	r3, [r3, #4]
 8006a5a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	689b      	ldr	r3, [r3, #8]
 8006a62:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006a6a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006a6c:	683b      	ldr	r3, [r7, #0]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	68fa      	ldr	r2, [r7, #12]
 8006a72:	4313      	orrs	r3, r2
 8006a74:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	68fa      	ldr	r2, [r7, #12]
 8006a7c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	4a21      	ldr	r2, [pc, #132]	@ (8006b08 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006a84:	4293      	cmp	r3, r2
 8006a86:	d022      	beq.n	8006ace <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006a90:	d01d      	beq.n	8006ace <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	4a1d      	ldr	r2, [pc, #116]	@ (8006b0c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006a98:	4293      	cmp	r3, r2
 8006a9a:	d018      	beq.n	8006ace <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	4a1b      	ldr	r2, [pc, #108]	@ (8006b10 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8006aa2:	4293      	cmp	r3, r2
 8006aa4:	d013      	beq.n	8006ace <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	4a1a      	ldr	r2, [pc, #104]	@ (8006b14 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006aac:	4293      	cmp	r3, r2
 8006aae:	d00e      	beq.n	8006ace <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	4a18      	ldr	r2, [pc, #96]	@ (8006b18 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006ab6:	4293      	cmp	r3, r2
 8006ab8:	d009      	beq.n	8006ace <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	4a17      	ldr	r2, [pc, #92]	@ (8006b1c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006ac0:	4293      	cmp	r3, r2
 8006ac2:	d004      	beq.n	8006ace <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	4a15      	ldr	r2, [pc, #84]	@ (8006b20 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006aca:	4293      	cmp	r3, r2
 8006acc:	d10c      	bne.n	8006ae8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006ace:	68bb      	ldr	r3, [r7, #8]
 8006ad0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006ad4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006ad6:	683b      	ldr	r3, [r7, #0]
 8006ad8:	685b      	ldr	r3, [r3, #4]
 8006ada:	68ba      	ldr	r2, [r7, #8]
 8006adc:	4313      	orrs	r3, r2
 8006ade:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	68ba      	ldr	r2, [r7, #8]
 8006ae6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	2201      	movs	r2, #1
 8006aec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	2200      	movs	r2, #0
 8006af4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006af8:	2300      	movs	r3, #0
}
 8006afa:	4618      	mov	r0, r3
 8006afc:	3714      	adds	r7, #20
 8006afe:	46bd      	mov	sp, r7
 8006b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b04:	4770      	bx	lr
 8006b06:	bf00      	nop
 8006b08:	40010000 	.word	0x40010000
 8006b0c:	40000400 	.word	0x40000400
 8006b10:	40000800 	.word	0x40000800
 8006b14:	40000c00 	.word	0x40000c00
 8006b18:	40010400 	.word	0x40010400
 8006b1c:	40014000 	.word	0x40014000
 8006b20:	40001800 	.word	0x40001800

08006b24 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006b24:	b480      	push	{r7}
 8006b26:	b083      	sub	sp, #12
 8006b28:	af00      	add	r7, sp, #0
 8006b2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006b2c:	bf00      	nop
 8006b2e:	370c      	adds	r7, #12
 8006b30:	46bd      	mov	sp, r7
 8006b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b36:	4770      	bx	lr

08006b38 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006b38:	b480      	push	{r7}
 8006b3a:	b083      	sub	sp, #12
 8006b3c:	af00      	add	r7, sp, #0
 8006b3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006b40:	bf00      	nop
 8006b42:	370c      	adds	r7, #12
 8006b44:	46bd      	mov	sp, r7
 8006b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b4a:	4770      	bx	lr

08006b4c <FSMC_NORSRAM_Init>:
  * @param  Device Pointer to NORSRAM device instance
  * @param  Init Pointer to NORSRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_InitTypeDef* Init)
{ 
 8006b4c:	b480      	push	{r7}
 8006b4e:	b085      	sub	sp, #20
 8006b50:	af00      	add	r7, sp, #0
 8006b52:	6078      	str	r0, [r7, #4]
 8006b54:	6039      	str	r1, [r7, #0]
  uint32_t tmpr = 0U;
 8006b56:	2300      	movs	r3, #0
 8006b58:	60fb      	str	r3, [r7, #12]
  assert_param(IS_FSMC_WRITE_FIFO(Init->WriteFifo));
  assert_param(IS_FSMC_CONTINOUS_CLOCK(Init->ContinuousClock));
#endif /* STM32F412Zx || STM32F412Vx || STM32F413xx || STM32F423xx */
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Init->NSBank];
 8006b5a:	683b      	ldr	r3, [r7, #0]
 8006b5c:	681a      	ldr	r2, [r3, #0]
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b64:	60fb      	str	r3, [r7, #12]

#if defined(STM32F405xx) || defined(STM32F415xx) || defined(STM32F407xx) || defined(STM32F417xx)
  /* Clear MBKEN, MUXEN, MTYP, MWID, FACCEN, BURSTEN, WAITPOL, WRAPMOD, WAITCFG, WREN,
           WAITEN, EXTMOD, ASYNCWAIT, CPSIZE and CBURSTRW bits */
  tmpr &= ((uint32_t)~(FSMC_BCR1_MBKEN     | FSMC_BCR1_MUXEN    | FSMC_BCR1_MTYP     | \
 8006b66:	68fa      	ldr	r2, [r7, #12]
 8006b68:	4b20      	ldr	r3, [pc, #128]	@ (8006bec <FSMC_NORSRAM_Init+0xa0>)
 8006b6a:	4013      	ands	r3, r2
 8006b6c:	60fb      	str	r3, [r7, #12]
                       FSMC_BCR1_MWID      | FSMC_BCR1_FACCEN   | FSMC_BCR1_BURSTEN  | \
                       FSMC_BCR1_WAITPOL   | FSMC_BCR1_WRAPMOD  | FSMC_BCR1_WAITCFG  | \
                       FSMC_BCR1_WREN      | FSMC_BCR1_WAITEN   | FSMC_BCR1_EXTMOD   | \
                       FSMC_BCR1_ASYNCWAIT | FSMC_BCR1_CPSIZE   | FSMC_BCR1_CBURSTRW));
  /* Set NORSRAM device control parameters */
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 8006b6e:	683b      	ldr	r3, [r7, #0]
 8006b70:	685a      	ldr	r2, [r3, #4]
                     Init->MemoryType           |\
 8006b72:	683b      	ldr	r3, [r7, #0]
 8006b74:	689b      	ldr	r3, [r3, #8]
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 8006b76:	431a      	orrs	r2, r3
                     Init->MemoryDataWidth      |\
 8006b78:	683b      	ldr	r3, [r7, #0]
 8006b7a:	68db      	ldr	r3, [r3, #12]
                     Init->MemoryType           |\
 8006b7c:	431a      	orrs	r2, r3
                     Init->BurstAccessMode      |\
 8006b7e:	683b      	ldr	r3, [r7, #0]
 8006b80:	691b      	ldr	r3, [r3, #16]
                     Init->MemoryDataWidth      |\
 8006b82:	431a      	orrs	r2, r3
                     Init->WaitSignalPolarity   |\
 8006b84:	683b      	ldr	r3, [r7, #0]
 8006b86:	695b      	ldr	r3, [r3, #20]
                     Init->BurstAccessMode      |\
 8006b88:	431a      	orrs	r2, r3
                     Init->WrapMode             |\
 8006b8a:	683b      	ldr	r3, [r7, #0]
 8006b8c:	699b      	ldr	r3, [r3, #24]
                     Init->WaitSignalPolarity   |\
 8006b8e:	431a      	orrs	r2, r3
                     Init->WaitSignalActive     |\
 8006b90:	683b      	ldr	r3, [r7, #0]
 8006b92:	69db      	ldr	r3, [r3, #28]
                     Init->WrapMode             |\
 8006b94:	431a      	orrs	r2, r3
                     Init->WriteOperation       |\
 8006b96:	683b      	ldr	r3, [r7, #0]
 8006b98:	6a1b      	ldr	r3, [r3, #32]
                     Init->WaitSignalActive     |\
 8006b9a:	431a      	orrs	r2, r3
                     Init->WaitSignal           |\
 8006b9c:	683b      	ldr	r3, [r7, #0]
 8006b9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                     Init->WriteOperation       |\
 8006ba0:	431a      	orrs	r2, r3
                     Init->ExtendedMode         |\
 8006ba2:	683b      	ldr	r3, [r7, #0]
 8006ba4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
                     Init->WaitSignal           |\
 8006ba6:	431a      	orrs	r2, r3
                     Init->AsynchronousWait     |\
 8006ba8:	683b      	ldr	r3, [r7, #0]
 8006baa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
                     Init->ExtendedMode         |\
 8006bac:	431a      	orrs	r2, r3
                     Init->PageSize             |\
 8006bae:	683b      	ldr	r3, [r7, #0]
 8006bb0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
                     Init->AsynchronousWait     |\
 8006bb2:	431a      	orrs	r2, r3
                     Init->WriteBurst
 8006bb4:	683b      	ldr	r3, [r7, #0]
 8006bb6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
                     Init->PageSize             |\
 8006bb8:	4313      	orrs	r3, r2
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 8006bba:	68fa      	ldr	r2, [r7, #12]
 8006bbc:	4313      	orrs	r3, r2
 8006bbe:	60fb      	str	r3, [r7, #12]
                     Init->ContinuousClock      |\
                     Init->PageSize             |\
                     Init->WriteFifo);
#endif /* STM32F405xx || STM32F415xx || STM32F407xx || STM32F417xx */ 
            
  if(Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 8006bc0:	683b      	ldr	r3, [r7, #0]
 8006bc2:	689b      	ldr	r3, [r3, #8]
 8006bc4:	2b08      	cmp	r3, #8
 8006bc6:	d103      	bne.n	8006bd0 <FSMC_NORSRAM_Init+0x84>
  {
    tmpr |= (uint32_t)FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006bce:	60fb      	str	r3, [r7, #12]
  }

  Device->BTCR[Init->NSBank] = tmpr;
 8006bd0:	683b      	ldr	r3, [r7, #0]
 8006bd2:	681a      	ldr	r2, [r3, #0]
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	68f9      	ldr	r1, [r7, #12]
 8006bd8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  {
    Device->BTCR[FSMC_NORSRAM_BANK1] |= (uint32_t)(Init->WriteFifo);
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 8006bdc:	2300      	movs	r3, #0
}
 8006bde:	4618      	mov	r0, r3
 8006be0:	3714      	adds	r7, #20
 8006be2:	46bd      	mov	sp, r7
 8006be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006be8:	4770      	bx	lr
 8006bea:	bf00      	nop
 8006bec:	fff00080 	.word	0xfff00080

08006bf0 <FSMC_NORSRAM_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8006bf0:	b480      	push	{r7}
 8006bf2:	b087      	sub	sp, #28
 8006bf4:	af00      	add	r7, sp, #0
 8006bf6:	60f8      	str	r0, [r7, #12]
 8006bf8:	60b9      	str	r1, [r7, #8]
 8006bfa:	607a      	str	r2, [r7, #4]
  uint32_t tmpr = 0U;
 8006bfc:	2300      	movs	r3, #0
 8006bfe:	617b      	str	r3, [r7, #20]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Bank + 1U];
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	1c5a      	adds	r2, r3, #1
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c0a:	617b      	str	r3, [r7, #20]

  /* Clear ADDSET, ADDHLD, DATAST, BUSTURN, CLKDIV, DATLAT and ACCMOD bits */
  tmpr &= ((uint32_t)~(FSMC_BTR1_ADDSET  | FSMC_BTR1_ADDHLD | FSMC_BTR1_DATAST | \
 8006c0c:	697b      	ldr	r3, [r7, #20]
 8006c0e:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8006c12:	617b      	str	r3, [r7, #20]
                       FSMC_BTR1_BUSTURN | FSMC_BTR1_CLKDIV | FSMC_BTR1_DATLAT | \
                       FSMC_BTR1_ACCMOD));
  
  /* Set FSMC_NORSRAM device timing parameters */  
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8006c14:	68bb      	ldr	r3, [r7, #8]
 8006c16:	681a      	ldr	r2, [r3, #0]
                    ((Timing->AddressHoldTime) << 4U)          |\
 8006c18:	68bb      	ldr	r3, [r7, #8]
 8006c1a:	685b      	ldr	r3, [r3, #4]
 8006c1c:	011b      	lsls	r3, r3, #4
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8006c1e:	431a      	orrs	r2, r3
                    ((Timing->DataSetupTime) << 8U)            |\
 8006c20:	68bb      	ldr	r3, [r7, #8]
 8006c22:	689b      	ldr	r3, [r3, #8]
 8006c24:	021b      	lsls	r3, r3, #8
                    ((Timing->AddressHoldTime) << 4U)          |\
 8006c26:	431a      	orrs	r2, r3
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 8006c28:	68bb      	ldr	r3, [r7, #8]
 8006c2a:	68db      	ldr	r3, [r3, #12]
 8006c2c:	041b      	lsls	r3, r3, #16
                    ((Timing->DataSetupTime) << 8U)            |\
 8006c2e:	431a      	orrs	r2, r3
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 8006c30:	68bb      	ldr	r3, [r7, #8]
 8006c32:	691b      	ldr	r3, [r3, #16]
 8006c34:	3b01      	subs	r3, #1
 8006c36:	051b      	lsls	r3, r3, #20
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 8006c38:	431a      	orrs	r2, r3
                    (((Timing->DataLatency)-2U) << 24U)        |\
 8006c3a:	68bb      	ldr	r3, [r7, #8]
 8006c3c:	695b      	ldr	r3, [r3, #20]
 8006c3e:	3b02      	subs	r3, #2
 8006c40:	061b      	lsls	r3, r3, #24
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 8006c42:	431a      	orrs	r2, r3
                    (Timing->AccessMode));
 8006c44:	68bb      	ldr	r3, [r7, #8]
 8006c46:	699b      	ldr	r3, [r3, #24]
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8006c48:	4313      	orrs	r3, r2
 8006c4a:	697a      	ldr	r2, [r7, #20]
 8006c4c:	4313      	orrs	r3, r2
 8006c4e:	617b      	str	r3, [r7, #20]
  
  Device->BTCR[Bank + 1] = tmpr; 
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	1c5a      	adds	r2, r3, #1
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	6979      	ldr	r1, [r7, #20]
 8006c58:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    tmpr |= (uint32_t)(((Timing->CLKDivision)-1U) << 20U);
    Device->BTCR[FSMC_NORSRAM_BANK1 + 1U] = tmpr;
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 8006c5c:	2300      	movs	r3, #0
}
 8006c5e:	4618      	mov	r0, r3
 8006c60:	371c      	adds	r7, #28
 8006c62:	46bd      	mov	sp, r7
 8006c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c68:	4770      	bx	lr
	...

08006c6c <FSMC_NORSRAM_Extended_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank, uint32_t ExtendedMode)
{
 8006c6c:	b480      	push	{r7}
 8006c6e:	b087      	sub	sp, #28
 8006c70:	af00      	add	r7, sp, #0
 8006c72:	60f8      	str	r0, [r7, #12]
 8006c74:	60b9      	str	r1, [r7, #8]
 8006c76:	607a      	str	r2, [r7, #4]
 8006c78:	603b      	str	r3, [r7, #0]
  uint32_t tmpr = 0U;
 8006c7a:	2300      	movs	r3, #0
 8006c7c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if(ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 8006c7e:	683b      	ldr	r3, [r7, #0]
 8006c80:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006c84:	d122      	bne.n	8006ccc <FSMC_NORSRAM_Extended_Timing_Init+0x60>
    assert_param(IS_FSMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
    /* Get the BWTR register value */
    tmpr = Device->BWTR[Bank];
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	687a      	ldr	r2, [r7, #4]
 8006c8a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c8e:	617b      	str	r3, [r7, #20]
    
    /* Clear ADDSET, ADDHLD, DATAST, BUSTURN and ACCMOD bits */
    tmpr &= ((uint32_t)~(FSMC_BWTR1_ADDSET  | FSMC_BWTR1_ADDHLD | FSMC_BWTR1_DATAST | \
 8006c90:	697a      	ldr	r2, [r7, #20]
 8006c92:	4b15      	ldr	r3, [pc, #84]	@ (8006ce8 <FSMC_NORSRAM_Extended_Timing_Init+0x7c>)
 8006c94:	4013      	ands	r3, r2
 8006c96:	617b      	str	r3, [r7, #20]
                         FSMC_BWTR1_BUSTURN | FSMC_BWTR1_ACCMOD));

    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8006c98:	68bb      	ldr	r3, [r7, #8]
 8006c9a:	681a      	ldr	r2, [r3, #0]
                      ((Timing->AddressHoldTime) << 4U)          |\
 8006c9c:	68bb      	ldr	r3, [r7, #8]
 8006c9e:	685b      	ldr	r3, [r3, #4]
 8006ca0:	011b      	lsls	r3, r3, #4
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8006ca2:	431a      	orrs	r2, r3
                      ((Timing->DataSetupTime) << 8U)            |\
 8006ca4:	68bb      	ldr	r3, [r7, #8]
 8006ca6:	689b      	ldr	r3, [r3, #8]
 8006ca8:	021b      	lsls	r3, r3, #8
                      ((Timing->AddressHoldTime) << 4U)          |\
 8006caa:	431a      	orrs	r2, r3
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 8006cac:	68bb      	ldr	r3, [r7, #8]
 8006cae:	68db      	ldr	r3, [r3, #12]
 8006cb0:	041b      	lsls	r3, r3, #16
                      ((Timing->DataSetupTime) << 8U)            |\
 8006cb2:	431a      	orrs	r2, r3
                      (Timing->AccessMode));
 8006cb4:	68bb      	ldr	r3, [r7, #8]
 8006cb6:	699b      	ldr	r3, [r3, #24]
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 8006cb8:	4313      	orrs	r3, r2
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8006cba:	697a      	ldr	r2, [r7, #20]
 8006cbc:	4313      	orrs	r3, r2
 8006cbe:	617b      	str	r3, [r7, #20]
    
    Device->BWTR[Bank] = tmpr;
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	687a      	ldr	r2, [r7, #4]
 8006cc4:	6979      	ldr	r1, [r7, #20]
 8006cc6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8006cca:	e005      	b.n	8006cd8 <FSMC_NORSRAM_Extended_Timing_Init+0x6c>
  }
  else                                        
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	687a      	ldr	r2, [r7, #4]
 8006cd0:	f06f 4170 	mvn.w	r1, #4026531840	@ 0xf0000000
 8006cd4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }   
  
  return HAL_OK;  
 8006cd8:	2300      	movs	r3, #0
}
 8006cda:	4618      	mov	r0, r3
 8006cdc:	371c      	adds	r7, #28
 8006cde:	46bd      	mov	sp, r7
 8006ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ce4:	4770      	bx	lr
 8006ce6:	bf00      	nop
 8006ce8:	cff00000 	.word	0xcff00000

08006cec <memset>:
 8006cec:	4402      	add	r2, r0
 8006cee:	4603      	mov	r3, r0
 8006cf0:	4293      	cmp	r3, r2
 8006cf2:	d100      	bne.n	8006cf6 <memset+0xa>
 8006cf4:	4770      	bx	lr
 8006cf6:	f803 1b01 	strb.w	r1, [r3], #1
 8006cfa:	e7f9      	b.n	8006cf0 <memset+0x4>

08006cfc <__libc_init_array>:
 8006cfc:	b570      	push	{r4, r5, r6, lr}
 8006cfe:	4d0d      	ldr	r5, [pc, #52]	@ (8006d34 <__libc_init_array+0x38>)
 8006d00:	4c0d      	ldr	r4, [pc, #52]	@ (8006d38 <__libc_init_array+0x3c>)
 8006d02:	1b64      	subs	r4, r4, r5
 8006d04:	10a4      	asrs	r4, r4, #2
 8006d06:	2600      	movs	r6, #0
 8006d08:	42a6      	cmp	r6, r4
 8006d0a:	d109      	bne.n	8006d20 <__libc_init_array+0x24>
 8006d0c:	4d0b      	ldr	r5, [pc, #44]	@ (8006d3c <__libc_init_array+0x40>)
 8006d0e:	4c0c      	ldr	r4, [pc, #48]	@ (8006d40 <__libc_init_array+0x44>)
 8006d10:	f000 f818 	bl	8006d44 <_init>
 8006d14:	1b64      	subs	r4, r4, r5
 8006d16:	10a4      	asrs	r4, r4, #2
 8006d18:	2600      	movs	r6, #0
 8006d1a:	42a6      	cmp	r6, r4
 8006d1c:	d105      	bne.n	8006d2a <__libc_init_array+0x2e>
 8006d1e:	bd70      	pop	{r4, r5, r6, pc}
 8006d20:	f855 3b04 	ldr.w	r3, [r5], #4
 8006d24:	4798      	blx	r3
 8006d26:	3601      	adds	r6, #1
 8006d28:	e7ee      	b.n	8006d08 <__libc_init_array+0xc>
 8006d2a:	f855 3b04 	ldr.w	r3, [r5], #4
 8006d2e:	4798      	blx	r3
 8006d30:	3601      	adds	r6, #1
 8006d32:	e7f2      	b.n	8006d1a <__libc_init_array+0x1e>
 8006d34:	08009d24 	.word	0x08009d24
 8006d38:	08009d24 	.word	0x08009d24
 8006d3c:	08009d24 	.word	0x08009d24
 8006d40:	08009d28 	.word	0x08009d28

08006d44 <_init>:
 8006d44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d46:	bf00      	nop
 8006d48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006d4a:	bc08      	pop	{r3}
 8006d4c:	469e      	mov	lr, r3
 8006d4e:	4770      	bx	lr

08006d50 <_fini>:
 8006d50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d52:	bf00      	nop
 8006d54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006d56:	bc08      	pop	{r3}
 8006d58:	469e      	mov	lr, r3
 8006d5a:	4770      	bx	lr
